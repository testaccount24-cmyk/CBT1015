/* REXX */
/*******************************************************************/
/*                                                                 */
/* ProgramNAME      : ZOSA1910  (fuer UDB V10 Nr 910)              */
/* AUSRUF           : Procedure  x=ZOSA1910(ssid,loc,ausw,obj)     */
/* AUTHER           : ULRICH BRAEUER                               */
/* FUNKTION         : AG : Build Select Statement for TB/VW        */
/*                                                                 */
/*                                                                 */
/*******************************************************************/

ENV        = "TSO"
X          = MSG('OFF')
USER       = USERID()
SYSCATS    = "SYSCAT"
SYSIBMS    = "SYSIBM"
SYSIBMA    = "SYSIBMADM"
SYSPROCA   = "SYSPROC"
MAXBLOBS   = "2M"
CURSQLID   = ""
RECLEN     = 4096
TRACKS     = 60
DSNRECON   = "N"
SYSUID  = ""
SYSPWD  = ""

ADDRESS ISPEXEC 'VGET (UDBTRACE) PROFILE'
IF UDBTRACE = 'ON' THEN TRACE R
ELSE                    TRACE

Fnumeric   = "BIGINT INTEGER SMALLINT DECIMAL DECFLOAT FLOAT"
stmt       = ''
ddltext    = ""

ssid       = arg(1)
location   = arg(2)
auswahl    = arg(3)
object     = arg(4)
EDIT       = arg(5)
LNR        = arg(6)
object1    = ""
tablespace = ""
DB2_SSID   = SSID

TRACKS  = 60
MAXRows = 0
ADDRESS ISPEXEC 'VGET (SYSIBMS) PROFILE'
ADDRESS ISPEXEC 'VGET (SYSCATS) PROFILE'
ADDRESS ISPEXEC 'VGET (SYSIBMA) PROFILE'
ADDRESS ISPEXEC 'VGET (SYSPROCA) PROFILE'
ADDRESS ISPEXEC 'VGET (CURSQLID) PROFILE'
ADDRESS ISPEXEC 'VGET ('STRIP(SSID)'SQID) PROFILE'
ADDRESS ISPEXEC 'VGET (MAXBLOBS) PROFILE'
ADDRESS ISPEXEC 'VGET (RECLEN) PROFILE'
ADDRESS ISPEXEC 'VGET (TRACKS) PROFILE'
ADDRESS ISPEXEC 'VGET (DSNRECON) PROFILE'
ADDRESS ISPEXEC 'VGET (CURRULE) PROFILE'
ADDRESS ISPEXEC 'VGET (CURSCHEM) PROFILE'
ADDRESS ISPEXEC 'VGET (SYSUID)   PROFILE'
ADDRESS ISPEXEC 'VGET (SYSPWD)   PROFILE'
ADDRESS ISPEXEC 'VGET (MAXROWS)  PROFILE'
IF MAXROWS = 0 THEN MAXROWS = 1000

If DSNRECON = "Y" Then Do
   Call Load_DSNREXX
 End

SSID_CURRENT_SQLID = value(STRIP(SSID)"SQID")
If length(SSID_CURRENT_SQLID) > 0 then do
   CURSQLID = SSID_CURRENT_SQLID
 End
IF CURSQLID   = "NONE" THEN CURSQLID = ""
IF CURSQLID   = ""     THEN CURSQLID = ""
fromlist = ''
wherel   = 'WHERE'
komma    = ''
anzcols  = 0
drop sl.
drop vl.
vl.0 = 0
sl.0 = 0

parse value object with DB2_CREATOR1 '.' DB2_NAME1

If object =  "" Then Do
   ok = nextsl("--SQLTERM=;")
   ok = nextsl("--SPROCPARSER=,")
   ok = nextsl(" ")
   If Length(CURSQLID) > 0 Then Do
      ok = nextsl("SET CURRENT SQLID = '"CURSQLID"'  ;")
    End
   if Length(CURRULE) > 0 Then Do
         ok = nextsl("SET CURRENT RULES = '"CURRULE"';")
    End
   if Length(CURSCHEM) > 0 & CURSCHEM <> USER  Then Do
         ok = nextsl("SET CURRENT SCHEMA = '"CURSCHEM"';")
    End
   ok = nextsl(" ")

   if EDIT = "YES" THEN Call Edit_Stmt  /* Anzeige Erwuenscht */
   Return Stmt
 End

IF LENGTH(STRIP(loc)) > 0 THEN Do
   OK = CONNECT_LOCATION(location)
 End

select
    when auswahl = "COUNT" Then do
         OK = NEXTSL("SELECT COUNT(*)            ")
         OK = NEXTSL("FROM " DB2_CREATOR1 || '.' || DB2_NAME1)
         OK = NEXTSL("FOR FETCH ONLY")
         OK = NEXTSL("WITH UR")
     End
     when auswahl = "TRUNCATE" Then do
          call Build_Truncate
      End
    Otherwise  CALL LESEN_DATEN
 End

OK = NEXTSL(" ; ")

IF LENGTH(STRIP(loc)) > 0 THEN OK = DISCONNECT_LOCATION(location)

/* If anzcols = 0 THEN RETURN 12 */

if EDIT = "YES" THEN Call Edit_Stmt  /* Anzeige Erwuenscht */

If DSNRECON = "Y" Then Do
   Call UNLoad_DSNREXX
 End
Return Stmt


Lesen_daten:

ALPHA = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

stmt     = translate(auswahl)
CNR   = 1           /*  CURSOR NUMMER FUER TABLESPACE   */
SNR   = CNR

WHERELIST = ""
CALL MAKE_WHERELIST "TBCREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "TBNAME", DB2_NAME1

SQLSTMT    = "SELECT MAX(LENGTH(NAME)) as MAXLEN " ,
             "FROM  "SYSIBMS".SYSCOLUMNS     " ,
             WHERELIST ,
             " AND NAME NOT LIKE 'DB2_GENERATED_%_FOR_%' " ,
             ""
CALL OPEN_CURSOR
ADDRESS DSNREXX   "EXECSQL FETCH C"CNR" INTO  :MAXLEN"
CALL CLOSE_CURSOR

IF DATATYPE(MAXLEN) <> "NUM" THEN MAXLEN = 60
ELSE        MAXLEN = MAXLEN + 2

SQLSTMT    = "SELECT TBCREATOR, TBNAME, COLNO, NAME, " ,
             "       COLTYPE, LENGTH, SCALE, NULLS   " ,
             "     , LENGTH2                         " ,
             "FROM  "SYSIBMS".SYSCOLUMNS     " ,
             WHERELIST ,
             " AND NAME NOT LIKE 'DB2_GENERATED_%_FOR_%' " ,
             "ORDER BY TBCREATOR, TBNAME, COLNO" ,
             ""

CALL OPEN_CURSOR

DO WHILE SQLCODE = 0
    ADDRESS DSNREXX   "EXECSQL FETCH C"CNR" INTO         ",
             "       :TBCREATOR, :TBNAME, :COLNO, :NAME  ",
             "      ,:COLTYPE, :LENGTH, :SCALE, :NULLS   ",
             "      ,:LENGTH2                            ",
             ""

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR    /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE /= 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   anzcols  = anzcols + 1

   If Pos('LOB', COLTYPE, 1) > 0 Then do
      LENGTH = STRIP(LENGTH2)
    END

   If Pos(SUBSTR(NAME, 1, 1), ALPHA, 1) < 1 Then do
      NAME = '"' || NAME || '"'
    END

   select
     when auswahl = "SELECT" Then do
          call Build_select
      End
     when auswahl = "UPDATE" Then do
          call Build_Update
      End
     when auswahl = "DELETE" Then do
          call Build_delete
      End
     when auswahl = "INSERT" Then do
          call Build_insert
      End
      Otherwise Nop
     end

   komma = ", "
 END

CALL CLOSE_CURSOR
if Auswahl  = "INSERT" Then do
   ok = NextSl("       )")
   ok = NextVal("       )")

   do ins = 1 to vl.0
      ok = NextSl(vl.ins)
    end
 end

stmt     = stmt fromlist
ok       = Nextsl(FromList)

If Auswahl = "SELECT" Then do
   OK = NEXTSL("--WHERE ")
   OK = NEXTSL("--ORDER BY ")
   OK = NEXTSL("FETCH FIRST "MAXROWS" ROWS ONLY")
   OK = NEXTSL("FOR FETCH ONLY")
   OK = NEXTSL("WITH UR")
 End


return

BUILD_SELECT:
  If  SL.0 = 0 Then Do
      Komma = " "
      SEL   = "SELECT "
   End
  Else Do
      Komma = ","
      SEL   = "       "
  End

  IF LENGTH(FROMLIST)  = 0 THEN DO
     FROMLIST = "FROM "Strip(TBCREATOR) || '.' || Strip(TBName)
   end

  COLNAME = NAME
  STMT  = STMT || KOMMA NAME
  NEXTTAB = ''
  Select
    When COLTYPE = 'BLOB' Then DO
         COLNAME = "CAST(" || COLNAME" AS BLOB("MAXBLOBS")) AS "COLNAME
         NEXTTAB = SEL KOMMA COLNAME
     End
    When COLTYPE = 'CLOB' Then DO
         COLNAME = "CAST(" || COLNAME" AS CLOB("MAXBLOBS")) AS "COLNAME
         NEXTTAB = SEL KOMMA COLNAME
     End
    When COLTYPE = 'XML' Then DO
         COLNAME = "XMLSERIALIZE("|| colname " AS CLOB("MAXBLOBS")) " ,
                   " AS "COLNAME
         NEXTTAB = SEL KOMMA COLNAME
     End
    When COLTYPE = 'VARG' Then DO
         COLNAME = "UNICODE_STR(" || COLNAME || ", UTF8) AS "COLNAME
         NEXTTAB = SEL KOMMA COLNAME
     End
    Otherwise do
         NEXTTAB = SEL KOMMA ,
                       LEFT(COLNAME, MAXLEN) ,
                       ' -- ' ,
                       COLTYPE  LENGTH
     End
   End
  OK = NEXTSL(NEXTTAB)
 RETURN

BUILD_UPDATE:
  FROMLIST = ""
  COLNAME = NAME
  IF STMT = 'UPDATE' THEN
     STMT = STMT Strip(TBCREATOR) || '.' || Strip(TBName) " SET "
  STMT  = STMT || KOMMA COLNAME  "="
  NEXTTAB = ''
  IF SL.0 = 0 THEN DO
     NEXTTAB = AUSWAHL Strip(TBCREATOR) || '.' || Strip(TBName) " SET "
     OK = NEXTSL(NEXTTAB)
   END
  if Wordpos(coltype, FNumeric, 1) > 0 Then colval = " "
  else                                      colval = "' '"
  NEXTTAB = "   " KOMMA ,
                  LEFT(COLNAME, MAXLEN) ,
                  LEFT(" = " colval, 10) ,
                  ' -- ' COLTYPE  LENGTH "NULL="NULLS
  OK = NEXTSL(NEXTTAB)
 RETURN

BUILD_DELETE:
  FROMLIST = ""
  COLNAME = NAME
  IF STMT = 'DELETE' THEN
     STMT = STMT WORD(LZEILE, 1)

  NEXTTAB = ''
  IF SL.0 = 0 THEN DO
     NEXTTAB = AUSWAHL "FROM "Strip(TBCREATOR) || '.' || Strip(TBName)
     OK = NEXTSL(NEXTTAB)
   END
  NEXTTAB = "   " WHEREL,
                  LEFT(COLNAME, MAXLEN) ,
                  ' =                    ' ,
                  ' -- ' ,
                  COLTYPE ,
                  LENGTH
  OK = NEXTSL(NEXTTAB)
  WHEREL  = "AND  "
 RETURN

Build_Truncate:
  NEXTTAB = "TRUNCATE TABLE " ,
            DB2_CREATOR1 || '.' || DB2_NAME1
  OK = NEXTSL(NEXTTAB)
  NEXTTAB = "         DROP STORAGE                   "
  OK = NEXTSL(NEXTTAB)
  NEXTTAB = "--       REUSE STORAGE                  "
  OK = NEXTSL(NEXTTAB)
  NEXTTAB = "         IGNORE DELETE TRIGGERS         "
  OK = NEXTSL(NEXTTAB)
  NEXTTAB = "--       RESTRICT WHEN DELETE TRIGGERS  "
  OK = NEXTSL(NEXTTAB)
  NEXTTAB = "         IMMEDIATE                      "
  OK = NEXTSL(NEXTTAB)

 RETURN

BUILD_INSERT:
  FROMLIST = ""
  COLNAME = NAME
  IF STMT = 'INSERT' THEN
     STMT = STMT "INTO "Strip(TBCREATOR) || '.' || Strip(TBName) "("

  NEXTTAB = ''
  IF SL.0 = 0 THEN DO
     NEXTTAB = AUSWAHL "INTO "Strip(TBCREATOR) || '.' || Strip(TBName),
               "("
     OK = NEXTSL(NEXTTAB)
     NEXTVAL = "VALUES " "("
     OK = NEXTVAL(NEXTVAL)
   END
  NEXTTAB = "   " || Komma Left(colname, MAXLEN)
  ftype = Word(Lzeile, 4)
  if Wordpos(COLTYPE, FNumeric, 1) > 0 Then colval = " "
  else                                    colval = "' '"

  NEXTVAL = "   " || KOMMA LEFT(COLVAL, 40) ,
                  ' -- ' ,
                  COLTYPE  ,
                  LENGTH
  OK = NEXTSL(NEXTTAB)
  OK = NEXTVAl(NEXTVAL)
  WHEREL  = "AND  "
 RETURN

NextSl: Procedure Expose sl.
 sl.0   = sl.0 + 1
 sli    = sl.0
 sl.sli = Arg(1)
return 0

Nextval: Procedure Expose vl.
 vl.0   = vl.0 + 1
 vli    = vl.0
 vl.vli = Arg(1)
return 0

Edit_Stmt:

DSNAME = ZOSA1900("ZOSA1","DSNAME", "STMT", LNR)
LRECL   = RECLEN

IF LISTDSI(DSNAME) = 0 THEN do
    ADDRESS "TSO" "ALLOC F(SELDD) DA("DSNAME") SHR"
 end
else do
    ADDRESS "TSO" "ALLOC F(SELDD) DA("DSNAME") NEW CATALOG ,
          SPACE("TRACKS","TRACKS") TRACKS REUSE,
          LRECL("RECLEN") UNIT(SYSDA)"
 end

If RC /= 0 Then do
   say "Error on Alloc "DSNAME" RC="RC
 End


ADDRESS "TSO" "EXECIO * DISKW SELDD ( STEM SL. FINIS"
If RC /= 0 Then do
   say "Error on Alloc "DSNAME" RC="RC
 End

ADDRESS "TSO" "FREE FI(SELDD)"

ok   = ZOSA1911(SSID,     ,
                LOCATION,  ,
                EINGABE,   ,
                OBJECT1,   ,
                DSNAME,    ,
                LNR   )

return

OPEN_CURSOR:

    IF DATATYPE(CNR) /= 'NUM' THEN CNR = 1
    IF DATATYPE(SNR) /= 'NUM' THEN SNR = 1
    ADDRESS DSNREXX   "EXECSQL CLOSE C"CNR
    ADDRESS DSNREXX   "EXECSQL DECLARE C"CNR" CURSOR FOR S"SNR
    IF SQLCODE /= 0 THEN DO
       SAY "ERROR ON DECLARE, RC="RC ,
           "SQLCODE="SQLCODE         ,
           "SQLERRMC="SQLERRMC       ,
           ""
    END
    ADDRESS DSNREXX   "EXECSQL PREPARE S"SNR" FROM :SQLSTMT"
    IF SQLCODE /= 0 THEN DO
       SAY "ERROR ON PREPARE S"SNR"RC="RC ,
           "SQLCODE="SQLCODE         ,
           "SQLERRMC="SQLERRMC       ,
           ""
    END

   ADDRESS DSNREXX "EXECSQL DESCRIBE S"SNR" INTO :OUTSQLDA"
   COLS   = ""
   RXCOLS = ""
   if datatype(OUTSQLDA.SQLD) = NUM THEN DO CI = 1 TO OUTSQLDA.SQLD
      cols   = cols OUTSQLDA.CI.SQLNAME
      rxcols = cols OUTSQLDA.CI.SQLNAME
    End

    ADDRESS DSNREXX   "EXECSQL OPEN C"CNR
    IF SQLCODE /= 0 THEN DO
       SAY "ERROR ON OPEN C"CNR" , RC="RC ,
           "SQLCODE="SQLCODE         ,
           "SQLERRMC="SQLERRMC       ,
           ""
    END

RETURN

CLOSE_CURSOR:

    IF DATATYPE(CNR) /= 'NUM' THEN CNR = 1
    ADDRESS DSNREXX   "EXECSQL CLOSE C"CNR

RETURN

CONNECT_LOCATION:
   If Length(SYSUID) > 0 & Length(SYSPWD) > 0 Then do
      ADDRESS DSNREXX "EXECSQL CONNECT TO "ARG(1) ,
                      "USER :SYSUID USING :SYSPWD "
    End
   ELSE Do
       ADDRESS DSNREXX "EXECSQL CONNECT TO "ARG(1)
    End
   DB2L   =  SUBSTR(SQLERRP,1,3)
   DB2V   =  SUBSTR(SQLERRP,4,2)
   DB2R   =  SUBSTR(SQLERRP,6,2)

   If DB2L  = "DSN" then do
      REMOTE_LOC = 'N'
    End
   Else Do
      REMOTE_LOC = 'Y'
    End
RETURN 0

DISCONNECT_LOCATION:
ADDRESS DSNREXX "EXECSQL RELEASE " arg(1)
ADDRESS DSNREXX "EXECSQL COMMIT  "
ADDRESS DSNREXX "EXECSQL CONNECT RESET"
RETURN 0

MAKE_WHERELIST: PROCEDURE EXPOSE WHERELIST

COLUMNNAME = ARG(1)
ARGUMENT   = ARG(2)
ARGUMENT   = TRANSLATE(ARGUMENT, '%', '*')
IF LENGTH(STRIP(ARGUMENT)) = 0 ,
 & LENGTH(STRIP(COLUMNNAME)) = 0 THEN RETURN

IF TRANSLATE(WORD(WHERELIST, 1) ) = "WHERE" THEN ANDKZ = "AND"
 ELSE ANDKZ = "WHERE"

IF LENGTH(STRIP(COLUMNNAME)) = 0 ,
 & LENGTH(STRIP(ARGUMENT)) > 0 THEN DO
   WHERELIST = WHERELIST ANDKZ ARGUMENT
   RETURN
 END

IF LENGTH(STRIP(ARGUMENT)) = 0 THEN RETURN


IF POS('%', ARGUMENT) > 0 ,
 | POS('_', ARGUMENT) > 0 THEN DO
   WHERELIST = WHERELIST ANDKZ COLUMNNAME "LIKE '"ARGUMENT"'"
   RETURN
 END

WHERELIST = WHERELIST ANDKZ COLUMNNAME "= '"ARGUMENT"'"

RETURN

Load_DSNREXX:
ADDRESS TSO "SUBCOM DSNREXX"
IF RC THEN   S_RC = RXSUBCOM('ADD','DSNREXX','DSNREXX')

ADDRESS DSNREXX "CONNECT "DB2_SSID
IF SQLCODE <  0 THEN SAY "CONNECT     SQLCODE="SQLCODE "<"DB2_SSID">"

Return

UNLoad_DSNREXX:

ADDRESS DSNREXX "DISCONNECT"
S_RC = RXSUBCOM('DELETE','DSNREXX','DSNREXX')

Return
