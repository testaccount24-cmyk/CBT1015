/* REXX */
/*******************************************************************/
/*                                                                 */
/* ProgramNAME      : ZOSB1AC3                                     */
/* AUSRUF           : AUS Program                                  */
/* AUTHER           : ULRICH BRAEUER  11.08.1999                   */
/* FUNKTION         : ANZEIGE DB2/UDB INFORMATIONEN                */
/*                                                                 */
/*                                                                 */
/* AUFRUF           : ZOSB1AC3 ARG1 ARG2 ARG3 ARG4 ARG5 ARG6       */
/*                    ARG1 MUSS SEIN : SSID                        */
/*                    ARG2 MUSS SEIN : LOCATION                    */
/*                    ARG3 KANN SEIN : TS, TB, IX, VW,             */
/*                                     SY, AL, PG, TR              */
/*                    ARG4 KANN SEIN : CREATOR.NAME DES OBJEJCT    */
/*                    ARG5 KANN SEIN : TBCREATOR.TABNAME           */
/*                    ARG6 KANN SEIN : TABLESPACE NAME             */
/*                    ARG7 KANN SEIN : DATABASE                    */
/*   ERKLAERUNG ZU ARG4, ARG5, ARG6 |||                            */
/*   ES IST MOEGLICH Z.B BEI DER FUNKTION IX ZU SAGEN, ICH WILL    */
/*   ALLE INDEXES ZU EINER TABLE, ODER ZU EINEM TABLESPACE ODER    */
/*   ZU EINER DATENBANK.                                           */
/*   SINNFOLL IST ES AUCH ZU SAGEN, ICH WILL WISSEN, WELCHE PLAENE */
/*   ODER PACKAGES AUF EINEN TABLESPCE GEHEN, Z.B. FUER REORGS     */
/*   MIT ANSCHLIESENDEM REBIND. ||                                 */
/*                                                                 */
/*                                                                 */
/*******************************************************************/

MAXBLOBS  = '10K'
ENV = "WIN"
ENV = "TSO"
USER = USERID()
SYSCATS  = "SYSCAT"
SYSIBMS  = "SYSIBM"
SYSIBMA  = "SYSIBMADM"
SYSPROCA = "SYSPROC"
DSNRECON   = "N"
SYSUID  = ""
SYSPWD  = ""
MAXRows  = 0
TBADD_MULT = 1
MAXFetch = "FETCH FIRST 100 ROWS ONLY"
MAXFetch = ""
Fetch_Data = "YES"

If Env = 'TSO' Then do
   X = MSG('OFF')
   ADDRESS ISPEXEC 'VGET (DSNRECON) PROFILE'
   ADDRESS ISPEXEC 'VGET (UDBTRACE) PROFILE'
   ADDRESS ISPEXEC 'VGET (SYSIBMS) PROFILE'
   ADDRESS ISPEXEC 'VGET (SYSCATS) PROFILE'
   ADDRESS ISPEXEC 'VGET (SYSIBMA) PROFILE'
   ADDRESS ISPEXEC 'VGET (SYSPROCA) PROFILE'
   ADDRESS ISPEXEC 'VGET (MAXROWS)  PROFILE'
   ADDRESS ISPEXEC 'VGET (MAXBLOBS) PROFILE'
   ADDRESS ISPEXEC 'VGET (SYSUID)   PROFILE'
   ADDRESS ISPEXEC 'VGET (SYSPWD)   PROFILE'
   ADDRESS ISPEXEC  "VGET (ZSCREENW,ZSCREEND)"
   ADDRESS ISPEXEC 'VGET (DDLSPUFI) PROFILE'
   ADDRESS ISPEXEC 'VGET (ACOMMIT) PROFILE'
   IF UDBTRACE = 'ON' THEN TRACE R
   ELSE                    TRACE
 End

If MAXROWS > 0 then do
   MAXFetch = "FETCH FIRST "MAXROWS" ROWS ONLY"
   TBADD_MULT = MAXROWS
 End

DDLTEXT = ""
DB_ENV  = "DSN"

DB2_SSID       = ARG(1)  /* SSID      */
DB2_EDITSQL    = ARG(2)  /* EDIT      */
DB2_LOC        = ARG(3)  /* LOCATION  */
lnr            = ARG(4)  /* TABLENR   */
TABNR          = ARG(5)  /* TABLENR   */
DB2_FUNKTION   = ARG(6)  /* FUNKTION  */
SUCH1          = ARG(7)  /* OBJECT CREATOR/NAME */
SUCH2          = ARG(8)  /* TABLE  CREATOR/NAME */
SUCH3          = ARG(9)  /* TABLE  CREATOR/NAME */
SUCH4          = ARG(10) /* TABLE  CREATOR/NAME */
SUCH5          = ARG(11) /* TABLE  CREATOR/NAME */
DB2_TABLESPACE = ARG(12)
DB2_DATABASE   = ARG(13)
DB2_STORAGEGRP = ARG(14)
DB2_LIST_OBJ   = ARG(15)
ISPFILE        = ARG(16)

TLIB  = reverse(ISPFILE)
PARSE VALUE TLIB WITH x1 "." FILE
TLIB  = reverse(FILE) || "." || "TABLEUDB"
OK    =  LISTDSI(ISPTABL "FILE")

DB2_CREATOR1   = ""
DB2_NAME1      = ""
DB2_CREATOR2   = ""
DB2_NAME2      = ""
DB2_CREATOR3   = ""
DB2_NAME3      = ""
DB2_CREATOR4   = ""
DB2_NAME4      = ""
DB2_CREATOR5   = ""
DB2_NAME5      = ""
DB2_TYPE       = ""
LUWTABLE       = "LUWTB"tabnr
COLTAB         = "COLTB"tabnr
BRTAB          = "BROWS"tabnr
SELTAB         = "SELTB"tabnr
TBCOL          = "TBCOL"tabnr

If Words(DB2_FUNKTION) > 1 Then do
   parse value DB2_FUNKTION with DB2_FUNKTION DB2_TYPE .
 End
IF DB2_TYPE = "ED" Then DB2_EDITSQL = "Y"


IF POS('.', SUCH1) > 0 THEN
   PARSE VALUE SUCH1 WITH DB2_CREATOR1 '.' DB2_NAME1
 ELSE DB2_NAME1 = SUCH1

IF POS('.', SUCH2) > 0 THEN
   PARSE VALUE SUCH2 WITH DB2_CREATOR2 '.' DB2_NAME2
 ELSE DB2_NAME2 = SUCH2

IF POS('.', SUCH3) > 0 THEN
   PARSE VALUE SUCH3 WITH DB2_CREATOR3 '.' DB2_NAME3
 ELSE DB2_NAME3 = SUCH3

IF POS('.', SUCH4) > 0 THEN
   PARSE VALUE SUCH4 WITH DB2_CREATOR4 '.' DB2_NAME4
 ELSE DB2_NAME4 = SUCH4

IF POS('.', SUCH5) > 0 THEN
   PARSE VALUE SUCH5 WITH DB2_CREATOR5 '.' DB2_NAME5
 ELSE DB2_NAME5 = SUCH5

If DSNRECON = "Y" Then Do
   Call Load_DSNREXX_AC3
 End
RXDB2_SSID        = DB2_SSID
RXDB2_GETSTEM     = 'EINGABE.'
RXDB2_PUTSTEM     = 'AUSGABE.'
ANZAHL_ROWS       = 0
ROWNR             = 0

If Length(Strip(DB2_LOC)) > 0 Then  OK = CONNECT_LOCATION_AC3(DB2_LOC)
/* Ausnamen die nur daten per return weiter geben */
SELECT
   WHEN DB2_FUNKTION = "STFCOLS" THEN NOP
   WHEN DB2_FUNKTION = "SQLEX"   THEN NOP
   Otherwise Do
             CALL OPEN_TABLE
             Call OPEN_TBCOL
    end
  end

LCMD = "   "


CURSQLID  = ""
ADDRESS ISPEXEC 'VGET (CURSQLID) PROFILE'
ADDRESS ISPEXEC 'VGET ('STRIP(DB2_SSID)'SQID) PROFILE'

SSID_CURRENT_SQLID = value(STRIP(DB2_SSID)"SQID")
If length(SSID_CURRENT_SQLID) > 0 then do
   CURSQLID = SSID_CURRENT_SQLID
 End
IF CURSQLID   = "NONE" THEN CURSQLID = ""
IF CURSQLID  <> ""     THEN Do
   SQLTEXT = "set current sqlid ='"cursqlid"'"
   call EXECUTE_SQL_TEXT_AC3
 End

SELECT
   WHEN DB2_FUNKTION = "SG"    THEN CALL LIST_SG     /* TABLE SPACE  */
   WHEN DB2_FUNKTION = "VO"    THEN CALL LIST_VO     /* VOLUMES      */
   WHEN DB2_FUNKTION = "DB"    THEN CALL LIST_DB     /* TABLE SPACE  */
   WHEN DB2_FUNKTION = "TS"    THEN CALL LIST_TS     /* TABLE SPACE  */
   WHEN DB2_FUNKTION = "TP"    THEN CALL LIST_TP     /* Tablepart    */
   WHEN DB2_FUNKTION = "TB"    THEN CALL LIST_TB     /* TABLE        */
   WHEN DB2_FUNKTION = "BASE"  THEN CALL LIST_TBBASE /* BASE TABLE   */
   WHEN DB2_FUNKTION = "AUX"   THEN CALL LIST_TBBASE /* AUX TABLE    */
   WHEN DB2_FUNKTION = "XML"   THEN CALL LIST_TBBASE /* XML TABLE    */
   WHEN DB2_FUNKTION = "TSBASE"  THEN CALL LIST_TSBASE /* BASE TS  */
   WHEN DB2_FUNKTION = "TSAUX"   THEN CALL LIST_TSBASE /* AUX TS   */
   WHEN DB2_FUNKTION = "TSXML"   THEN CALL LIST_TSBASE /* XML TS   */
   WHEN DB2_FUNKTION = "VW"    THEN CALL LIST_VW     /* VIEW         */
   WHEN DB2_FUNKTION = "IX"    THEN CALL LIST_IX     /* INDEX        */
   WHEN DB2_FUNKTION = "IP"    THEN CALL LIST_IP     /* INDEX PART   */
   WHEN DB2_FUNKTION = "TG"    THEN CALL LIST_TG     /* TRIGGER      */
   WHEN DB2_FUNKTION = "SY"    THEN CALL LIST_SY     /* SYNONYM      */
   WHEN DB2_FUNKTION = "AL"    THEN CALL LIST_AL     /* ALIAS        */
   WHEN DB2_FUNKTION = "FK"    THEN CALL LIST_FK     /* FORREING KEY */
   WHEN DB2_FUNKTION = "SE"    THEN CALL LIST_SE     /* Sequence     */
   WHEN DB2_FUNKTION = "RT"    THEN CALL LIST_RT     /* Routines     */
   WHEN DB2_FUNKTION = "PG"    THEN CALL LIST_PG     /* PACKAGES     */
   WHEN DB2_FUNKTION = "PL"    THEN CALL LIST_PL     /* PLANS        */
   WHEN DB2_FUNKTION = "DT"    THEN CALL LIST_DT     /* DATATYPES    */
   WHEN DB2_FUNKTION = "TBA"   THEN CALL LIST_TBA   /* USER.AUTH.T/V*/
   WHEN DB2_FUNKTION = "SCA"   THEN CALL LIST_SCA   /* Schame Auth */
   WHEN DB2_FUNKTION = "RA"    THEN CALL LIST_RA   /* Resauth.     */
   WHEN DB2_FUNKTION = "DBA"   THEN CALL LIST_DBA  /* DB AUTH      */
   WHEN DB2_FUNKTION = "RTA"   THEN CALL LIST_RTA  /* Rout. Auth   */
   WHEN DB2_FUNKTION = "SEA"   THEN CALL LIST_SEA  /* Seq. Auth    */
   WHEN DB2_FUNKTION = "PGA"   THEN CALL LIST_PGA  /* Page Auth    */
   WHEN DB2_FUNKTION = "PLA"   THEN CALL LIST_PLA  /* Plan Auth    */
   WHEN DB2_FUNKTION = "COA"   THEN CALL LIST_COA  /* COL Auth.    */
   WHEN DB2_FUNKTION = "UA"    THEN CALL LIST_UA   /* Userauth     */
   WHEN DB2_FUNKTION = "CO"    THEN CALL LIST_COLS /* COLUMNS TB/VW*/
   WHEN DB2_FUNKTION = "STMT"  THEN CALL LIST_STMT /* PG STATEMENT */
   WHEN DB2_FUNKTION = "ST"    THEN CALL LIST_STMT /* PG STATEMENT */
   WHEN DB2_FUNKTION = "D"     THEN CALL LIST_DIS  /* DISPLAY DETAIL */
   WHEN DB2_FUNKTION = "SR"    THEN CALL LIST_SR   /* Strings    */
   WHEN DB2_FUNKTION = "CK"    THEN CALL LIST_CK   /* Checks     */
   WHEN DB2_FUNKTION = "KC"    THEN CALL LIST_KC   /* KEY COLUMNS*/
   WHEN DB2_FUNKTION = "LO"    THEN CALL LIST_LO   /* Locations  */
   WHEN DB2_FUNKTION = "IPN"   THEN CALL LIST_IPN  /* IP Names   */
   WHEN DB2_FUNKTION = "UN"    THEN CALL LIST_UN   /* USER Names   */
   WHEN DB2_FUNKTION = "LU"    THEN CALL LIST_LU   /* LUNAMES      */
   WHEN DB2_FUNKTION = "IC"    THEN CALL LIST_IC   /* SYSCOPY    */
   WHEN DB2_FUNKTION = "RO"    THEN CALL LIST_RO   /* SYSROLES   */
   WHEN DB2_FUNKTION = "MQT"   THEN CALL LIST_MQT  /* Mat.Query.TB.*/
   WHEN DB2_FUNKTION = "KT"    THEN CALL LIST_KT   /* Key Target   */
   WHEN DB2_FUNKTION = "SC"    THEN CALL LIST_SC   /* Schama       */
   WHEN DB2_FUNKTION = "PK"    THEN CALL LIST_PK   /* Primary Keys */
   WHEN DB2_FUNKTION = "DBRM"  THEN CALL LIST_DBRM /* DBRM         */
   WHEN DB2_FUNKTION = "PERM"  THEN CALL LIST_PERM /* Permission   */
   WHEN DB2_FUNKTION = "PDDL"  THEN CALL LIST_PDDL  /* Pendig DDL   */
   WHEN DB2_FUNKTION = "BP"    THEN CALL LIST_BP   /* BUFFERPOOL   */
   WHEN DB2_FUNKTION = "TCO"   THEN CALL LIST_TCO  /* Trusted Cont.*/
   WHEN DB2_FUNKTION = "UT"    THEN CALL LIST_UT   /* LIST UTIL    */
   WHEN DB2_FUNKTION = "TCOAUTH" THEN CALL LIST_TCOAUTH  /* Trusted  */
   WHEN DB2_FUNKTION = "TCOATTR" THEN CALL LIST_TCOATTR  /* Trusted  */
   WHEN DB2_FUNKTION = "LGRX"  THEN Call LIST_SYSLGRNX
   WHEN DB2_FUNKTION = "ZPARM" THEN Call LIST_ZPARM
   WHEN DB2_FUNKTION = "THD"   THEN Call LIST_THD  /* Threads */
   WHEN DB2_FUNKTION = "DDF"   THEN Call LIST_DDF  /* DDF     */
   WHEN DB2_FUNKTION = "UTIL"  THEN Call LIST_UTIL /* UTILITY */
   WHEN DB2_FUNKTION = "GRP"   THEN Call LIST_GRP  /* Threads */
   WHEN DB2_FUNKTION = "VAR"   THEN Call LIST_VAR  /* Variables  */
   WHEN DB2_FUNKTION = "VARA"  THEN Call LIST_VARA /* Variables AUTH */
   WHEN DB2_FUNKTION = "IXC"   THEN Call LIST_IXC  /* IX Cleanup */
   WHEN DB2_FUNKTION = "XMLS"  THEN Call LIST_XMLS /* XML String */
   WHEN DB2_FUNKTION = "PRGA"  THEN Call LIST_PRGA /* Prog Auth    */
   WHEN DB2_FUNKTION = "STF"   THEN Call LIST_STF  /* STATS FEEDBACK */
   WHEN DB2_FUNKTION = "TBH"   THEN Call LIST_TBH  /* SYSTABLE_HIST  */
   WHEN DB2_FUNKTION = "STP"   THEN Call LIST_STP  /* STATS Profile  */
   WHEN DB2_FUNKTION = "DEP"   THEN Call LIST_DEP  /* SYSDEPENDENCIES*/
   WHEN DB2_FUNKTION = "STATS" THEN Call LIST_STATS /*TB / LOB SDTATS*/
   WHEN DB2_FUNKTION = "SQLEX" THEN Call LIST_SQLEX/* EXECUTE SQL  */
   WHEN DB2_FUNKTION = "SQLIM" THEN Call EXECUTE_IMMEDIATE
   WHEN DB2_FUNKTION = "XO"    THEN Call LIST_XO   /* XSD OBjects  */
   WHEN DB2_FUNKTION = "XOC"   THEN Call LIST_XOC  /* XSD OBjects  */
   WHEN DB2_FUNKTION = "XOH"   THEN Call LIST_XOH  /* XSD OBjects  */
   WHEN DB2_FUNKTION = "DOC"   THEN Call LIST_XOC_C  /* XSD COMPONENT*/
   WHEN DB2_FUNKTION = "DOCU"  THEN Call LIST_XOC_C  /* XSD COMPONENT*/
   WHEN DB2_FUNKTION = "SPACE" THEN Call LIST_SPACE  /* STATS        */
   WHEN DB2_FUNKTION = "RFS"   THEN Call LIST_RFS  /* Restful Service*/
   WHEN DB2_FUNKTION = "BR"    THEN Call LIST_BR   /* BROWSE TABLE   */
   WHEN DB2_FUNKTION = "ATL"   THEN Call LIST_ATL  /* Admin Task List*/
   WHEN DB2_FUNKTION = "SSIDINFO" THEN Call LIST_SSIDINFO
   WHEN DB2_FUNKTION = "SSIDI" THEN Do             /* Host Info    */
        INR = 1
        CALL LIST_SSI  /* Bufferpool   */
    End
   WHEN DB2_FUNKTION = "DSINFO" THEN Do            /* Host Info    */
        INR = 2
        CALL LIST_SSI  /* DSInfo       */
    End
   WHEN DB2_FUNKTION = "STFCOLS" THEN CALL LIST_STF_COLS
   OTHERWISE NOP
 END

CALL CLOSE_TABLE
If Length(DB2_LOC) > 0 Then  OK = DISCONNECT_LOCATION_AC3(DB2_LOC)

if ANZAHL_ROWS = 0 Then DDLTEXT = ""
SQLTEXT = "set current sqlid = USER "

call EXECUTE_SQL_TEXT_AC3
If DSNRECON = "Y" Then Do
   Call UNLoad_DSNREXX_AC3
 End

RETURN DDLTEXT

LIST_SG:
CNR   = 1           /*  CURSOR NUMMER FUER TABLESPACE   */
SNR   = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "CREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "NAME", DB2_NAME1

SQLSTMT    = "SELECT NAME                              " ,
             "    ,  CREATOR                           " ,
             "    ,  VCATNAME                          " ,
             "    ,  BIGINT(SPACEF) AS SPACE           " ,
             "    ,  DATACLAS                          " ,
             "    ,  MGMTCLAS                          " ,
             "    ,  STORCLAS                          " ,
             "    ,  CREATORTYPE                       " ,
             "    ,  RELCREATED                        " ,
             "    ,  VPASSWORD                         " ,
             "    ,  CREATEDBY                         ",
             "    ,  STATSTIME                         ",
             "    ,  CREATEDTS                         ",
             "    ,  ALTEREDTS                         ",
             "FROM  "SYSIBMS".SYSSTOGROUP SG ",
             WHERELIST ,
             "ORDER BY CREATOR, NAME " ,
             ""
  /* "    ,  DATE(TIMESTAMP_FORMAT(CHAR(SPCDATE),'YYDDD' )) "  */
  /* "    ,  DATE(TIMESTAMP_FORMAT(CHAR('13048'),'YYDDD' )) "  */

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 12           /* NAME                      */
OUTSQLDA.2.SQLLEN   = -1           /* CREATOR   (EXCLUDE)       */
OUTSQLDA.3.SQLLEN   = 9            /* VCATNAME                  */
OUTSQLDA.4.SQLLEN   = 9            /* DATACLAS                  */
OUTSQLDA.5.SQLLEN   = 9            /* MGMTCLAS                  */
OUTSQLDA.6.SQLLEN   = 9            /* STORCLAS                  */
OUTSQLDA.11.SQLLEN  = 9            /* CREATEDBY                 */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_VO:
CNR   = 1           /*  CURSOR NUMMER FUER TABLESPACE   */
SNR   = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "SGCREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "SGNAME", DB2_NAME1

SQLSTMT    = "SELECT  SGNAME     " ,
             "     ,  SGCREATOR  " ,
             "     ,  VOLID      " ,
             "     ,  RELCREATED " ,
             "FROM  "SYSIBMS".SYSVOLUMES  VO    ",
             WHERELIST ,
             "ORDER BY SGCREATOR, SGNAME        " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 12           /* SGNAME                    */
OUTSQLDA.2.SQLLEN   = 10           /* SGCREATOR                 */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_DB:
CNR   = 1           /*  CURSOR NUMMER FUER TABLESPACE   */
SNR   = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "CREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "NAME", DB2_NAME1
CALL MAKE_WHERELIST "STGROUP", DB2_STORAGEGRP

SQLSTMT    = "SELECT  NAME    " ,
             "      , CREATOR " ,
             "      , STGROUP " ,
             "      , BPOOL   " ,
             "      , INDEXBP " ,
             "      , DBID    " ,
             "      , ROSHARE " ,
             "      , TYPE    " ,
             "      , CREATEDBY     " ,
             "      , GROUP_MEMBER  " ,
             "      , ENCODING_SCHEME " ,
             "      , SBCS_CCSID    " ,
             "      , DBCS_CCSID    " ,
             "      , MIXED_CCSID   " ,
             "      , IMPLICIT      " ,
             "      , CREATORTYPE   " ,
             "      , RELCREATED    " ,
             "      , TIMESTAMP     " ,
             "      , CREATEDTS     " ,
             "      , ALTEREDTS     " ,
             "FROM  "SYSIBMS".SYSDATABASE DB    ",
             WHERELIST ,
             "ORDER BY CREATOR, NAME            " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* NAME                      */
OUTSQLDA.2.SQLLEN   = 8            /* CREATOR                   */
OUTSQLDA.3.SQLLEN   = 8            /* STGROUP                   */
OUTSQLDA.9.SQLLEN   = 9            /* CREATEDBY                 */
OUTSQLDA.14.SQLLEN  = 14           /* MIXED_CCSID               */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             CALL CLOSE_CURSOR_AC3
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_TS:
CNR   = 1           /*  CURSOR NUMMER FUER TABLESPACE   */
SNR   = CNR

FROMLIST     = ""
WHERELIST    = ""
CALL MAKE_WHERELIST "TS.DBNAME", DB2_CREATOR1
CALL MAKE_WHERELIST "TS.NAME", DB2_NAME1
CALL MAKE_WHERELIST "TS.BPOOL", DB2_NAME2
CALL MAKE_WHERELIST "TP.STORNAME", DB2_STORAGEGRP
If DB2_LIST_OBJ = "PENDING TABLES" Then do
   STATUS = "TS.STATUS in('C', 'P', 'S', 'T')"
   CALL MAKE_WHERELIST "", "("STATUS")"
   CALL MAKE_WHERELIST "", "DB.TYPE <> 'W'"
 END

IF LENGTH(STRIP(DB2_CREATOR3)) > 0 ,
 | LENGTH(STRIP(DB2_NAME3)) > 0 THEN DO
   FROMLIST = FROMLIST " INNER JOIN "SYSIBMS".SYSTABLES  TB"
   FROMLIST = FROMLIST " ON  TB.DBNAME     = TS.DBNAME "
   FROMLIST = FROMLIST " AND TB.TSNAME     = TS.NAME   "
   IF LENGTH(DB2_CREATOR3) > 0 ,
    | LENGTH(DB2_NAME3) > 0 THEN DO
      CALL MAKE_WHERELIST "TB.CREATOR" , DB2_CREATOR3
      CALL MAKE_WHERELIST "TB.NAME", DB2_NAME3
    END
 END

IF LENGTH(STRIP(DB2_CREATOR4)) > 0 ,
 | LENGTH(STRIP(DB2_NAME4)) > 0 THEN DO
   FROMLIST = FROMLIST " INNER JOIN "SYSIBMS".SYSPACKDEP T2"
   FROMLIST = FROMLIST " ON  T2.BQUALIFIER = TS.DBNAME "
   FROMLIST = FROMLIST " AND T2.BNAME      = TS.NAME   "
   IF LENGTH(DB2_CREATOR4) > 0 ,
    | LENGTH(DB2_NAME4) > 0 THEN DO
      CALL MAKE_WHERELIST "", "T2.BTYPE IN ('R', 'P' ) "
      CALL MAKE_WHERELIST "T2.DCOLLID", DB2_CREATOR4
      CALL MAKE_WHERELIST "T2.DNAME", DB2_NAME4
    END
 END

SQLSTMT    = "SELECT  DISTINCT TS.DBNAME     ",
             "     ,  TS.NAME       ",
             "     ,  TP.STORNAME   ",
             "     ,  TS.BPOOL      ",
             "     ,  TS.TYPE       ",
             "     ,  TS.DBID       ",
             "     ,  TS.PSID       ",
             "     ,  TS.PARTITIONS ",
             "     ,  TS.PGSIZE     ",
             "     ,  BIGINT(TS.NACTIVEF) AS NACTIVE ",
             "     ,  TS.SEGSIZE    ",
             "     ,  TS.NTABLES    ",
             "     ,  TS.STATUS     ",
             "     ,  TS.IMPLICIT   ",
             "     ,  TS.LOG        ",
             "     ,  TS.LOCKRULE   ",
             "     ,  TS.ERASERULE  ",
             "     ,  BIGINT(TS.SPACEF) AS SPACE   ",
             "     ,  TS.CREATEDBY  ",
             "     ,  TS.STATSTIME  ",
             "     ,  TS.LOCKMAX    ",
             "     ,  TS.ENCODING_SCHEME",
             "     ,  TS.SBCS_CCSID ",
             "     ,  TS.DBCS_CCSID ",
             "     ,  TS.MIXED_CCSID",
             "     ,  TS.MAXROWS    ",
             "     ,  TS.OLDEST_VERSION ",
             "     ,  TS.CURRENT_VERSION",
             "     ,  TS.AVGROWLEN ",
             "     ,  TS.CLONE     ",
             "     ,  TS.MAXPARTITIONS ",
             "     ,  TP.PQTY          " ,
             "     ,  TP.SQTY          " ,
             "     ,  TS.CREATEDTS ",
             "     ,  TS.ALTEREDTS ",
             "     ,  TS.MEMBER_CLUSTER",
             "FROM  "SYSIBMS".SYSTABLESPACE TS ",
             FROMLIST ,
             "INNER JOIN "SYSIBMS".SYSTABLEPART TP ",
             " ON   TS.DBNAME   = TP.DBNAME     ",
             " AND  TS.NAME     = TP.TSNAME     ",
             "INNER JOIN "SYSIBMS".SYSDATABASE  DB ",
             " ON   TS.DBNAME   = DB.NAME       ",
             WHERELIST ,
             "ORDER BY TS.DBNAME, TS.NAME",
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 9            /* DBNAME                    */
OUTSQLDA.2.SQLLEN   = 9            /* TSNAME                    */
OUTSQLDA.3.SQLLEN   = 8            /* STORNAME                  */
OUTSQLDA.19.SQLLEN  = 17           /* CREATEDBY                 */
OUTSQLDA.21.SQLLEN  = 13           /* LOCKMAX                   */
OUTSQLDA.29.SQLLEN  = 21           /* AVGROWLEN                 */
OUTSQLDA.31.SQLLEN  = 25           /* MAXPARTITIONS             */
OUTSQLDA.32.SQLLEN  = 15           /* PQTY                      */
OUTSQLDA.33.SQLLEN  = 15           /* SQTY                      */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || LEFT("TSNAME", 18)
DDLTEXT = DDLTEXT LEFT("DBID", 4)
DDLTEXT = DDLTEXT LEFT("PSID", 4)
DDLTEXT = DDLTEXT LEFT("PART", 4)
DDLTEXT = DDLTEXT RIGHT("PGS", 3,' ')
DDLTEXT = DDLTEXT RIGHT("ACT-PG", 10,' ')
DDLTEXT = DDLTEXT LEFT("BPOOL", 6,' ')
DDLTEXT = DDLTEXT LEFT("SEG", 3,' ')
DDLTEXT = DDLTEXT RIGHT("TB", 3,' ')
DDLTEXT = DDLTEXT RIGHT("ST", 2,' ')
DDLTEXT = DDLTEXT RIGHT("I", 1,' ')
DDLTEXT = DDLTEXT RIGHT("T", 1,' ')
DDLTEXT = DDLTEXT RIGHT("L", 1,' ')
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"


DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   LZEILE = LZEILE || LEFT(STRIP(DBNAME) || "." || Strip(NAME), 18)
   LZEILE = LZEILE RIGHT(DBID, 4, ' ')
   LZEILE = LZEILE RIGHT(PSID, 4, ' ')
   LZEILE = LZEILE RIGHT(PARTITIONS, 4, ' ')
   LZEILE = LZEILE RIGHT(PGSIZE, 3,' ')
   LZEILE = LZEILE RIGHT(NACTIVE, 10,' ')
   LZEILE = LZEILE LEFT(BPOOL, 6,' ')
   LZEILE = LZEILE RIGHT(SEGSIZE, 3, ' ')
   LZEILE = LZEILE RIGHT(NTABLES, 3, ' ')
   LZEILE = LZEILE RIGHT(STATUS, 2, ' ')
   LZEILE = LZEILE RIGHT(IMPLICIT,1,' ')
   LZEILE = LZEILE RIGHT(TYPE,   1, ' ')
   LZEILE = LZEILE RIGHT(LOCKRULE, 1, ' ')

   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_TB:
CNR = 1
SNR = CNR

TBTYPE  = "'T','M','C','G','X','P','H','R', 'V', 'D'"
FROMLIST     = ""
WHERELIST    = ""
CALL MAKE_WHERELIST "TB.CREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "TB.NAME", DB2_NAME1
CALL MAKE_WHERELIST "TB.DBNAME", DB2_CREATOR2
CALL MAKE_WHERELIST "TB.TSNAME", DB2_NAME2
CALL MAKE_WHERELIST "TS.BPOOL", DB2_NAME3
CALL MAKE_WHERELIST "TB.DBNAME", DB2_DATABASE
CALL MAKE_WHERELIST "TP.STORNAME", DB2_STORAGEGRP
CALL MAKE_WHERELIST "", "TB.TYPE IN("TBTYPE")"
If DB2_LIST_OBJ = "PENDING TABLES" Then do
   STATUS = "TB.STATUS in('I', 'R')"
   TBSTAT = "TB.TABLESTATUS IN ('L', 'P', 'R', 'U', 'V') "
   CHECK  = "TB.CHECKFLAG IN ('C') "
   CALL MAKE_WHERELIST "", "("STATUS" OR " TBSTAT " OR "CHECK")"
 END

IF LENGTH(STRIP(DB2_CREATOR4)) > 0 ,
 | LENGTH(STRIP(DB2_NAME4)) > 0 THEN DO
   FROMLIST = FROMLIST " INNER JOIN "SYSIBMS".SYSPACKDEP T2"
   FROMLIST = FROMLIST " ON  T2.BQUALIFIER = TB.CREATOR"
   FROMLIST = FROMLIST " AND T2.BNAME   = TB.NAME   "
   IF LENGTH(DB2_CREATOR4) > 0 ,
    | LENGTH(DB2_NAME4) > 0 THEN DO
      CALL MAKE_WHERELIST "", "T2.BTYPE IN ('A', 'S', 'V', 'T', 'I')"
      CALL MAKE_WHERELIST "T2.DCOLLID", DB2_CREATOR4
      CALL MAKE_WHERELIST "T2.DNAME", DB2_NAME4
    END
 END

SQLSTMT   =  "SELECT DISTINCT TB.CREATOR  " ,
             "    ,  TB.NAME     " ,
             "    ,  TB.TYPE     " ,
             "    ,  TB.DBNAME   " ,
             "    ,  TB.TSNAME   " ,
             "    ,  TB.TBCREATOR" ,
             "    ,  TB.TBNAME   " ,
             "    ,  TB.VERSIONING_SCHEMA    " ,
             "    ,  TB.VERSIONING_TABLE     " ,
             "    ,  TB.ARCHIVING_SCHEMA     " ,
             "    ,  TB.ARCHIVING_TABLE      " ,
             "    ,  TB.PARENTS  " ,
             "    ,  TB.CHILDREN " ,
             "    ,  BIGINT(TB.CARDF) AS CARD      " ,
             "    ,  TB.COLCOUNT     " ,
             "    ,  TB.CHECKS       " ,
             "    ,  TB.STATUS       " ,
             "    ,  TB.TABLESTATUS  " ,
             "    ,  TB.CHECKFLAG    " ,
             "    ,  TB.DATACAPTURE  " ,
             "    ,  TB.SPLIT_ROWS   " ,
             "    ,  TB.APPEND       " ,
             "    ,  TB.AUDITING     " ,
             "    ,  TB.VALPROC      " ,
             "    ,  TB.CLUSTERTYPE  " ,
             "    ,  TB.HASHKEYCOLUMNS       " ,
             "    ,  TB.STATS_FEEDBACK       " ,
             "    ,  TB.PARTKEYCOLNUM        " ,
             "    ,  TS.MAXPARTITIONS        " ,
             "    ,  TB.PCTROWCOMP           " ,
             "    ,  TB.RECLENGTH            " ,
             "    ,  TB.CREATEDTS            " ,
             "    ,  TB.ALTEREDTS            " ,
             "    ,  TB.STATSTIME            " ,
             "    ,  TB.REMARKS              " ,
             "    ,  TB.LABEL                " ,
             "FROM "SYSIBMS".SYSTABLES TB " ,
             FROMLIST ,
             "INNER JOIN "SYSIBMS".SYSTABLEPART TP" ,
             "ON    TB.DBNAME   = TP.DBNAME    " ,
             "AND   TB.TSNAME   = TP.TSNAME    " ,
             "INNER JOIN "SYSIBMS".SYSTABLESPACE TS" ,
             "ON    TB.DBNAME   = TS.DBNAME    " ,
             "AND   TB.TSNAME   = TS.NAME    " ,
             WHERELIST ,
             "ORDER BY 1, 2              " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* CREATOR                   */
OUTSQLDA.2.SQLLEN   = 46           /* NAME                      */
OUTSQLDA.4.SQLLEN   = 8            /* DBNAME                    */
OUTSQLDA.5.SQLLEN   = 8            /* TSNAME                    */
OUTSQLDA.6.SQLLEN   = 10           /* TBCREATOR                 */
OUTSQLDA.7.SQLLEN   = 50           /* TBNAME                    */
OUTSQLDA.8.SQLLEN   = 10           /* VERSIONING_SCHEMA         */
OUTSQLDA.9.SQLLEN   = 50           /* VERSIONING_TABLE          */
OUTSQLDA.10.SQLLEN  = 10           /* ARCHIVING_SCHEMA          */
OUTSQLDA.11.SQLLEN  = 34           /* ARCHIVING_TABLE           */
OUTSQLDA.24.SQLLEN  = 8            /* VALPROC                   */
OUTSQLDA.26.SQLLEN  = 22           /* HASHKEYCOLUMNS            */
OUTSQLDA.28.SQLLEN  = 20           /* STATS_FEEDBACK            */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("NAME", 1, 27)
DDLTEXT = DDLTEXT SUBSTR("TY", 1, 2)
DDLTEXT = DDLTEXT SUBSTR("TSNAME", 1, 18)
DDLTEXT = DDLTEXT RIGHT("P C", 3)
DDLTEXT = DDLTEXT RIGHT("CARD", 9)
DDLTEXT = DDLTEXT RIGHT("COLS", 4)
DDLTEXT = DDLTEXT RIGHT("SC", 3)

call Automatic_Header
DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   XTBNAME = STRIP(CREATOR) || '.' || STRIP(NAME)
   TTBNAME = STRIP(TBCREATOR) || '.' || STRIP(TBNAME)
   VTBNAME = STRIP(VERSIONING_SCHEMA || '.' VERSIONING_TABLE  )
   ATBNAME = STRIP(ARCHIVING_SCHEMA  || '.' ARCHIVING_TABLE   )
   XTSNAME = STRIP(DBNAME) || '.' || STRIP(TSNAME)
   STATUS  = STRIP(STATUS) || STRIP(TABLESTATUS)
   LZEILE = LZEILE || SUBSTR(XTBNAME, 1, 27)
   LZEILE = LZEILE SUBSTR(TYPE, 1, 2)
   LZEILE = LZEILE SUBSTR(XTSNAME, 1, 18)
   LZEILE = LZEILE RIGHT(PARENTS, 1, ' ')
   LZEILE = LZEILE RIGHT(CHILDREN, 1, ' ')
   LZEILE = LZEILE RIGHT(CARD, 9, ' ')
   LZEILE = LZEILE RIGHT(COLCOUNT, 4, ' ')
   LZEILE = LZEILE RIGHT(STATUS || CHECKFLAG, 3, ' ')
   Call Automatic_Data
   LZEILE = strip(LZEILE)
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return

LIST_TBBASE:
CNR = 1
SNR = CNR

WHERELIST    = ""
ONLIST       = ""
SELECT
  When DB2_FUNKTION = "BASE" & DB2_NAME5 = 'X' Then do
       CALL MAKE_WHERELIST "AR.AUXTBOWNER", DB2_CREATOR1
       CALL MAKE_WHERELIST "AR.AUXTBNAME", DB2_NAME1
       CALL MAKE_WHERELIST "TB.DBNAME", DB2_CREATOR2
       CALL MAKE_WHERELIST "TB.TSNAME", DB2_NAME2
       ONLIST = "ON " SUBWORD(WHERELIST, 2)
       SQLSTMT   =  "SELECT DISTINCT    " ,
                    "       TB.CREATOR  " ,
                    "    ,  TB.NAME     " ,
                    "    ,  TB.TYPE     " ,
                    "    ,  TB.DBNAME   " ,
                    "    ,  TB.TSNAME   " ,
                    "    ,  TB.PARENTS  " ,
                    "    ,  TB.CHILDREN " ,
                    "    ,  INT(TB.CARDF) AS CARD      " ,
                    "    ,  TB.COLCOUNT     " ,
                    "    ,  TB.STATUS       " ,
                    "    ,  TB.TABLESTATUS  " ,
                    "    ,  TB.CHECKFLAG    " ,
                    "    ,  TB.DATACAPTURE  " ,
                    "    ,  TB.SPLIT_ROWS   " ,
                    "    ,  TB.APPEND       " ,
                    "    ,  TB.AUDITING     " ,
                    "    ,  TB.VALPROC      " ,
                    "    ,  TB.CLUSTERTYPE  " ,
                    "FROM "SYSIBMS".SYSTABLES TB " ,
                    "INNER JOIN "SYSIBMS".SYSAUXRELS   AR" ,
                    ONLIST ,
                    "AND   TB.CREATOR    = AR.TBOWNER    " ,
                    "AND   TB.NAME       = AR.TBNAME     " ,
                    "ORDER BY 1, 2              " ,
                    ""
   End
  When DB2_FUNKTION = "BASE" & DB2_NAME5 = 'P' Then do
       CALL MAKE_WHERELIST "AR.XMLTBOWNER", DB2_CREATOR1
       CALL MAKE_WHERELIST "AR.XMLTBNAME", DB2_NAME1
       CALL MAKE_WHERELIST "TB.DBNAME", DB2_CREATOR2
       CALL MAKE_WHERELIST "TB.TSNAME", DB2_NAME2
       ONLIST = "ON " SUBWORD(WHERELIST, 2)
       SQLSTMT   =  "SELECT DISTINCT    " ,
                    "       TB.CREATOR  " ,
                    "    ,  TB.NAME     " ,
                    "    ,  TB.TYPE     " ,
                    "    ,  TB.DBNAME   " ,
                    "    ,  TB.TSNAME   " ,
                    "    ,  TB.PARENTS  " ,
                    "    ,  TB.CHILDREN " ,
                    "    ,  INT(TB.CARDF) AS CARD      " ,
                    "    ,  TB.COLCOUNT     " ,
                    "    ,  TB.STATUS       " ,
                    "    ,  TB.TABLESTATUS  " ,
                    "    ,  TB.CHECKFLAG    " ,
                    "    ,  TB.DATACAPTURE  " ,
                    "    ,  TB.SPLIT_ROWS   " ,
                    "    ,  TB.APPEND       " ,
                    "    ,  TB.AUDITING     " ,
                    "    ,  TB.VALPROC      " ,
                    "    ,  TB.CLUSTERTYPE  " ,
                    "FROM "SYSIBMS".SYSTABLES TB " ,
                    "INNER JOIN "SYSIBMS".SYSXMLRELS   AR" ,
                    ONLIST ,
                    "AND   TB.CREATOR    = AR.TBOWNER    " ,
                    "AND   TB.NAME       = AR.TBNAME     " ,
                    "ORDER BY 1, 2              " ,
                    ""
   End
  When DB2_FUNKTION = "XML"                    Then do
       CALL MAKE_WHERELIST "AR.TBOWNER",DB2_CREATOR1
       CALL MAKE_WHERELIST "AR.TBNAME", DB2_NAME1
       CALL MAKE_WHERELIST "TB.DBNAME", DB2_CREATOR2
       CALL MAKE_WHERELIST "TB.TSNAME", DB2_NAME2
       ONLIST = "ON " SUBWORD(WHERELIST, 2)
       SQLSTMT   =  "SELECT DISTINCT    " ,
                    "       TB.CREATOR  " ,
                    "    ,  TB.NAME     " ,
                    "    ,  TB.TYPE     " ,
                    "    ,  TB.DBNAME   " ,
                    "    ,  TB.TSNAME   " ,
                    "    ,  TB.PARENTS  " ,
                    "    ,  TB.CHILDREN " ,
                    "    ,  INT(TB.CARDF) AS CARD      " ,
                    "    ,  TB.COLCOUNT     " ,
                    "    ,  TB.STATUS       " ,
                    "    ,  TB.TABLESTATUS  " ,
                    "    ,  TB.CHECKFLAG    " ,
                    "    ,  TB.DATACAPTURE  " ,
                    "    ,  TB.SPLIT_ROWS   " ,
                    "    ,  TB.APPEND       " ,
                    "    ,  TB.AUDITING     " ,
                    "    ,  TB.VALPROC      " ,
                    "    ,  TB.CLUSTERTYPE  " ,
                    "FROM "SYSIBMS".SYSTABLES TB " ,
                    "INNER JOIN "SYSIBMS".SYSXMLRELS AR " ,
                    ONLIST ,
                    "AND   TB.CREATOR    = AR.XMLTBOWNER    " ,
                    "AND   TB.NAME       = AR.XMLTBNAME     " ,
                    "ORDER BY 1, 2              " ,
                    ""
   End
  Otherwise DO
       CALL MAKE_WHERELIST "AR.TBOWNER", DB2_CREATOR1
       CALL MAKE_WHERELIST "AR.TBNAME",  DB2_NAME1
       CALL MAKE_WHERELIST "TB.DBNAME",  DB2_CREATOR2
       CALL MAKE_WHERELIST "TB.TSNAME",  DB2_NAME2
       ONLIST = "ON " SUBWORD(WHERELIST, 2)
       SQLSTMT   =  "SELECT DISTINCT    " ,
                    "       TB.CREATOR  " ,
                    "    ,  TB.NAME     " ,
                    "    ,  TB.TYPE     " ,
                    "    ,  TB.DBNAME   " ,
                    "    ,  TB.TSNAME   " ,
                    "    ,  TB.PARENTS  " ,
                    "    ,  TB.CHILDREN " ,
                    "    ,  INT(TB.CARDF) AS CARD      " ,
                    "    ,  TB.COLCOUNT     " ,
                    "    ,  TB.STATUS       " ,
                    "    ,  TB.TABLESTATUS  " ,
                    "    ,  TB.CHECKFLAG    " ,
                    "    ,  TB.DATACAPTURE  " ,
                    "    ,  TB.SPLIT_ROWS   " ,
                    "    ,  TB.APPEND       " ,
                    "    ,  TB.AUDITING     " ,
                    "    ,  TB.VALPROC      " ,
                    "    ,  TB.CLUSTERTYPE  " ,
                    "FROM "SYSIBMS".SYSTABLES TB " ,
                    "INNER JOIN "SYSIBMS".SYSAUXRELS   AR" ,
                    ONLIST ,
                    "AND   TB.CREATOR    = AR.AUXTBOWNER    " ,
                    "AND   TB.NAME       = AR.AUXTBNAME     " ,
                    "ORDER BY 1, 2              " ,
                    ""
   End
 End

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* CREATOR                   */
OUTSQLDA.2.SQLLEN   = 27           /* NAME                      */
OUTSQLDA.4.SQLLEN   = 8            /* DBNAME                    */
OUTSQLDA.5.SQLLEN   = 8            /* TSNAME                    */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("TBNAME", 1, 27)
DDLTEXT = DDLTEXT SUBSTR("TY", 1, 2)
DDLTEXT = DDLTEXT SUBSTR("TSNAME", 1, 18)
DDLTEXT = DDLTEXT RIGHT("P C", 3)
DDLTEXT = DDLTEXT RIGHT("CARD", 9)
DDLTEXT = DDLTEXT RIGHT("COLS", 4)
DDLTEXT = DDLTEXT RIGHT("SC", 3)
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   XTBNAME = STRIP(CREATOR) || '.' || STRIP(NAME)
   XTSNAME = STRIP(DBNAME) || '.' || STRIP(TSNAME)
   STATUS  = STRIP(STATUS) || STRIP(TABLESTATUS)
   LZEILE = LZEILE || SUBSTR(XTBNAME, 1, 27)
   LZEILE = LZEILE SUBSTR(TYPE, 1, 2)
   LZEILE = LZEILE SUBSTR(XTSNAME, 1, 18)
   LZEILE = LZEILE RIGHT(PARENTS, 1, ' ')
   LZEILE = LZEILE RIGHT(CHILDREN, 1, ' ')
   LZEILE = LZEILE RIGHT(CARD, 9, ' ')
   LZEILE = LZEILE RIGHT(COLCOUNT, 4, ' ')
   LZEILE = LZEILE RIGHT(STATUS || CHECKFLAG, 3, ' ')
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return

LIST_TSBASE:
CNR = 1
SNR = CNR

WHERELIST    = ""
ONLIST       = ""
SELECT
  When DB2_FUNKTION = "TSBASE" & DB2_NAME5 = 'X' Then do
       CALL MAKE_WHERELIST "TB.DBNAME", DB2_CREATOR2
       CALL MAKE_WHERELIST "TB.TSNAME", DB2_NAME2
       SQLSTMT   =  "SELECT DISTINCT    " ,
                    "       TB2.CREATOR  " ,
                    "    ,  TB2.NAME     " ,
                    "    ,  TB2.TYPE     " ,
                    "    ,  TB2.DBNAME   " ,
                    "    ,  TB2.TSNAME   " ,
                    "    ,  TB2.PARENTS  " ,
                    "    ,  TB2.CHILDREN " ,
                    "    ,  INT(TB2.CARDF) AS CARD      " ,
                    "    ,  TB2.COLCOUNT     " ,
                    "    ,  TB2.STATUS       " ,
                    "    ,  TB2.TABLESTATUS  " ,
                    "    ,  TB2.CHECKFLAG    " ,
                    "    ,  TB2.DATACAPTURE  " ,
                    "    ,  TB2.SPLIT_ROWS   " ,
                    "    ,  TB2.APPEND       " ,
                    "    ,  TB2.AUDITING     " ,
                    "    ,  TB2.VALPROC      " ,
                    "    ,  TB2.CLUSTERTYPE  " ,
                    "FROM "SYSIBMS".SYSTABLESPACE TS " ,
                    "INNER JOIN "SYSIBMS".SYSTABLES  TB " ,
                    "   ON    TS.NAME      = TB.TSNAME " ,
                    "   AND   TS.DBNAME    = TB.DBNAME " ,
                    "INNER JOIN "SYSIBMS".SYSAUXRELS AR " ,
                    "   ON    TB.NAME      = AR.AUXTBNAME " ,
                    "   AND   TB.CREATOR   = AR.AUXTBOWNER " ,
                    "INNER JOIN "SYSIBMS".SYSTABLES  TB2 " ,
                    "   ON    AR.TBNAME    = TB2.NAME " ,
                    "   AND   AR.TBOWNER   = TB2.CREATOR " ,
                    wherelist ,
                    "ORDER BY 1, 2              " ,
                    ""
   End
  When DB2_FUNKTION = "TSBASE" & DB2_NAME5 = 'P' Then do
       CALL MAKE_WHERELIST "TB.DBNAME", DB2_CREATOR2
       CALL MAKE_WHERELIST "TB.TSNAME", DB2_NAME2
       SQLSTMT   =  "SELECT DISTINCT    " ,
                    "       TB2.CREATOR  " ,
                    "    ,  TB2.NAME     " ,
                    "    ,  TB2.TYPE     " ,
                    "    ,  TB2.DBNAME   " ,
                    "    ,  TB2.TSNAME   " ,
                    "    ,  TB2.PARENTS  " ,
                    "    ,  TB2.CHILDREN " ,
                    "    ,  INT(TB2.CARDF) AS CARD      " ,
                    "    ,  TB2.COLCOUNT     " ,
                    "    ,  TB2.STATUS       " ,
                    "    ,  TB2.TABLESTATUS  " ,
                    "    ,  TB2.CHECKFLAG    " ,
                    "    ,  TB2.DATACAPTURE  " ,
                    "    ,  TB2.SPLIT_ROWS   " ,
                    "    ,  TB2.APPEND       " ,
                    "    ,  TB2.AUDITING     " ,
                    "    ,  TB2.VALPROC      " ,
                    "    ,  TB2.CLUSTERTYPE  " ,
                    "FROM "SYSIBMS".SYSTABLESPACE TS " ,
                    "INNER JOIN "SYSIBMS".SYSTABLES  TB " ,
                    "   ON    TS.NAME      = TB.TSNAME " ,
                    "   AND   TS.DBNAME    = TB.DBNAME " ,
                    "INNER JOIN "SYSIBMS".SYSXMLRELS AR " ,
                    "   ON    TB.NAME      = AR.XMLTBNAME " ,
                    "   AND   TB.CREATOR   = AR.XMLTBOWNER " ,
                    "INNER JOIN "SYSIBMS".SYSTABLES TB2 " ,
                    "   ON    AR.TBNAME    = TB2.NAME " ,
                    "   AND   AR.TBOWNER   = TB2.CREATOR " ,
                    wherelist ,
                    "ORDER BY 1, 2              " ,
                    ""
   End
  When DB2_FUNKTION = "TSXML"                    Then do
       CALL MAKE_WHERELIST "TB2.DBNAME", DB2_CREATOR2
       CALL MAKE_WHERELIST "TB2.TSNAME", DB2_NAME2
       SQLSTMT   =  "SELECT DISTINCT    " ,
                    "       TB.CREATOR  " ,
                    "    ,  TB.NAME     " ,
                    "    ,  TB.TYPE     " ,
                    "    ,  TB.DBNAME   " ,
                    "    ,  TB.TSNAME   " ,
                    "    ,  TB.PARENTS  " ,
                    "    ,  TB.CHILDREN " ,
                    "    ,  INT(TB.CARDF) AS CARD      " ,
                    "    ,  TB.COLCOUNT     " ,
                    "    ,  TB.STATUS       " ,
                    "    ,  TB.TABLESTATUS  " ,
                    "    ,  TB.CHECKFLAG    " ,
                    "    ,  TB.DATACAPTURE  " ,
                    "    ,  TB.SPLIT_ROWS   " ,
                    "    ,  TB.APPEND       " ,
                    "    ,  TB.AUDITING     " ,
                    "    ,  TB.VALPROC      " ,
                    "    ,  TB.CLUSTERTYPE  " ,
                    "FROM "SYSIBMS".SYSTABLESPACE TS " ,
                    "INNER JOIN "SYSIBMS".SYSTABLES  TB " ,
                    "   ON    TS.NAME      = TB.TSNAME " ,
                    "   AND   TS.DBNAME    = TB.DBNAME " ,
                    "INNER JOIN "SYSIBMS".SYSXMLRELS AR " ,
                    "   ON    TB.NAME      = AR.XMLTBNAME " ,
                    "   AND   TB.CREATOR   = AR.XMLTBOWNER " ,
                    "INNER JOIN "SYSIBMS".SYSTABLES  TB2 " ,
                    "   ON    AR.TBNAME    = TB2.NAME " ,
                    "   AND   AR.TBOWNER   = TB2.CREATOR " ,
                    wherelist ,
                    "ORDER BY 1, 2              " ,
                    ""
   End
  Otherwise DO
       CALL MAKE_WHERELIST "TB2.DBNAME", DB2_CREATOR2
       CALL MAKE_WHERELIST "TB2.TSNAME", DB2_NAME2
       SQLSTMT   =  "SELECT DISTINCT    " ,
                    "       TB.CREATOR  " ,
                    "    ,  TB.NAME     " ,
                    "    ,  TB.TYPE     " ,
                    "    ,  TB.DBNAME   " ,
                    "    ,  TB.TSNAME   " ,
                    "    ,  TB.PARENTS  " ,
                    "    ,  TB.CHILDREN " ,
                    "    ,  INT(TB.CARDF) AS CARD      " ,
                    "    ,  TB.COLCOUNT     " ,
                    "    ,  TB.STATUS       " ,
                    "    ,  TB.TABLESTATUS  " ,
                    "    ,  TB.CHECKFLAG    " ,
                    "    ,  TB.DATACAPTURE  " ,
                    "    ,  TB.SPLIT_ROWS   " ,
                    "    ,  TB.APPEND       " ,
                    "    ,  TB.AUDITING     " ,
                    "    ,  TB.VALPROC      " ,
                    "    ,  TB.CLUSTERTYPE  " ,
                    "FROM "SYSIBMS".SYSTABLESPACE TS " ,
                    "INNER JOIN "SYSIBMS".SYSTABLES  TB " ,
                    "   ON    TS.NAME      = TB.TSNAME " ,
                    "   AND   TS.DBNAME    = TB.DBNAME " ,
                    "INNER JOIN "SYSIBMS".SYSAUXRELS AR " ,
                    "   ON    TB.NAME      = AR.AUXTBNAME " ,
                    "   AND   TB.CREATOR   = AR.AUXTBOWNER " ,
                    "INNER JOIN "SYSIBMS".SYSTABLES  TB2 " ,
                    "   ON    AR.TBNAME    = TB2.NAME " ,
                    "   AND   AR.TBOWNER   = TB2.CREATOR " ,
                    wherelist ,
                    "ORDER BY 1, 2              " ,
                    ""
   End
 End

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* CREATOR                   */
OUTSQLDA.2.SQLLEN   = 27           /* NAME                      */
OUTSQLDA.4.SQLLEN   = 8            /* DBNAME                    */
OUTSQLDA.5.SQLLEN   = 8            /* TSNAME                    */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("TBNAME", 1, 27)
DDLTEXT = DDLTEXT SUBSTR("TY", 1, 2)
DDLTEXT = DDLTEXT SUBSTR("TSNAME", 1, 18)
DDLTEXT = DDLTEXT RIGHT("P C", 3)
DDLTEXT = DDLTEXT RIGHT("CARD", 9)
DDLTEXT = DDLTEXT RIGHT("COLS", 4)
DDLTEXT = DDLTEXT RIGHT("SC", 3)
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   XTBNAME = STRIP(CREATOR) || '.' || STRIP(NAME)
   XTSNAME = STRIP(DBNAME) || '.' || STRIP(TSNAME)
   STATUS  = STRIP(STATUS) || STRIP(TABLESTATUS)
   LZEILE = LZEILE || SUBSTR(XTBNAME, 1, 27)
   LZEILE = LZEILE SUBSTR(TYPE, 1, 2)
   LZEILE = LZEILE SUBSTR(XTSNAME, 1, 18)
   LZEILE = LZEILE RIGHT(PARENTS, 1, ' ')
   LZEILE = LZEILE RIGHT(CHILDREN, 1, ' ')
   LZEILE = LZEILE RIGHT(CARD, 9, ' ')
   LZEILE = LZEILE RIGHT(COLCOUNT, 4, ' ')
   LZEILE = LZEILE RIGHT(STATUS || CHECKFLAG, 3, ' ')
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return


LIST_MQT:
CNR = 2
SNR = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "CREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "NAME", DB2_NAME1
CALL MAKE_WHERELIST "", "TYPE = 'M'"


SQLSTMT   =  "SELECT CREATOR  " ,
             "    ,  NAME     " ,
             "    ,  TYPE     " ,
             "    ,  DBNAME   " ,
             "    ,  TSNAME   " ,
             "    ,  PARENTS  " ,
             "    ,  CHILDREN " ,
             "    ,  INT(CARDF) AS CARD      " ,
             "    ,  COLCOUNT " ,
             "    ,  STATUS   " ,
             "FROM "SYSIBMS".SYSTABLES T2 " ,
             WHERELIST ,
             "ORDER BY 1, 2              " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* CREATOR                   */
OUTSQLDA.2.SQLLEN   = 25           /* NAME                      */
OUTSQLDA.4.SQLLEN   = 8            /* DBNAME                    */
OUTSQLDA.5.SQLLEN   = 8            /* TSNAME                    */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("TBNAME", 1, 28)
DDLTEXT = DDLTEXT SUBSTR("TY", 1, 2)
DDLTEXT = DDLTEXT SUBSTR("TSNAME", 1, 18)
DDLTEXT = DDLTEXT RIGHT("P C", 3)
DDLTEXT = DDLTEXT RIGHT("CARD", 9)
DDLTEXT = DDLTEXT RIGHT("COLS", 4)
DDLTEXT = DDLTEXT RIGHT("ST", 2)
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   XTBNAME = STRIP(CREATOR) || '.' || STRIP(NAME)
   XTSNAME = STRIP(DBNAME) || '.' || STRIP(TSNAME)
   LZEILE = LZEILE || SUBSTR(XTBNAME, 1, 28)
   LZEILE = LZEILE SUBSTR(TYPE, 1, 2)
   LZEILE = LZEILE SUBSTR(XTSNAME, 1, 18)
   LZEILE = LZEILE RIGHT(PARENTS, 1, ' ')
   LZEILE = LZEILE RIGHT(CHILDREN, 1, ' ')
   LZEILE = LZEILE RIGHT(CARD, 9, ' ')
   LZEILE = LZEILE RIGHT(COLCOUNT, 4, ' ')
   LZEILE = LZEILE RIGHT(STATUS, 2, ' ')
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return


LIST_AL:
CNR = 2
SNR = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "CREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "NAME", DB2_NAME1
CALL MAKE_WHERELIST "TBCREATOR", DB2_CREATOR2
CALL MAKE_WHERELIST "TBNAME", DB2_NAME2
CALL MAKE_WHERELIST "", "TYPE = 'A'"

SQLSTMT   =  "SELECT CREATOR    " ,
             "     , NAME       " ,
              "    , TYPE       " ,
              "    , LOCATION   " ,
              "    , TBCREATOR  " ,
              "    , TBNAME     " ,
              "    , (Select AL.TYPE                " ,
              "       FROM "SYSIBMS".SYSTABLES AL    " ,
              "       WHERE T2.TBCREATOR = AL.CREATOR " ,
              "       AND   T2.TBNAME    = AL.NAME    " ,
              "        ) AS TBTYPE                     " ,
              "    , REMARKS    " ,
              "    , LABEL      " ,
              "FROM "SYSIBMS".SYSTABLES T2 " ,
              WHERELIST ,
              "ORDER BY 1, 2              " ,
              ""

SQLSTMT = Space(SQLSTMT, 1)
CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* CREATOR                   */
OUTSQLDA.2.SQLLEN   = 20           /* NAME                      */
OUTSQLDA.3.SQLLEN   = 4            /* TYPE                      */
OUTSQLDA.4.SQLLEN   = -1           /* LOCATION                  */
OUTSQLDA.5.SQLLEN   = 9            /* TBCREATOR                 */
OUTSQLDA.6.SQLLEN   = 20           /* TBNAME                    */
OUTSQLDA.7.SQLLEN   = 6            /* TBTYPE                    */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return

LIST_DIS:

CNR = 1
SNR = CNR

WHERELIST    = ""
ORDER        = ""
CallSproc = "N"

select
   when DB2_LIST_OBJ = "" Then Do
        Return 8
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSSEQUENCES" then do
        CALL MAKE_WHERELIST "SCHEMA", DB2_CREATOR1
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSTABLESPACE" then do
        CALL MAKE_WHERELIST "DBNAME", DB2_CREATOR1
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSTRIGGERS" then do
        CALL MAKE_WHERELIST "SCHEMA", DB2_CREATOR1
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSCOLUMNS" then do
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
        CALL MAKE_WHERELIST "TBCREATOR", DB2_CREATOR2
        CALL MAKE_WHERELIST "TBNAME", DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSVOLUMES" then do
        CALL MAKE_WHERELIST "VOLID", DB2_NAME1
        CALL MAKE_WHERELIST "SGCREATOR", DB2_CREATOR2
        CALL MAKE_WHERELIST "SGNAME", DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSROUTINES" then do
        CALL MAKE_WHERELIST "SPECIFICNAME", DB2_NAME1
        CALL MAKE_WHERELIST "SCHEMA", DB2_CREATOR2
        CALL MAKE_WHERELIST "NAME", DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSSTRINGS" then do
        CALL MAKE_WHERELIST "CHAR(OUTCCSID)", DB2_CREATOR1
        CALL MAKE_WHERELIST "CHAR(INCCSID)", DB2_NAME1
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSCHECKS" then do
        CALL MAKE_WHERELIST "TBOWNER", DB2_CREATOR1
        CALL MAKE_WHERELIST "TBNAME", DB2_NAME1
        CALL MAKE_WHERELIST "CHECKNAME" , DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSKEYS" then do
        CALL MAKE_WHERELIST "IXCREATOR", DB2_CREATOR1
        CALL MAKE_WHERELIST "IXNAME", DB2_NAME1
        CALL MAKE_WHERELIST "COLNAME" , DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSINDEXPART" then do
        CALL MAKE_WHERELIST "IXCREATOR", DB2_CREATOR1
        CALL MAKE_WHERELIST "IXNAME", DB2_NAME1
        CALL MAKE_WHERELIST "PARTITION", DB2_NAME2, "NUM"
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSTABLEPART" then do
        CALL MAKE_WHERELIST "DBNAME", DB2_CREATOR1
        CALL MAKE_WHERELIST "TSNAME", DB2_NAME1
        CALL MAKE_WHERELIST "PARTITION", DB2_NAME2, "NUM"
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSPLAN" then do
        CALL MAKE_WHERELIST "CREATOR", DB2_CREATOR1
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSPACKAGE" Then do
        CALL MAKE_WHERELIST "COLLID", DB2_CREATOR1
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
        CALL MAKE_WHERELIST "LOCATION", DB2_CREATOR2
        CALL MAKE_WHERELIST "VERSION", DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".LUNAMES" Then do
        CALL MAKE_WHERELIST "LUNAME", DB2_NAME1
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSTABAUTH" Then do
        CALL MAKE_WHERELIST "TCREATOR", DB2_CREATOR1
        CALL MAKE_WHERELIST "TTNAME", DB2_NAME1
        CALL MAKE_WHERELIST "GRANTOR", DB2_CREATOR2
        CALL MAKE_WHERELIST "GRANTEE", DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSCOPY" Then do
        CALL MAKE_WHERELIST "DBNAME", DB2_CREATOR1
        CALL MAKE_WHERELIST "TSNAME", DB2_NAME1
        CALL MAKE_WHERELIST "TIMESTAMP", SUCH2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSROLES" Then do
        CALL MAKE_WHERELIST "DEFINER", DB2_CREATOR1
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
    End
   when DB2_LIST_OBJ = SYSIBMS".LOCATIONS" Then do
        CALL MAKE_WHERELIST "LINKNAME", DB2_CREATOR1
        CALL MAKE_WHERELIST "LOCATION", DB2_NAME1
    End
   when DB2_LIST_OBJ = SYSIBMS".IPNAMES" Then do
        CALL MAKE_WHERELIST "LINKNAME", DB2_NAME1
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSTABLESPACESTATS" Then Do
        CALL MAKE_WHERELIST "DBNAME", DB2_CREATOR1
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
        CALL MAKE_WHERELIST "PARTITION", DB2_CREATOR2, NUM
        ORDER = "ORDER BY DBNAME, NAME, PARTITION"
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSINDEXSPACESTATS" Then Do
        CALL MAKE_WHERELIST "CREATOR", DB2_CREATOR1
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
        CALL MAKE_WHERELIST "PARTITION", DB2_CREATOR2, NUM
    End
   when DB2_LIST_OBJ = SYSIBMS".USERNAMES" Then do
        IF STRIP(DB2_CREATOR1) <> "" Then do
           CALL MAKE_WHERELIST "AUTHID", DB2_CREATOR1
         End
        Else Do
           CALL MAKE_WHERELIST "", "AUTHID = ' '"
         End
        CALL MAKE_WHERELIST "LINKNAME", DB2_NAME1
        CALL MAKE_WHERELIST "TYPE", DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSDBRM" Then Do
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
        CALL MAKE_WHERELIST "PLCREATOR", DB2_CREATOR2
        CALL MAKE_WHERELIST "PLNAME", DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSCONTROLS" Then do
        CALL MAKE_WHERELIST "SCHEMA", DB2_CREATOR1
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
        CALL MAKE_WHERELIST "CONTROL_ID", DB2_CREATOR2, NUM
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSRESAUTH"  Then do
        CALL MAKE_WHERELIST "QUALIFIER", DB2_CREATOR1
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
        CALL MAKE_WHERELIST "GRANTOR", DB2_CREATOR2
        CALL MAKE_WHERELIST "GRANTEE", DB2_NAME2
        CALL MAKE_WHERELIST "OBTYPE", DB2_CREATOR3
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSDBAUTH"  Then do
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
        CALL MAKE_WHERELIST "GRANTOR", DB2_CREATOR2
        CALL MAKE_WHERELIST "GRANTEE", DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSROUTINEAUTH" Then do
        CALL MAKE_WHERELIST "SCHEMA", DB2_Creator1
        CALL MAKE_WHERELIST "SPECIFICNAME", DB2_NAME1
        CALL MAKE_WHERELIST "GRANTEDTS", SUCH2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSSEQUENCEAUTH" Then do
        CALL MAKE_WHERELIST "SCHEMA", DB2_Creator1
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
        CALL MAKE_WHERELIST "GRANTOR", DB2_Creator2
        CALL MAKE_WHERELIST "GRANTEE", DB2_NAME2
        CALL MAKE_WHERELIST "GRANTEDTS", SUCH3
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSPLANAUTH" Then do
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
        CALL MAKE_WHERELIST "GRANTOR", DB2_Creator2
        CALL MAKE_WHERELIST "GRANTEE", DB2_NAME2
        CALL MAKE_WHERELIST "GRANTEDTS", SUCH3

    End
   when DB2_LIST_OBJ = SYSIBMS".SYSPACKAUTH" Then do
        CALL MAKE_WHERELIST "LOCATION", DB2_NAME1
        CALL MAKE_WHERELIST "COLLID", DB2_Creator2
        CALL MAKE_WHERELIST "NAME", DB2_NAME2
        CALL MAKE_WHERELIST "TIMESTAMP", SUCH3
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSUSERAUTH" Then do
        CALL MAKE_WHERELIST "GRANTOR", DB2_Creator1
        CALL MAKE_WHERELIST "GRANTEE", DB2_NAME1
        CALL MAKE_WHERELIST "TIMESTAMP" DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSCOLAUTH"  Then do
        CALL MAKE_WHERELIST "CREATOR", DB2_Creator1
        CALL MAKE_WHERELIST "TNAME", DB2_NAME1
        CALL MAKE_WHERELIST "COLNAME" DB2_NAME2
        CALL MAKE_WHERELIST "GRANTOR" DB2_Creator3
        CALL MAKE_WHERELIST "GRANTEE" DB2_NAME3
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSRELS"  Then do
        CALL MAKE_WHERELIST "CREATOR", DB2_CREATOR1
        CALL MAKE_WHERELIST "TBNAME", DB2_NAME1
        CALL MAKE_WHERELIST "RELNAME",  DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSKEYTARGETS" Then do
        CALL MAKE_WHERELIST "IXSCHEMA", DB2_CREATOR1
        CALL MAKE_WHERELIST "IXNAME", DB2_NAME1
        CALL MAKE_WHERELIST "KEYSEQ", DB2_NAME2, NUM
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSPENDINGDDL" Then do
        CALL MAKE_WHERELIST "DBNAME", DB2_CREATOR1
        CALL MAKE_WHERELIST "TSNAME", DB2_NAME1
        CALL MAKE_WHERELIST "OBJSCHEMA", DB2_CREATOR2
        CALL MAKE_WHERELIST "OBJNAME", DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSSCHEMAAUTH" Then do
       CALL MAKE_WHERELIST "SCHEMANAME", DB2_NAME1
       CALL MAKE_WHERELIST "GRANTOR", DB2_CREATOR2
       CALL MAKE_WHERELIST "GRANTEE", DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSCONTEXT" Then do
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
        CALL MAKE_WHERELIST "CONTEXTID", DB2_NAME2, "NUM"
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSCONTEXTAUTHIDS" Then do
        CALL MAKE_WHERELIST "CONTEXTID", DB2_NAME1, "NUM"
        CALL MAKE_WHERELIST "AUTHID", DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSCTXTTRUSTATTRS" Then do
        CALL MAKE_WHERELIST "CONTEXTID", DB2_NAME1, "NUM"
        CALL MAKE_WHERELIST "NAME", DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSVARIABLES"      Then do
        CALL MAKE_WHERELIST "SCHEMA", DB2_CREATOR1
        CALL MAKE_WHERELIST "NAME  ", DB2_NAME1
        CALL MAKE_WHERELIST "VARID", DB2_NAME2, "NUM"
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSDATATYPES"      Then do
        CALL MAKE_WHERELIST "SCHEMA", DB2_CREATOR1
        CALL MAKE_WHERELIST "NAME  ", DB2_NAME1
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSINDEXCLEANUP"     Then do
        CALL MAKE_WHERELIST "DBNAME", DB2_CREATOR1
        CALL MAKE_WHERELIST "INDEXSPACE", DB2_NAME1
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSTABCONST"     Then do
        CALL MAKE_WHERELIST "TBCREATOR", DB2_CREATOR1
        CALL MAKE_WHERELIST "TBNAME   ", DB2_NAME1
    End
   when DB2_LIST_OBJ = SYSIBMS".DSNPROGAUTH"    Then do
        CALL MAKE_WHERELIST "PROGNAME", DB2_CREATOR1
        CALL MAKE_WHERELIST "PLANNAME", DB2_NAME1
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSSTATFEEDBACK" Then do
        CALL MAKE_WHERELIST "TBCREATOR",DB2_CREATOR1
        CALL MAKE_WHERELIST "TBNAME",   DB2_NAME1
        CALL MAKE_WHERELIST "DBNAME",   DB2_CREATOR2
        CALL MAKE_WHERELIST "TSNAME",   DB2_NAME2
        CALL MAKE_WHERELIST "IXCREATOR",DB2_CREATOR3
        CALL MAKE_WHERELIST "IXNAME",   DB2_NAME3
        CALL MAKE_WHERELIST "TYPE",     DB2_CREATOR4
        CALL MAKE_WHERELIST "COLNAME",  DB2_NAME4
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSTABLES_PROFILES" Then do
        CALL MAKE_WHERELIST "SCHEMA ",DB2_CREATOR1
        CALL MAKE_WHERELIST "TBNAME ",   DB2_NAME1
        CALL MAKE_WHERELIST "PROFILE_TYPE", DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSXMLSTRINGS"      Then do
        if datatype(db2_name1) = "NUM" then do
           CALL MAKE_WHERELIST "STRINGID", DB2_NAME1, "NUM"
         end
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSDEPENDENCIES"    Then do
        CALL MAKE_WHERELIST "BSCHEMA ",DB2_CREATOR1
        CALL MAKE_WHERELIST "BNAME",   DB2_NAME1
        CALL MAKE_WHERELIST "DSCHEMA ",DB2_CREATOR2
        CALL MAKE_WHERELIST "DNAME",   DB2_NAME2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSTABLES_HIST"    Then do
        CALL MAKE_WHERELIST "CREATOR",DB2_CREATOR1
        CALL MAKE_WHERELIST "NAME",   DB2_NAME1
        CALL MAKE_WHERELIST "STATSTIME", SUCH2
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSLGRNX"          Then do
        CALL MAKE_WHERELIST "hex(LGRDBID)", DB2_CREATOR1
        CALL MAKE_WHERELIST "hex(LGRPSID)", DB2_NAME1
        CALL MAKE_WHERELIST "hex(LGRPART)", DB2_CREATOR2
        CALL MAKE_WHERELIST "hex(LGRMEMB)", DB2_NAME2
        CALL MAKE_WHERELIST "hex(LGRSLRSN)", DB2_CREATOR3
    End
   when DB2_LIST_OBJ = SYSIBMS".SYSUTIL"          Then do
        CALL MAKE_WHERELIST "USUUID", SUCH1
    End
   when DB2_LIST_OBJ = SYSIBMS".XSROBJECTS"     Then do
        CALL MAKE_WHERELIST "XSROBJECTID", DB2_NAME1, "NUM"
    End
   when DB2_LIST_OBJ = SYSIBMS".XSROBJECTCOMPONENTS" Then do
        CALL MAKE_WHERELIST "XSRCOMPONENTID", DB2_NAME1, "NUM"
    End
   when DB2_LIST_OBJ = SYSIBMS".DSNSERVICE" Then do
        CALL MAKE_WHERELIST "COLLID ", DB2_CREATOR1
        CALL MAKE_WHERELIST "NAME   ", DB2_NAME1
    End
   when DB2_LIST_OBJ = SYSIBMS".ADMIN_COMMAND_DB2_BP" Then do
        CallSproc = "Y"
        RXDB2_PUTSTEM  = 'AUSGABE1. AUSGABE. AUSGABE3. AUSGABE4.'
        Anzeige_stem   = 2
        AUSGABE.0      = 0
        AUSGABE1.0     = 0
        AUSGABE2.0     = 0
        AUSGABE3.0     = 0
        AUSGABE4.0     = 0
        SQLSTMT   = " CALL "SYSPROCA".ADMIN_COMMAND_DB2 ( " ,
             " '-DISPLAY BUFFERPOOL (" || DB2_NAME1 || ") ' " ,
             " ,200, 'BP', '"DB2_SSID"', 200, 0,0,0,0,0,0,'' ",
             " )                                 " ,
             " ;                                 " ,
             ""
    End
   when DB2_LIST_OBJ = SYSIBMS".ADMIN_COMMAND_DB2_THD" Then do
        CallSproc = "Y"
        RXDB2_PUTSTEM  = 'AUSGABE1. AUSGABE. AUSGABE3. AUSGABE4.'
        Anzeige_stem   = 2
        AUSGABE.0      = 0
        AUSGABE1.0     = 0
        AUSGABE2.0     = 0
        AUSGABE3.0     = 0
        AUSGABE4.0     = 0
        SQLSTMT   = " CALL "SYSPROCA".ADMIN_COMMAND_DB2 ( " ,
             " '-DISPLAY THREAD (" || DB2_CREATOR1 || ")  " ,
             " LUWID(" || DB2_NAME1 ||  ")                " ,
             " '                                          ",
             " ,200, 'THD', '"DB2_SSID"', 200, 0,0,0,0,0,0,'' ",
             " )                                 " ,
             " ;                                 " ,
             ""
    End
   when DB2_LIST_OBJ = SYSIBMS".ADMIN_COMMAND_DB2_DDF" Then do
        CallSproc = "Y"
        RXDB2_PUTSTEM  = 'AUSGABE1. AUSGABE. AUSGABE3. AUSGABE4.'
        Anzeige_stem   = 2
        AUSGABE.0      = 0
        AUSGABE1.0     = 0
        AUSGABE2.0     = 0
        AUSGABE3.0     = 0
        AUSGABE4.0     = 0
        DB2_Creator1 = Strip(TRANSLATE(DB2_NAME1, '*', '%'))
        DB2_NAME1    = Strip(TRANSLATE(DB2_NAME1, '*', '%'))
        SQLSTMT    = "",
                     " CALL "SYSPROCA".ADMIN_COMMAND_DB2 ( " ,
                     " '-DISPLAY DDF                   ' " ,
                     " ,   200                           " ,
                     " ,   'DDF'                         " ,
                     " ,   ''                            " ,
                     " ,   500                           " ,
                     " ,   0                             " ,
                     " ,   0                             " ,
                     " ,   0                             " ,
                     " ,   0                             " ,
                     " ,   0                             " ,
                     " ,   0                             " ,
                     " ,   ''                            " ,
                     " )                                 " ,
                     " ;                                 " ,
                     ""

    End
   Otherwise do
        CALL MAKE_WHERELIST "CREATOR", DB2_CREATOR1
        CALL MAKE_WHERELIST "NAME", DB2_NAME1
    End
 End

If CallSproc = "Y" Then Do
   CALL Stored_Procedure
   Call OPEN_COLTB
 End
else do
   WHERELIST_SAVE = WHERELIST
   Call Get_Table_cols
   if tbCols = "" Then TBCols = "*"
   WHERELIST      = WHERELIST_SAVE

   Eingabe.0 = 1
   Eingabe.1 = "SELECT "TBCols" FROM "DB2_LIST_OBJ WHERELIST ORDER

   CALL EXECUTE_SQL_DYNAMIC_AC3
   Call OPEN_COLTB
 End

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("COLName", 1, 26)
DDLTEXT = DDLTEXT SUBSTR("Col Value", 1, 18)
DDLTEXT = DDLTEXT "-NR"
do Ai = 1 to Ausgabe.0
   DO ci = 1 TO words(cols)
      If Ausgabe.0 > 1 Then do
         IVAL = "b=AUSGABE.ai." ||  SPACE(word(cols, CI))
         INTERPRET IVAL
       End
      Else do
         B=OUTSQLDA.CI.SQLDATA
       End
   /*
      IVAL = "B=OUTSQLDA.CI.SQLDATA"
      INTERPRET IVAL
      B=OUTSQLDA.CI.SQLDATA
   */

      L = Left(word(Cols, ci), 25) || ":"
      if b = "" Then B = " "
      do while length(b) > 0
         LZEILE  = l Substr(b, 1, 45)
         CALL ADD_TABLE_LUWTABLE
         L = '..........................'
         b = substr(b, 46)
       End
    END
 END

CALL CLOSE_CURSOR_AC3
RETURN

Get_Table_cols:

CNR = 1
SNR = CNR
parse value DB2_LIST_OBJ with TB_Creator "." TB_Name .
WHERELIST = ""
TB_CREATOR = 'SYSIBM'
CALL MAKE_WHERELIST "TBCREATOR", TB_Creator
CALL MAKE_WHERELIST "TBNAME", TB_Name
CALL MAKE_WHERELIST "", "CO.NAME NOT LIKE 'DB2_GENERATED_ROWID%'"

SQLSTMT    = "SELECT COLNO               " ,
             "     , NAME                " ,
             "     , LENGTH2             " ,
             "     , COLTYPE                   " ,
             "FROM  "SYSIBMS".SYSCOLUMNS CO    " ,
             WHERELIST ,
             "ORDER BY COLNO                   " ,
             ""


CALL OPEN_CURSOR_AC3

Komma    = ""
TBCols   = ""
DO WHILE SQLCODE = 0
   CNR = 1
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

   Select
       When SQLCODE = 100 THEN DO
            CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
            LEAVE
         End
       When SQLCODE <  0  THEN DO
            SAY "ERROR ON FETCH C"CNR", RC="RC ,
                "SQLCODE="SQLCODE         ,
                "SQLERRMC="SQLERRMC       ,
                ""
            Exit 8
         End
       Otherwise NOP
    End

   If COLTYPE = 'BLOB' Then DO
      NAME = "CAST(" || NAME" AS BLOB("MAXBLOBS")) AS "NAME
    End
   If COLTYPE = 'CLOB' Then DO
      NAME = "CAST(" || NAME" AS CLOB("MAXBLOBS")) AS "NAME
    End

   Select
      when TB_Name = 'SYSCOPY'                         Then do
           If NAME = 'ICTYPE' Then Do
           Name = "Case when ICTYPE = 'A' Then 'A ALTER    '     ",
                   " when ICTYPE = 'B' Then 'B REBUILD INDEX' ",
                   " when ICTYPE = 'C' Then 'C CREATED      ' ",
                   " when ICTYPE = 'D' Then 'D CHECK DATA LOG(NO) '",
                   " when ICTYPE = 'E' Then 'E RECOVER to current '",
                   " when ICTYPE = 'F' Then 'F COPY FULL YES      '",
                   " when ICTYPE = 'I' Then 'I COPY FULL NO       '",
                   " when ICTYPE = 'J' Then 'J REORG or LOAD REPLACE'",
                   " when ICTYPE = 'L' Then 'L SQL                '",
                   " when ICTYPE = 'M' Then 'M MODIFY RECOVERY    '",
                   " when ICTYPE = 'P' Then 'P RECOVER TOCOPY/TORBA'",
                   " when ICTYPE = 'Q' Then 'Q QUIESCE           '",
                   " when ICTYPE = 'R' Then 'R LOAD REPLACE LOG(YES)'",
                   " when ICTYPE = 'S' Then 'S LOAD REPLACE LOG(NO)'",
                   " when ICTYPE = 'T' Then 'T TERM UTILITY    '   ",
                   " when ICTYPE = 'V' Then 'V REPAIR VERSIONS '   ",
                   " when ICTYPE = 'W' Then 'W REORG LOG(NO)   '   ",
                   " when ICTYPE = 'X' Then 'X REORG LOG(YES)  '   ",
                   " when ICTYPE = 'Y' Then 'Y LOAD LOG(NO)    '   ",
                   " when ICTYPE = 'Z' Then 'Z LOAD LOG(YES)   '   ",
                   " ELSE ICTYPE END AS ICTYPE                   ",
                      ""
            End
           IF NAME = 'PIT_RBA'   THEN Name = "HEX(PIT_RBA)   AS "NAME
           IF NAME = 'START_RBA' THEN Name = "HEX(START_RBA) AS "NAME
       End
      when TB_Name = 'SYSTABLES'                    Then do
           IF NAME = 'RBA1'        Then  Name = "HEX(RBA1) AS "NAME
           IF NAME = 'RBA2'        Then  Name = "HEX(RBA2) AS "NAME
           IF NAME = 'TABLESTATUS' Then Do
              Name = "Case when TABLESTATUS = 'L' Then " ,
         "'L auxiliary table or auxiliary index has not been defined'",
                   "    when TABLESTATUS = 'P' Then " ,
         "'P table lacks a primary index.'                           ",
                   "    when TABLESTATUS = 'R' Then " ,
         "'R table lacks a required index on a row ID.'              ",
                   "    when TABLESTATUS = 'U' Then " ,
         "'U table lacks a required index on a unique key.'          ",
                   "    when TABLESTATUS = 'V' Then " ,
         "'V  regenerate the internal representation of the view.'   ",
                   " ELSE TABLESTATUS END AS TABLESTATUS         ",
                      ""
            End
       End
      when TB_Name = 'SYSINDEXES' & NAME = 'ROWID'   Then do
           Name = "HEX(ROWID) AS "NAME
       End
      when TB_Name = 'SYSTABLESPACE' & NAME = 'STATUS'  Then do
           If NAME = 'STATUS' Then do
              Name = "Case when STATUS = 'A' Then " ,
         "'A Available '                                             ",
                   "    when STATUS = 'C' Then " ,
         "'C TS does not use table-controlled partitioning  ' concat ",
         "   ' and a partitioning index has not been created.  '    ",
                   "    when STATUS = 'P' Then " ,
         "'P check pending status'                                   ",
                   "    when STATUS = 'S' Then " ,
         "'S check pending status the scope less than the entire TS'",
         "              when STATUS = 'T' Then " ,
         "'T incomplete because no table has been created. '         ",
                   " ELSE STATUS END AS STATUS                   ",
                      ""
            End
       End
      when TB_Name = 'SYSTABLEPART' Then do
           If NAME = 'RBA_FORMAT'  Then do
              Name = "Case RBA_FORMAT " ,
                     "when ' ' Then '  migrated objects  '" ,
                     "when 'B' Then 'B Basic, 6 byte RBA LRSN'" ,
                     "when 'E' Then 'E Extended, 10-byte RBA LRSN'" ,
                "when 'U' Then 'U Undefined. DEFINE NO WAS specified'",
                     " ELSE RBA_FORMAT END AS "NAME        ,
                     ""
            End
       End
      when TB_Name = 'SYSINDEXPART' Then do
           If NAME = 'RBA_FORMAT'  Then do
              Name = "Case RBA_FORMAT " ,
                     "when ' ' Then 'B For migrated objects  '" ,
                     "when 'B' Then 'B Basic, 6 byte RBA LRSN'" ,
                     "when 'E' Then 'E Extended, 10-byte RBA LRSN'" ,
                "when 'U' Then 'U Undefined. DEFINE NO WAS specified'",
                     " ELSE RBA_FORMAT END AS "NAME        ,
                     ""
            End
       End
      when TB_Name = 'SYSLGRNX'                        Then do
           If NAME = 'LGRDBID'  Then Name = "HEX(LGRDBID)   AS "NAME
           If NAME = 'LGRPSID'  Then Name = "HEX(LGRPSID)   AS "NAME
           If NAME = 'LGRSRBA'  Then Name = "HEX(LGRSRBA)   AS "NAME
           If NAME = 'LGRSPBA'  Then Name = "HEX(LGRSPBA)   AS "NAME
           If NAME = 'LGRSLRSN' Then Name = "HEX(LGRSLRSN)  AS "NAME
           If NAME = 'LGRELRSN' Then Name = "HEX(LGRELRSN)  AS "NAME
           If NAME = 'LGRMEMB'  Then Name = "HEX(LGRMEMB)   AS "NAME
       End
      when TB_Name = 'SYSROUTINES' Then do
           If NAME = 'COMMIT_ON_RETURN' Then do
              Name = "Case COMMIT_ON_RETURN   " ,
         "WHEN 'N' THEN 'N The unit of work is to continue.  '",
         "WHEN 'Y' Then 'Y UOW is to be committed immediately' ",
         "WHEN 'A' Then 'A autonomous procedure '      ",
                   " ELSE  COMMIT_ON_RETURN END AS COMMIT_ON_RETURN ",
                      ""
            End
       End
      when TB_Name = 'SYSSTATFEEDBACK'  Then  do
           If NAME = 'COLGROUPCOLNO'    Then do
              NOP
              Name = "HEX("name") AS "name
            End
       End
      when TB_Name = 'SYSDEPENDENCIES'  Then  do
           If NAME = 'BTYPE'    Then do
              name = "Case BTYPE                                  ",
                     "when 'C' THEN 'C Column                   ' ",
                     "when 'E' THEN 'E INSTEAD OF trigger       ' ",
                     "when 'F' THEN 'F Function                 ' ",
                     "when 'G' THEN 'G Global temporary table   ' ",
                     "when 'H' THEN 'H Global variable          ' ",
                     "when 'I' THEN 'I Index                    ' ",
                     "when 'M' THEN 'M Materialized query table ' ",
                     "when 'O' THEN 'O Procedure                ' ",
                     "when 'P' THEN 'P Partitioned table space  ' ",
                     "when 'Q' THEN 'Q Sequence                 ' ",
                     "when 'R' THEN 'R Table space              ' ",
                     "when 'S' THEN 'S Synonym                  ' ",
                     "when 'T' THEN 'T Table                    ' ",
                     "when 'U' THEN 'U Distinct type            ' ",
                     "when 'V' THEN 'V View                     ' ",
                     "when 'W' THEN 'W SYSTEM_TIME period       ' ",
                     "when 'Z' THEN 'Z BUSINESS_TIME period     ' ",
                     "when '0' THEN '0 Alias                    ' ",
                     "ELSE BTYPE concat ' UNBEKANNT ' END AS BTYPE",
                     ""
            End
           If NAME = 'DTYPE'    Then do
              name = "Case DTYPE                                  ",
                     "when 'B' THEN 'B Trigger                  ' ",
                     "when 'C' THEN 'C Generated column         ' ",
                     "when 'F' THEN 'F Function                 ' ",
                     "when 'I' THEN 'I Index                    ' ",
                     "when 'M' THEN 'M Materialized query table ' ",
                     "when 'O' THEN 'O Procedure                ' ",
                     "when 'V' THEN 'V View                     ' ",
                     "when 'X' THEN 'X Row permission           ' ",
                     "when 'Y' THEN 'Y Column mask              ' ",
                     "ELSE DTYPE concat ' UNBEKANNT ' END AS DTYPE",
                     ""
            End
       End
      otherwise NOP
    End

   TBCols   = TBCols || Komma || Name
   Komma    = ","
 END   /* END WHILE SQLCODE = 0 */
DROP NAME COLNO LENGTH2 COLTYPE
RETURN

LIST_SE:
CNR = 5
SNR = CNR

FROMLIST     = ""
WHERELIST    = ""
CALL MAKE_WHERELIST "SE.SCHEMA", DB2_CREATOR1
CALL MAKE_WHERELIST "SE.NAME", DB2_NAME1
CALL MAKE_WHERELIST "SDEP.DCREATOR", DB2_CREATOR2
CALL MAKE_WHERELIST "SDEP.DNAME", DB2_NAME2

IF LENGTH(STRIP(DB2_CREATOR4)) > 0 ,
 | LENGTH(STRIP(DB2_NAME4)) > 0 THEN DO
   FROMLIST = FROMLIST " INNER JOIN "SYSIBMS".SYSPACKDEP T2"
   FROMLIST = FROMLIST " ON  T2.BQUALIFIER = SE.SCHEMA "
   FROMLIST = FROMLIST " AND T2.BNAME   = SE.NAME   "
   IF LENGTH(DB2_CREATOR4) > 0 ,
    | LENGTH(DB2_NAME4) > 0 THEN DO
      CALL MAKE_WHERELIST "", "T2.BTYPE IN ('Q')"
      CALL MAKE_WHERELIST "T2.DCOLLID", DB2_CREATOR4
      CALL MAKE_WHERELIST "T2.DNAME", DB2_NAME4
    END
 END

SQLSTMT   =  "SELECT DISTINCT SE.SCHEMA         " ,
             "     , SE.NAME           " ,
             "     , SE.SEQTYPE        " ,
             "     , SDEP.DCREATOR     " ,
             "     , SDEP.DNAME        " ,
             "     , SDEP.DCOLNAME     " ,
             "     , SE.SEQUENCEID     " ,
             "     , SE.INCREMENT      " ,
             "     , SE.START          " ,
             "     , SE.MAXVALUE       " ,
             "     , SE.MINVALUE       " ,
             "     , SE.MAXASSIGNEDVAL " ,
             "     , SE.CYCLE          " ,
             "     , SE.CACHE          " ,
             "     , SE.ORDER          " ,
             "     , SE.DATATYPEID     " ,
             "     , SE.SOURCETYPEID   " ,
             "     , SE.PRECISION      " ,
             "     , SE.RESTARTWITH    " ,
             "     , SE.SEQSCHEMA      " ,
             "     , SE.SEQNAME        " ,
             "     , SE.CREATEDTS      " ,
             "     , SE.ALTEREDTS      " ,
             "     , SE.REMARKS        " ,
             "FROM "SYSIBMS".SYSSEQUENCES SE" ,
             FROMLIST ,
             "LEFT OUTER JOIN "SYSIBMS".SYSSEQUENCESDEP SDEP " ,
             " ON  SE.SEQUENCEID  = SDEP.BSEQUENCEID " ,
             WHERELIST ,
             "ORDER BY 1, 2              " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 9            /* SCHEMA                    */
OUTSQLDA.2.SQLLEN   = 25           /* NAME                      */
OUTSQLDA.4.SQLLEN   = 8            /* DCREATOR                  */
OUTSQLDA.5.SQLLEN   = 25           /* DNAME                     */
OUTSQLDA.6.SQLLEN   = 28           /* DCOLNAME                  */
OUTSQLDA.14.SQLTYPE = 500
OUTSQLDA.18.SQLTYPE = 496          /* PRECISION                 */
OUTSQLDA.18.SQLTYPE = 496          /* RESTARTWITH               */
OUTSQLDA.20.SQLLEN  = 10           /* SEQSCHEMA                 */
OUTSQLDA.21.SQLLEN  = 50           /* SEQNAME                   */
OUTSQLDA.24.SQLLEN  = 100          /* REMARKS                   */

DDLTEXT = DDLTEXT || "*UZ*"

DDLTEXT = DDLTEXT || SUBSTR("Sequence", 1, 30)
DDLTEXT = DDLTEXT SUBSTR("T",   1, 1)
DDLTEXT = DDLTEXT SUBSTR("ID",  1, 5)
DDLTEXT = DDLTEXT SUBSTR("MINVAL",  1,11)
DDLTEXT = DDLTEXT SUBSTR("MAXVAL",  1,20)
DDLTEXT = DDLTEXT SUBSTR("NEXTVAL",  1,15)
DDLTEXT = DDLTEXT SUBSTR("START  ",  1,15)
DDLTEXT = DDLTEXT SUBSTR("INCREMENT ", 1,15)
DDLTEXT = DDLTEXT SUBSTR("CYCLE", 1,5)
DDLTEXT = DDLTEXT SUBSTR("CACHE", 1,5)
DDLTEXT = DDLTEXT SUBSTR("ORDER", 1,5)

DDLTEXT = DDLTEXT SUBSTR("RESTARTWITH",1, 13)

call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3


    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

   IF IDCREATOR       < 0 THEN DCREATOR  = ""
   IF IDNAME          < 0 THEN DNAME     = ""
   IF iDCOLNAME       < 0 THEN DCOLNAME  = ""
   IF IMAXASSIGNEDVAL < 0 THEN MAXASSIGNEDVAL = ""

   LZEILE  = ''

   LZEILE = LZEILE || SUBSTR(Strip(SCHEMA) || "." || ,
                             Strip(NAME), 1, 30)
   LZEILE = LZEILE SUBSTR(SEQTYPE,1, 1)
   LZEILE = LZEILE SUBSTR(SEQUENCEID,1, 5)
   LZEILE = LZEILE SUBSTR(MINVALUE, 1, 11)
   LZEILE = LZEILE SUBSTR(MAXVALUE, 1, 20)
   LZEILE = LZEILE LEFT(MAXASSIGNEDVAL, 15, ' ')
   LZEILE = LZEILE LEFT(START         , 15, ' ')
   LZEILE = LZEILE LEFT(INCREMENT     , 15, ' ')
   LZEILE = LZEILE LEFT(CYCLE         , 5, ' ')
   LZEILE = LZEILE LEFT(CACHE         , 5, ' ')
   LZEILE = LZEILE SUBSTR(ORDER         , 1,  5)
   LZEILE = LZEILE SUBSTR(RESTARTWITH   , 1, 13)

   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

RETURN

LIST_XMLS:
CNR = 5
SNR = CNR

WHERELIST    = ""
if datatype(db2_name1) = "NUM" then do
   CALL MAKE_WHERELIST "STRINGID", DB2_NAME1, "NUM"
 end

SQLSTMT   =  "SELECT STRINGID  " ,
             "     , STRING    " ,
             "FROM "SYSIBMS".SYSXMLSTRINGS  " ,
             WHERELIST ,
             "ORDER BY 1, 2              " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.2.SQLLEN   =  59          /* STRING                    */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3


    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

RETURN

LIST_XO:
CNR = 1
SNR = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "O.XSROBJECTSCHEMA", DB2_CREATOR1
CALL MAKE_WHERELIST "O.XSROBJECTNAME", DB2_NAME1

if datatype(DB2_NAME2) = "NUM" then do
   CALL MAKE_WHERELIST "O.XSROBJECTID", DB2_NAME2, "NUM"
 end

if datatype(DB2_NAME3) = "NUM" then do
   CALL MAKE_WHERELIST "H.XSRCOMPONENTID", DB2_NAME3, "NUM"
 end

SQLSTMT   =  "SELECT DISTINCT O.XSROBJECTID    " ,
             "     , O.XSROBJECTSCHEMA         " ,
             "     , O.XSROBJECTNAME           " ,
             "     , O.TARGETNAMESPACE         " ,
             "     , O.SCHEMALOCATION          " ,
             "     , O.CREATEDBY               " ,
             "     , O.CREATEDTS               " ,
             "     , O.STATUS                  " ,
             "     , O.REMARKS                 " ,
             "     , O.RELCREATED              " ,
             "     , O.DECOMPOSITION           " ,
             "     , O.DECOMPOSITION_VERSION   " ,
             "FROM "SYSIBMS".XSROBJECTS O    " ,
             "INNER JOIN "SYSIBMS".XSROBJECTHIERARCHIES H  " ,
             "ON   O.XSROBJECTID    = H.XSROBJECTID        " ,
             WHERELIST ,
             "ORDER BY 1, 2              " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.2.SQLLEN   =  15          /* XSROBJECTSCHEMA           */
OUTSQLDA.3.SQLLEN   =  30          /* XSROBJECTNAME             */
OUTSQLDA.6.SQLLEN   =  10          /* XSROBJECTNAME             */
OUTSQLDA.12.SQLLEN  =  24          /* DECOMPOSITION_VERSION     */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3


    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

RETURN

LIST_XOC:
CNR = 5
SNR = CNR

WHERELIST    = ""
if datatype(DB2_NAME1) = "NUM" then do
   CALL MAKE_WHERELIST "C.XSRCOMPONENTID", DB2_NAME1, "NUM"
 end

if datatype(DB2_NAME2) = "NUM" then do
   CALL MAKE_WHERELIST "H.XSROBJECTID", DB2_NAME2, "NUM"
 end

SQLSTMT   =  "SELECT C.XSRCOMPONENTID  " ,
             "     , C.TARGETNAMESPACE " ,
             "     , C.SCHEMALOCATION  " ,
             "     , C.STATUS          " ,
             "     , C.RELCREATED      " ,
             "     , C.CREATEDTS       " ,
             "FROM "SYSIBMS".XSROBJECTCOMPONENTS C " ,
             "INNER JOIN "SYSIBMS".XSROBJECTHIERARCHIES H  " ,
             "ON   C.XSRCOMPONENTID = H.XSRCOMPONENTID     " ,
             WHERELIST ,
             "ORDER BY 1, 2              " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3


    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

RETURN


LIST_XOC_C:
CNR = 5
SNR = CNR

WHERELIST    = ""
if datatype(DB2_NAME1) = "NUM" then do
   CALL MAKE_WHERELIST "C.XSRCOMPONENTID", DB2_NAME1, "NUM"
 end


SQLSTMT   =  "SELECT C.COMPONENT       " ,
             "FROM "SYSIBMS".XSROBJECTCOMPONENTS C " ,
             WHERELIST ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3


    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

 END

CALL CLOSE_CURSOR_AC3

DB2_EDITSQL = "Y"
If DB2_FUNKTION = "DOCU" Then Do
   COMPONENT = Translate_Unicode(COMPONENT)
 End
SQLSTMT = Edit_SQL(COMPONENT, "XML")
DB2_EDITSQL = "N"

RETURN

LIST_XOH:
CNR = 5
SNR = CNR

WHERELIST    = ""
if datatype(db2_Creator1) = "NUM" then do
   CALL MAKE_WHERELIST "XSROBJECTID", DB2_Creator1, "NUM"
 end

if datatype(db2_name1) = "NUM" then do
   CALL MAKE_WHERELIST "XSRCOMPONENTID", DB2_NAME1, "NUM"
 end

SQLSTMT   =  "SELECT XSROBJECTID                   " ,
             "     , XSRCOMPONENTID                " ,
             "     , HTYPE                         " ,
             "     , TARGETNAMESPACE               " ,
             "     , SCHEMALOCATION                " ,
             "     , RELCREATED                    " ,
             "FROM "SYSIBMS".XSROBJECTHIERARCHIES  " ,
             WHERELIST ,
             "ORDER BY 1, 2              " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.2.SQLLEN   =  59          /* STRING                    */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3


    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

RETURN

LIST_TCO:
CNR = 20
SNR = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "SC.NAME", DB2_CREATOR1
CALL MAKE_WHERELIST "SC.CONTEXTID", DB2_CREATOR2, "NUM"

SQLSTMT   =  "SELECT NAME             " ,
             "     , CONTEXTID        " ,
             "     , DEFINER          " ,
             "     , DEFINERTYPE      " ,
             "     , SYSTEMAUTHID     " ,
             "     , DEFAULTROLE      " ,
             "     , OBJECTOWNERTYPE  " ,
             "     , CREATEDTS        " ,
             "     , ALTEREDTS        " ,
             "     , ENABLED          " ,
             "     , ALLOWPUBLIC      " ,
             "     , AUTHENTICATEPUBLIC " ,
             "     , RELCREATED       " ,
             "     , DEFAULTSECURITYLABEL " ,
             "     , REMARKS          " ,
             "FROM "SYSIBMS".SYSCONTEXT SC" ,
             WHERELIST ,
             "ORDER BY 1, 2              " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 27           /* NAME                      */
OUTSQLDA.3.SQLLEN   = 10           /* DEFINER                   */
OUTSQLDA.5.SQLLEN   = 18           /* SYSTEMAUTHID              */
OUTSQLDA.6.SQLLEN   = 18           /* DEFAULTROLE               */
OUTSQLDA.15.SQLLEN  = 75           /* REMARKS                   */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("Name", 1, 24)
DDLTEXT = DDLTEXT SUBSTR("ID",  1, 5)
DDLTEXT = DDLTEXT SUBSTR("DEFINER",  1,10)
DDLTEXT = DDLTEXT SUBSTR("DT",  1,2)
DDLTEXT = DDLTEXT SUBSTR("DROLE",  1,15)
DDLTEXT = DDLTEXT SUBSTR("E",  1,1)
DDLTEXT = DDLTEXT SUBSTR("AP",  1,2)
DDLTEXT = DDLTEXT SUBSTR("SecLab",  1,6)
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   CNR = 20
   SNR = CNR
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   LZEILE = LZEILE || SUBSTR(NAME, 1, 24)
   LZEILE = LZEILE SUBSTR(CONTEXTID,1, 5)
   LZEILE = LZEILE SUBSTR(DEFINER, 1, 10)
   LZEILE = LZEILE SUBSTR(DEFINERTYPE, 1, 2)
   LZEILE = LZEILE SUBSTR(DEFAULTROLE, 1, 15)
   LZEILE = LZEILE SUBSTR(ENABLED, 1, 1)
   LZEILE = LZEILE SUBSTR(ALLOWPUBLIC, 1, 2)
   LZEILE = LZEILE SUBSTR(DEFAULTSECURITYLABEL, 1, 6)
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

RETURN

LIST_UT:
CNR = 20
SNR = CNR

WHERELIST    = ""
If Such1 = "%.%" Then Such1 = "%"
CALL MAKE_WHERELIST "UT.USUUID", such1


SQLSTMT   =  "SELECT USUUID           " ,
             "     , USULSIZE         " ,
             "     , USULCURM         " ,
             "     , USUUTNAM         " ,
             "     , USUPHASE         " ,
             "     , USUDBNAM         " ,
             "     , USUSPNAM         " ,
             "     , USUJOBNM         " ,
             "     , USUAUID          " ,
             "     , USUDONE          " ,
             "     , USUMEMBR         " ,
             "     , USUSTATU         " ,
             "     , USURLOK          " ,
             "     , USUCMPOK         " ,
             "     , USUREL           " ,
             "     , USUIRQD          " ,
             "     , USURDATE         " ,
             "     , USUDSNU          " ,
             "     , USUDSNU2         " ,
             "     , USUTREQ          " ,
             "     , USUFORCE         " ,
             "     , USURSFLG         " ,
             "     , USURTFLG         " ,
             "     , USURSFLG2        " ,
             "     , USUPOS           " ,
             "     , HEX(USUCKSUM) AS USUCKSUM " ,
             "     , USUDBOB          " ,
             "     , USUPSID          " ,
             "     , USUPSDD          " ,
             "     , USUCATMGFRM      " ,
             "     , USOOFLAG         " ,
             "     , USUOCATR         " ,
             "     , USUOCATV         " ,
             "     , USUCATCV         " ,
             "     , USUOCATH         " ,
             "     , USURTIME         " ,
             "     , USURLSN          " ,
             "     , USURDATO         " ,
             "     , USURTIMO         " ,
             "     , USURLSNO         " ,
             "     , USUR5            " ,
             "     , USUCNTR          " ,
             "     , HEX(USURLSNX) AS USURLSNX " ,
             "     , HEX(USURLSOX) AS USURLSOX " ,
             "     , USUR6            " ,
             "FROM "SYSIBMS".SYSUTIL UT" ,
             WHERELIST ,
             "ORDER BY 1, 2              " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB


DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   CNR = 20
   SNR = CNR
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

   USURDATE     =  c2d(USURDATE         )
   USULSIZE     =  c2d(USULSIZE         )
   USULCURM     =  c2d(USULCURM         )
   USUDSNU      =  c2d(USUDSNU          )
   USUDSNU2     =  c2d(USUDSNU2         )
   USUTREQ      =  c2d(USUTREQ          )
   USUFORCE     =  c2d(USUFORCE         )
   USURSFLG     =  c2d(USURSFLG         )
   USURTFLG     =  c2d(USURTFLG         )
   USURSFLG2    =  c2d(USURSFLG2        )
   USUPOS       =  c2d(USUPOS           )
   USUDONE      =  c2d(USUDONE          )
   USUDBOB      =  c2d(USUDBOB          )
   USUPSID      =  c2d(USUPSID          )
   USUPSDD      =  c2d(USUPSDD          )
   USUCATMGFRM  =  c2d(USUCATMGFRM      )
   USOOFLAG     =  c2d(USOOFLAG         )
   USUOCATR     =  c2d(USUOCATR         )
   USUOCATV     =  c2d(USUOCATV         )
   USUCATCV     =  c2d(USUCATCV         )
   USUOCATH     =  c2d(USUOCATH         )
   USURTIME     =  c2d(USURTIME         )
   USURLSN      =  c2d(USURLSN          )
   USURDATO     =  c2d(USURDATO         )
   USURTIMO     =  c2d(USURTIMO         )
   USURLSNO     =  c2d(USURLSNO         )
   USUR5        =  c2d(USUR5            )
   USUCNTR      =  c2d(USUCNTR          )
   USUR6        =  c2d(USUR6            )

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

RETURN


LIST_TCOAUTH:
CNR = 1
SNR = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "CONTEXTID", DB2_CREATOR1, "NUM"

SQLSTMT   =  "SELECT CONTEXTID        " ,
             "     , AUTHID           " ,
             "     , AUTHENTICATE     " ,
             "     , ROLE             " ,
             "     , SECURITYLABEL    " ,
             "FROM "SYSIBMS".SYSCONTEXTAUTHIDS ",
             WHERELIST ,
             "ORDER BY 1, 2              " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.2.SQLLEN   = 20           /* AUTHID                    */
OUTSQLDA.3.SQLLEN   = 12           /* AUTHENTICATE              */
OUTSQLDA.4.SQLLEN   = 18           /* ROLE                      */
OUTSQLDA.5.SQLLEN   = 13           /* SECURITYLABEL             */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   CNR = 1
   SNR = CNR
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

RETURN

LIST_TCOATTR:
CNR = 1
SNR = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "CONTEXTID", DB2_CREATOR1, "NUM"

SQLSTMT   =  "SELECT CONTEXTID        " ,
             "     , NAME             " ,
             "     , VALUE            " ,
             "FROM "SYSIBMS".SYSCTXTTRUSTATTRS ",
             WHERELIST ,
             "ORDER BY 1, 2              " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.2.SQLLEN   = 20           /* NAME                      */
OUTSQLDA.3.SQLLEN   = 42           /* VALUE                     */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   CNR = 1
   SNR = CNR
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

RETURN

LIST_RT:
CNR = 5
SNR = CNR

FROMLIST     = ""
WHERELIST    = ""
CALL MAKE_WHERELIST "SCHEMA", DB2_CREATOR1
CALL MAKE_WHERELIST "NAME", DB2_NAME1
CALL MAKE_WHERELIST "ROUTINEID", DB2_NAME2, "NUM"
IF LENGTH(STRIP(DB2_CREATOR3)) > 0 ,
 | LENGTH(STRIP(DB2_NAME3)) > 0 THEN DO
   FROMLIST = FROMLIST "    , "SYSIBMS".SYSPACKDEP T2"
   CALL MAKE_WHERELIST "", "T2.DCOLLID = SCHEMA "
   CALL MAKE_WHERELIST "", "T2.DNAME   = NAME "
   IF LENGTH(DB2_CREATOR3) > 0 ,
    | LENGTH(DB2_NAME3) > 0 THEN DO
      PGSTMT = "'A','S','V','T','I','Q', 'R', 'P' "
      CALL MAKE_WHERELIST "", "T2.BTYPE IN ("PGSTMT")"
      CALL MAKE_WHERELIST "T2.BQUALIFIER", DB2_CREATOR3
      CALL MAKE_WHERELIST "T2.BNAME", DB2_NAME3
    END
 END

SQLSTMT   =  "SELECT DISTINCT SCHEMA    " ,
             "     , NAME      " ,
             "     , ROUTINETYPE      " ,
             "     , SPECIFICNAME     " ,
             "     , LANGUAGE         " ,
             "     , ROUTINEID        " ,
             "     , ORIGIN           " ,
             "     , FUNCTION_TYPE    " ,
             "     , PARM_COUNT       " ,
             "     , COLLID           " ,
             "     , SQL_DATA_ACCESS  " ,
             "     , DBINFO           " ,
             "     , WLM_ENVIRONMENT  " ,
             "     , WLM_ENV_FOR_NESTED",
             "     , PROGRAM_TYPE     " ,
             "     , EXTERNAL_SECURITY" ,
             "     , COMMIT_ON_RETURN " ,
             "     , RESULT_SETS      " ,
             "     , LOBCOLUMNS       " ,
             "     , EXTERNAL_NAME    " ,
             "     , PARAMETER_CCSID  " ,
             "     , VERSION          " ,
             "     , ACTIVE           " ,
             "     , DEBUG_MODE       " ,
             "     , TEXT_ENVID       " ,
             "     , RELCREATED       " ,
             "     , SECURE           " ,
             "     , SYSTEM_DEFINED   " ,
             "     , INLINE           " ,
             "     , PACKAGEPATH      " ,
             "     , RUNOPTS          " ,
             "     , REMARKS          " ,
             "FROM "SYSIBMS".SYSROUTINES " ,
             FROMLIST ,
             WHERELIST ,
             "ORDER BY 1, 2              " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 11           /* SCHEMA                    */
OUTSQLDA.2.SQLLEN   = 54           /* NAME                      */
OUTSQLDA.4.SQLLEN   = 62           /* SPECIFICNAME              */
OUTSQLDA.5.SQLLEN   = 15           /* LANGUAGE                  */
OUTSQLDA.10.SQLLEN  = 18           /* COLLID                    */
OUTSQLDA.13.SQLLEN  = 23           /* WLM_ENVIRONMENT           */
OUTSQLDA.14.SQLLEN  = 23           /* WLM_ENV_FOR_NESTED        */
OUTSQLDA.20.SQLLEN  = 23           /* EXTERNALNAME              */
OUTSQLDA.22.SQLLEN  = 30           /* VERSION                   */
OUTSQLDA.30.SQLLEN  = 57           /* PACKAGEPATH               */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("ROUTINE", 1, 27)
DDLTEXT = DDLTEXT SUBSTR("TP ",   1, 3)
DDLTEXT = DDLTEXT SUBSTR("SPEC.NAME",   1, 26)
DDLTEXT = DDLTEXT SUBSTR("LANG",  1, 8)
DDLTEXT = DDLTEXT RIGHT("ID", 4, ' ')
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

   RUNOPTS = Space(RUNOPTS, 0)
   LZEILE  = ''
   LZEILE = LZEILE || SUBSTR(Strip(SCHEMA) || "." || ,
                             Strip(NAME), 1, 27)
   LZEILE = LZEILE SUBSTR(ROUTINETYPE, 1, 3)
   LZEILE = LZEILE SUBSTR(SPECIFICNAME, 1, 26)
   LZEILE = LZEILE SUBSTR(LANGUAGE, 1,  8)
   LZEILE = LZEILE RIGHT(ROUTINEID, 4, ' ')
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

RETURN

LIST_IX:

WHERELIST    = ""
CALL MAKE_WHERELIST "IX.CREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "IX.NAME", DB2_NAME1
CALL MAKE_WHERELIST "IX.TBCREATOR", DB2_CREATOR2
CALL MAKE_WHERELIST "IX.TBNAME", DB2_NAME2
CALL MAKE_WHERELIST "IX.DBNAME", DB2_DATABASE
CALL MAKE_WHERELIST "IP.STORNAME", DB2_STORAGEGRP
CALL MAKE_WHERELIST "TB.DBNAME", DB2_CREATOR3
CALL MAKE_WHERELIST "TB.TSNAME", DB2_NAME3
CALL MAKE_WHERELIST "IX.BPOOL", DB2_NAME4
CALL MAKE_WHERELIST "IX.DBNAME", DB2_CREATOR5
CALL MAKE_WHERELIST "IX.INDEXSPACE", DB2_NAME5

SQLSTMT    = "SELECT  DISTINCT      " ,
             "        IX.CREATOR    " ,
             "      , IX.NAME       " ,
             "      , IX.TBCREATOR  " ,
             "      , IX.TBNAME     " ,
             "      , IX.BPOOL      " ,
             "      , IX.DBNAME     " ,
             "      , IX.INDEXSPACE " ,
             "      , IX.HASH       " ,
             "      , IX.CLUSTERING " ,
             "      , IX.CLUSTERED  " ,
             "      , IX.UNIQUERULE " ,
             "      , INT( IX.FULLKEYCARDF) AS FULLKEYCARD " ,
             "      , IX.CLOSERULE  " ,
             "      , IX.COPY       " ,
             "      , IX.PIECESIZE  " ,
             "      , IX.PADDED     " ,
             "      , IX.COMPRESS   " ,
             "      , IX.INDEXTYPE  " ,
             "      , IX.SPARSE     " ,
             "      , IX.VERSION    " ,
             "      , BIGINT(IX.CLUSTERRATIOF) AS CLUSTERRATIOF " ,
             "      , BIGINT(IX.FIRSTKEYCARDF) AS FIRSTKEYCARDF " ,
             "      , BIGINT(IX.FULLKEYCARDF)  AS FULLKEYCARDF  " ,
             "      , BIGINT(IX.NLEAF)         AS NLEAF         " ,
             "      , BIGINT(IX.NLEVELS)       AS NLEVELS       " ,
             "      , CASE IX_EXTENSION_TYPE                    " ,
             "        WHEN 'N' THEN 'N Node ID index '          " ,
             "        WHEN 'S' THEN 'S Index on a scalar expression'",
             "        WHEN 'T' THEN 'T Spatial index '          " ,
             "        WHEN 'V' THEN 'V XML Index     '          " ,
             "        WHEN ' ' THEN '  Simple index  '          " ,
             "        ELSE ' ' END AS  IX_EXTENSION_TYPE        " ,
             "      , ix.IX_EXTENSION_TYPE AS IX_EXTENSION_TYPE2" ,
             "      , ix.KEYTARGET_COUNT                        " ,
             "      , ix.UNIQUE_COUNT                           " ,
             "      , ix.REMARKS                                " ,
             "   , BIGINT(IX.DATAREPEATFACTORF) as DATAREPEATFACTORF ",
             "      ,  IX.CREATEDTS                             ",
             "      ,  IX.ALTEREDTS                             ",
             "FROM  "SYSIBMS".SYSINDEXES IX " ,
             "INNER JOIN  "SYSIBMS".SYSINDEXPART IP" ,
             " ON   IX.CREATOR   = IP.IXCREATOR " ,
             " AND  IX.NAME      = IP.IXNAME    " ,
             "INNER JOIN  "SYSIBMS".SYSTABLES TB" ,
             " ON   IX.TBCREATOR   = TB.CREATOR " ,
             " AND  IX.TBNAME      = TB.NAME    " ,
             WHERELIST ,
             "ORDER BY IX.CREATOR, IX.NAME" ,
             ""


CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* IXCREATOR                 */
OUTSQLDA.2.SQLLEN   = 30           /* IXNAME                    */
OUTSQLDA.3.SQLLEN   = 8            /* TBCREATOR                 */
OUTSQLDA.4.SQLLEN   = 28           /* TBNAME                    */
OUTSQLDA.6.SQLLEN   = 8            /* DBNAME                    */
OUTSQLDA.7.SQLLEN   = 11           /* INDEXSPACE                */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("IXNAME", 1, 25)
DDLTEXT = DDLTEXT || SUBSTR("TBNAME", 1, 25)
DDLTEXT = DDLTEXT || SUBSTR("BPOOL", 1, 8)
DDLTEXT = DDLTEXT || SUBSTR("U ", 1, 2)
DDLTEXT = DDLTEXT || SUBSTR("CL", 1, 2)
DDLTEXT = DDLTEXT || RIGHT("CARD",10, ' ')
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   XIXNAME = STRIP(CREATOR) || '.' || NAME
   XTBNAME = STRIP(TBCREATOR) || '.' || TBNAME
   LZEILE = LZEILE || SUBSTR(XIXNAME, 1, 25)
   LZEILE = LZEILE || SUBSTR(XTBNAME, 1, 25)
   LZEILE = LZEILE || SUBSTR(BPOOL, 1, 8)
   LZEILE = LZEILE || SUBSTR(UNIQUERULE, 1, 2)
   LZEILE = LZEILE || SUBSTR(CLUSTERING || ,
                             CLUSTERED,            1, 2)
   LZEILE = LZEILE || RIGHT(FULLKEYCARD,10, ' ')
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_KT:

WHERELIST    = ""
CALL MAKE_WHERELIST "KT.IXSCHEMA", DB2_CREATOR1
CALL MAKE_WHERELIST "KT.IXNAME", DB2_NAME1

SQLSTMT    = "SELECT    KT.IXNAME      " ,
             "        , KT.IXSCHEMA    " ,
             "        , KT.KEYSEQ      " ,
             "        , KT.COLNO       " ,
             "        , KT.ORDERING    " ,
             "        , KT.TYPESCHEMA  " ,
             "        , KT.TYPENAME    " ,
             "        , KT.LENGTH      " ,
             "        , KT.LENGTH2     " ,
             "        , KT.SCALE       " ,
             "        , KT.NULLS       " ,
             "        , KT.CCSID       " ,
             "        , KT.SUBTYPE     " ,
             "        , KT.STATS_FORMAT" ,
             "        , KT.DERIVED_FROM" ,
             "FROM  "SYSIBMS".SYSKEYTARGETS KT " ,
             WHERELIST ,
             "ORDER BY KT.IXSCHEMA, KT.IXNAME, KT.KEYSEQ " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 35           /* NAME                      */
OUTSQLDA.2.SQLLEN   = 10           /* SCHEMA                    */
OUTSQLDA.6.SQLLEN   = 10           /* TYPESCHEMA                */
OUTSQLDA.7.SQLLEN   = 23           /* TYPENAME                  */
OUTSQLDA.15.SQLLEN  = 256          /* DERIVED_FROM              */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("IXNAME", 1, 25)
DDLTEXT = DDLTEXT LEFT("SEQ", 3, ' ')
DDLTEXT = DDLTEXT RIGHT("O", 2, ' ')
DDLTEXT = DDLTEXT SUBSTR("TYPE ", 1, 8)
DDLTEXT = DDLTEXT RIGHT("DERIVED", 30, ' ')
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   XIXNAME = STRIP(IXSCHEMA) || '.' || IXNAME
   LZEILE = LZEILE || SUBSTR(XIXNAME, 1, 25)
   LZEILE = LZEILE RIGHT(KEYSEQ, 3, ' ' )
   LZEILE = LZEILE RIGHT(ORDERING, 2, ' ')
   LZEILE = LZEILE LEFT(TYPENAME, 8, ' ')
   LZEILE = LZEILE LEFT(DERIVED_FROM, 30, ' ')
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_IP:

WHERELIST    = ""
CALL MAKE_WHERELIST "IP.IXCREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "IP.IXNAME", DB2_NAME1
CALL MAKE_WHERELIST "IX.TBCREATOR", DB2_CREATOR2
CALL MAKE_WHERELIST "IX.TBNAME", DB2_NAME2

SQLSTMT    = "SELECT  IP.PARTITION                            " ,
             "      , IP.IXNAME                               " ,
             "      , IP.IXCREATOR                            " ,
             "      , INT(IP.CARDF) AS CARDF                  " ,
             "      , INT(IP.SPACEF) AS SPACEF                " ,
             "      , IP.EXTENTS                              " ,
             "      , STORNAME                                " ,
             "      , VCATNAME                                " ,
             "      , IX.DBNAME                               " ,
             "      , IX.INDEXSPACE                           " ,
             "     ,  CHAR(RTRIM(IP.VCATNAME)                        ",
             "     CONCAT '.'                                        ",
             "     CONCAT 'DSNDBC'                                   ",
             "     CONCAT '.'                                        ",
             "     CONCAT RTRIM(IX.DBNAME)                           ",
             "     CONCAT '.'                                        ",
             "     CONCAT RTRIM(IX.INDEXSPACE)                       ",
             "     CONCAT '.'                                        ",
             "     CONCAT RTRIM(IP.IPREFIX)                          ",
             "     CONCAT '0001'                                     ",
             "     CONCAT '.'                                        ",
             "     CONCAT 'A'                                        ",
             "     CONCAT CASE WHEN IP.PARTITION = 0 THEN '001'      ",
             "                 ELSE                                  ",
             "      CHAR(SUBSTR(DIGITS(INT(IP.PARTITION)), 8, 3), 3) ",
             "                END                                    ",
             "     , 44) AS VSAMDS                                   ",
             "      , CASE WHEN IP.PQTY < 0 THEN IP.PQTY      " ,
             "             ELSE IP.PQTY * 4 END AS PQTY       " ,
             "      , CASE WHEN IP.SQTY < 0 THEN IP.SQTY      " ,
             "             ELSE IP.SQTY * 4 END AS SQTY       " ,
             "      , IP.FREEPAGE                             " ,
             "      , IP.PCTFREE                              " ,
             "      , ST.SPACE / 1024 AS SPACE_MB             " ,
             "      , ST.LASTUSED                             " ,
             "FROM  "SYSIBMS".SYSINDEXPART IP " ,
             "INNER JOIN "SYSIBMS".SYSINDEXES IX" ,
             " ON   IX.CREATOR   = IP.IXCREATOR ",
             " AND  IX.NAME      = IP.IXNAME    ",
             "INNER JOIN "SYSIBMS".SYSINDEXSPACESTATS ST",
             " ON   IP.IXCREATOR = ST.CREATOR   ",
             " AND  IP.IXNAME    = ST.NAME      ",
             " AND  IP.PARTITION = ST.PARTITION ",
             WHERELIST ,
             "ORDER BY IP.IXCREATOR, IP.IXNAME, IP.PARTITION" ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.2.SQLLEN   = 25           /* NAME                      */
OUTSQLDA.3.SQLLEN   = 8            /* CREATOR                   */
OUTSQLDA.7.SQLLEN   = 11           /* STORNAME                  */
OUTSQLDA.8.SQLLEN   = 8            /* VCATNAME                  */
OUTSQLDA.9.SQLLEN   = 8            /* DBNAME                    */
OUTSQLDA.10.SQLLEN  = 8            /* INDEXSPACE                */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("IXNAME", 1, 25)
DDLTEXT = DDLTEXT RIGHT("PART", 4, ' ')
DDLTEXT = DDLTEXT RIGHT("CARD", 8, ' ')
DDLTEXT = DDLTEXT LEFT("STORNAME", 8, ' ')
DDLTEXT = DDLTEXT LEFT("VCAT", 8, ' ')
DDLTEXT = DDLTEXT RIGHT("SPACE", 9, ' ')
DDLTEXT = DDLTEXT RIGHT("EXT", 4, ' ')
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   XIXNAME = STRIP(IXCREATOR) || '.' || IXNAME
   LZEILE = LZEILE || SUBSTR(XIXNAME, 1, 25)
   LZEILE = LZEILE RIGHT(PARTITION, 4, ' ')
   LZEILE = LZEILE RIGHT(CARDF, 8, ' ')
   LZEILE = LZEILE  LEFT(STORNAME, 8, ' ')
   LZEILE = LZEILE  LEFT(VCATNAME, 8, ' ')
   LZEILE = LZEILE RIGHT(SPACEF, 9, ' ')
   LZEILE = LZEILE RIGHT(EXTENTS, 4, ' ')
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_TP:

WHERELIST    = ""
CALL MAKE_WHERELIST "TP.DBNAME", DB2_CREATOR1
CALL MAKE_WHERELIST "TP.TSNAME", DB2_NAME1

SQLSTMT    = "SELECT  TP.PARTITION                            " ,
             "      , TP.DBNAME                               " ,
             "      , TP.TSNAME                               " ,
             "     ,  CHAR(RTRIM(TP.VCATNAME)                        ",
             "     CONCAT '.'                                        ",
             "     CONCAT 'DSNDBC'                                   ",
             "     CONCAT '.'                                        ",
             "     CONCAT RTRIM(TS.DBNAME)                           ",
             "     CONCAT '.'                                        ",
             "     CONCAT RTRIM(TS.NAME)                             ",
             "     CONCAT '.'                                        ",
             "     CONCAT RTRIM(TP.IPREFIX)                          ",
             "     CONCAT CHAR(SUBSTR(DIGITS(TS.INSTANCE), 2,4), 4)  ",
             "     CONCAT '.'                                        ",
             "     CONCAT 'A'                                        ",
             "     CONCAT CASE WHEN TP.PARTITION = 0 THEN '001'      ",
             "                 ELSE                                  ",
             "      CHAR(SUBSTR(DIGITS(INT(TP.PARTITION)), 8, 3), 3) ",
             "                END                                    ",
             "      , 44) AS VSAMDS                                  ",
             "      , COMPRESS                                " ,
             "      , INT(TP.CARDF)  AS CARDF                 " ,
             "      , INT(TP.SPACEF) AS SPACEF                " ,
             "      , STORNAME                                " ,
             "      , VCATNAME                                " ,
             "      , CASE WHEN    PQTY < 0 THEN    PQTY      " ,
             "             ELSE    PQTY * 4 END AS PQTY       " ,
             "      , CASE WHEN    SQTY < 0 THEN    SQTY      " ,
             "             ELSE    SQTY * 4 END AS SQTY       " ,
             "      , IPREFIX                                 " ,
             "      , TP.AVGROWLEN                            " ,
             "      , TP.FORMAT                               " ,
             "      , LIMITKEY                                " ,
             "      , ST.SPACE / 1024 AS SPACE_MB             " ,
             "FROM  "SYSIBMS".SYSTABLEPART TP " ,
             "INNER JOIN "SYSIBMS".SYSTABLESPACE TS ",
             " ON   TS.DBNAME   = TP.DBNAME     ",
             " AND  TS.NAME     = TP.TSNAME     ",
             "INNER JOIN "SYSIBMS".SYSTABLESPACESTATS ST" ,
             " ON   TP.DBNAME    = ST.DBNAME     ",
             " AND  TP.TSNAME    = ST.NAME       ",
             " AND  TP.PARTITION = ST.PARTITION  ",
             WHERELIST ,
             "ORDER BY TP.DBNAME, TP.TSNAME, TP.PARTITION" ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.2.SQLLEN   = 8            /* DBNAME                    */
OUTSQLDA.3.SQLLEN   = 8            /* TSNAME                    */
OUTSQLDA.8.SQLLEN   = 8            /* STORNAME                  */
OUTSQLDA.9.SQLLEN   = 8            /* VCATNAME                  */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("TSNAME", 1, 24)
DDLTEXT = DDLTEXT RIGHT("PART", 4, ' ')
DDLTEXT = DDLTEXT RIGHT("CARD", 9, ' ')
DDLTEXT = DDLTEXT RIGHT("SPACE", 9, ' ')
DDLTEXT = DDLTEXT RIGHT("PQTY", 8, ' ')
DDLTEXT = DDLTEXT RIGHT("SQTY", 8, ' ')
DDLTEXT = DDLTEXT RIGHT("CMP", 4, ' ')
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   XTSNAME = STRIP(DBNAME) || '.' || TSNAME
   LZEILE = LZEILE || SUBSTR(XTSNAME, 1, 24)
   LZEILE = LZEILE RIGHT(PARTITION, 4, ' ')
   LZEILE = LZEILE RIGHT(CARDF, 9, ' ')
   LZEILE = LZEILE RIGHT(SPACEF, 9, ' ')
   LZEILE = LZEILE RIGHT(PQTY              , 8, ' ')
   LZEILE = LZEILE RIGHT(SQTY              , 8, ' ')
   LZEILE = LZEILE RIGHT(COMPRESS, 4, ' ')
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_CK:

WHERELIST    = ""
CALL MAKE_WHERELIST "TBOWNER", DB2_CREATOR1
CALL MAKE_WHERELIST "TBNAME", DB2_NAME1
CALL MAKE_WHERELIST "CHECKNAME", DB2_NAME2

SQLSTMT    = "SELECT T1.TBOWNER               ",
             "     , T1.TBNAME                ",
             "     , T1.CHECKNAME             ",
             "     , T1.DBID                  ",
             "     , T1.OBID                  ",
             "     , T1.CREATOR               ",
             "     , HEX(T1.RBA) AS RBA       ",
             "     , T1.IBMREQD               ",
             "     , T1.RELCREATED            ",
             "     , T1.ENVID                 ",
             "     , T1.TIMESTAMP             ",
             "     , T1.CHECKCONDITION        ",
             "FROM  "SYSIBMS".SYSCHECKS T1 " ,
             WHERELIST ,
             "ORDER BY T1.TBOWNER, T1.TBNAME, T1.CHECKNAME " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* TBOWNER                   */
OUTSQLDA.2.SQLLEN   = 20           /* TBNAME                    */
OUTSQLDA.3.SQLLEN   = 25           /* CHECKNAME                 */
OUTSQLDA.6.SQLLEN   = 8            /* CREATOR                   */
OUTSQLDA.12.SQLLEN  = 70           /* CHECKCONDITION            */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END


CALL CLOSE_CURSOR_AC3
RETURN

LIST_KC:

WHERELIST    = ""
CALL MAKE_WHERELIST "KC.IXCREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "KC.IXNAME", DB2_NAME1
CALL MAKE_WHERELIST "IX.TBCREATOR", DB2_CREATOR2
CALL MAKE_WHERELIST "IX.TBNAME", DB2_NAME2
CALL MAKE_WHERELIST "TB.DBNAME", DB2_CREATOR3
CALL MAKE_WHERELIST "TB.TSNAME", DB2_NAME3

SQLSTMT    = "SELECT KC.IXNAME                ",
             "     , KC.IXCREATOR             ",
             "     , KC.COLNAME               ",
             "     , KC.COLNO                 ",
             "     , KC.COLSEQ                ",
             "     , KC.ORDERING              ",
             "     , IX.TBCREATOR             ",
             "     , IX.TBNAME                ",
             "     , IX.ISOBID                ",
             "     , CO.COLTYPE               ",
             "     , CO.LENGTH                " ,
             "     , CO.SCALE                 " ,
             "     , BIGINT(CO.COLCARDF) AS COLCARD " ,
             "     , CO.NULLS                 " ,
             "     , CO.DEFAULT               " ,
             "FROM  "SYSIBMS".SYSKEYS KC " ,
             "INNER JOIN "SYSIBMS".SYSINDEXES IX ",
             "ON  KC.IXCREATOR  = IX.CREATOR  ",
             "AND KC.IXNAME     = IX.NAME     ",
             "INNER JOIN "SYSIBMS".SYSCOLUMNS CO ",
             "ON  IX.TBCREATOR  = CO.TBCREATOR  ",
             "AND IX.TBNAME     = CO.TBNAME     ",
             "AND KC.COLNAME    = CO.NAME       ",
             "INNER JOIN "SYSIBMS".SYSTABLES TB ",
             "ON  IX.TBCREATOR  = TB.CREATOR    ",
             "AND IX.TBNAME     = TB.NAME       ",
             WHERELIST ,
             "ORDER BY TB.CREATOR, TB.NAME      " ,
             "       , KC.IXCREATOR, KC.IXNAME, KC.COLSEQ" ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 27           /* IXNAME                   */
OUTSQLDA.2.SQLLEN   = 8            /* IXCREATOR                */
OUTSQLDA.3.SQLLEN   = 27           /* COLNAME                  */
OUTSQLDA.7.SQLLEN   = 8            /* TBCREATOR                */
OUTSQLDA.8.SQLLEN   = 27           /* TBNAME                   */
OUTSQLDA.10.SQLLEN  = 12           /* TBNAME                   */
OUTSQLDA.13.SQLLEN  = 18           /* COLCARDF                 */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || RIGHT("ISOB", 4, ' ')
DDLTEXT = DDLTEXT RIGHT("SEQ", 3, ' ')
DDLTEXT = DDLTEXT SUBSTR("O", 1, 1)
DDLTEXT = DDLTEXT SUBSTR("Colname", 1, 25)
DDLTEXT = DDLTEXT SUBSTR("Coltype", 1, 10)
DDLTEXT = DDLTEXT RIGHT("Len", 9, ' ')
DDLTEXT = DDLTEXT RIGHT("ColCardf", 9, ' ')
DDLTEXT = DDLTEXT SUBSTR("ND ", 1, 4)
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   IXN = Strip(IXCREATOR || '.' || IXNAME )
   TBN = Strip(TBCREATOR || '.' || TBNAME )

   If TYPENAME = 'DECIMAL' Then do
        Len = LENGTH || "," Scale
    End
   Else Do
        Len = LENGTH
    End
   LZEILE  = ''
   LZEILE = LZEILE || Right(ISOBID, 4, ' ')
   LZEILE = LZEILE Right(ColSeq, 3, ' ')
   LZEILE = LZEILE SUBSTR(ORDERING, 1)
   LZEILE = LZEILE SUBSTR(COLNAME, 1, 25)
   LZEILE = LZEILE SUBSTR(COLTYPE, 1, 10)
   LZEILE = LZEILE RIGHT(LEN, 9, ' ')
   LZEILE = LZEILE Right(COLCARD,            9, ' ')
   LZEILE = LZEILE SUBSTR(NULLS            ,  1, 1)
   LZEILE = LZEILE || SUBSTR(DEFAULT,            1, 3)
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_SR:

WHERELIST    = ""

CALL MAKE_WHERELIST "CHAR(OUTCCSID)", DB2_CREATOR1
CALL MAKE_WHERELIST "CHAR(INCCSID)", DB2_NAME1

SQLSTMT    = "SELECT INCCSID              " ,
             "     , OUTCCSID             " ,
             "     , TRANSTYPE            " ,
             "     , ERRORBYTE            " ,
             "     , SUBBYTE              " ,
             "     , TRANSPROC            " ,
             "     , IBMREQD              " ,
             "     , TRANSTAB             " ,
             "FROM  "SYSIBMS".SYSSTRINGS T1 " ,
             WHERELIST ,
             "ORDER BY INCCSID, OUTCCSID " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("Source", 1, 6)
DDLTEXT = DDLTEXT || SUBSTR("Target", 1, 6)
DDLTEXT = DDLTEXT || SUBSTR("Ty", 1, 2)
DDLTEXT = DDLTEXT || SUBSTR("E", 1, 1)
DDLTEXT = DDLTEXT || SUBSTR("S", 1, 1)
DDLTEXT = DDLTEXT || SUBSTR("Proc ", 1, 8)
DDLTEXT = DDLTEXT || SUBSTR("Tab ", 1, 49)
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   LZEILE = LZEILE || SUBSTR(Inccsid, 1, 6)
   LZEILE = LZEILE || SUBSTR(Outccsid, 1, 6)
   LZEILE = LZEILE || SUBSTR(Transtype, 1, 2)
   LZEILE = LZEILE || SUBSTR(Errorbyte, 1, 1)
   LZEILE = LZEILE || SUBSTR(Subbyte, 1, 1)
   LZEILE = LZEILE || SUBSTR(Transproc, 1, 8)
   LZEILE = LZEILE || RIGHT(Transtab, 49, ' ')
   CALL ADD_TABLE
 END


CALL CLOSE_CURSOR_AC3
RETURN

LIST_VW:

WHERELIST    = ""
CALL MAKE_WHERELIST "VD.DCREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "VD.DNAME", DB2_NAME1
CALL MAKE_WHERELIST "VD.BCREATOR", DB2_CREATOR2
CALL MAKE_WHERELIST "VD.BNAME", DB2_NAME2
/* CALL MAKE_WHERELIST "", "BTYPE = 'V'" */

SQLSTMT   =  "SELECT VD.DCREATOR " ,
             "     , VD.DNAME    " ,
             "     , VD.BTYPE    " ,
             "     , VD.BCREATOR " ,
             "     , VD.BNAME    " ,
             "     , TB.REMARKS  " ,
             "     , TB.LABEL    " ,
             "FROM "SYSIBMS".SYSVIEWDEP VD" ,
             "INNER JOIN "SYSIBMS".SYSTABLES TB " ,
             "ON   VD.DCREATOR  = TB.CREATOR    " ,
             "AND  VD.DNAME     = TB.NAME       " ,
             WHERELIST ,
             "ORDER BY VD.DCREATOR, VD.DNAME" ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("VIEW NAME", 1, 30)
DDLTEXT = DDLTEXT SUBSTR("TY ", 1, 3)
DDLTEXT = DDLTEXT || SUBSTR("BNAME", 1, 30)
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   XTBNAME = STRIP(DCREATOR) || '.' || ,
             DNAME
   LZEILE = LZEILE || SUBSTR(XTBNAME, 1, 30)
   LZEILE = LZEILE SUBSTR(BTYPE, 1, 3)
   XTBNAME = STRIP(BCREATOR) || '.' || ,
             BNAME
   LZEILE = LZEILE || SUBSTR(XTBNAME, 1, 30)
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_TG:

WHERELIST    = ""
CALL MAKE_WHERELIST "SCHEMA", DB2_CREATOR1
CALL MAKE_WHERELIST "NAME", DB2_NAME1

SELECT
  When  length(DB2_CREATOR3) > 0 ,
      | length(DB2_NAME3)    > 0 Then do
     WHERELIST    = ""
     CALL MAKE_WHERELIST "SCHEMA", DB2_CREATOR1
     CALL MAKE_WHERELIST "NAME", DB2_NAME1
     CALL MAKE_WHERELIST "BQUALIFIER", DB2_CREATOR3
     CALL MAKE_WHERELIST "BNAME", DB2_NAME3
     SQLSTMT    = "SELECT  DISTINCT TG.NAME      ",
                  "      , TG.SCHEMA             ",
                  "      , TG.TBNAME             ",
                  "      , TG.TBOWNER            ",
                  "      , TG.TRIGTIME           ",
                  "      , TG.TRIGEVENT          ",
                  "      , TG.TRIGNAME           ",
                  "      , TG.GRANULARITY        ",
                  "      , TG.SECURE             ",
                  "      , TG.SQLPL              ",
                  "      , TG.DEBUG_MODE         ",
                  "      , TG.OWNER              ",
                  "      , TG.CREATEDBY          ",
                  "      , TG.ASUTIME            ",
                  "      , TG.WLM_ENVIRONMENT    ",
                  "      , TG.CREATEDTS          ",
                  "      , TG.ALTEREDTS          ",
                  "      , TG.REMARKS            ",
                  "FROM  "SYSIBMS".SYSTRIGGERS TG" ,
                  "INNER JOIN "SYSIBMS".SYSPACKDEP PD" ,
                  " ON   PD.DCOLLID = TG.SCHEMA        " ,
                  " AND  PD.DNAME = TG.NAME           " ,
                  WHERELIST ,
                  "ORDER BY SCHEMA, NAME" ,
                  ""
   end
  When  length(DB2_CREATOR2) > 0 ,
      | length(DB2_NAME2)    > 0 Then do
     WHERELIST    = ""
     CALL MAKE_WHERELIST "TBOWNER", DB2_CREATOR2
     CALL MAKE_WHERELIST "TBNAME", DB2_NAME2
     SQLSTMT    = "SELECT  DISTINCT TG.NAME      ",
                  "      , TG.SCHEMA             ",
                  "      , TG.TBNAME             ",
                  "      , TG.TBOWNER            ",
                  "      , TG.TRIGTIME           ",
                  "      , TG.TRIGEVENT          ",
                  "      , TG.TRIGNAME           ",
                  "      , TG.GRANULARITY        ",
                  "      , TG.SECURE             ",
                  "      , TG.SQLPL              ",
                  "      , TG.DEBUG_MODE         ",
                  "      , TG.OWNER              ",
                  "      , TG.CREATEDBY          ",
                  "      , TG.ASUTIME            ",
                  "      , TG.WLM_ENVIRONMENT    ",
                  "      , TG.CREATEDTS          ",
                  "      , TG.ALTEREDTS          ",
                  "      , TG.REMARKS            ",
                  "FROM  "SYSIBMS".SYSTRIGGERS  TG" ,
                  WHERELIST ,
                  "ORDER BY SCHEMA, NAME" ,
                  ""
   end
  Otherwise Do
     SQLSTMT    = "SELECT  DISTINCT TG.NAME      ",
                  "      , TG.SCHEMA             ",
                  "      , TG.TBNAME             ",
                  "      , TG.TBOWNER            ",
                  "      , TG.TRIGTIME           ",
                  "      , TG.TRIGEVENT          ",
                  "      , TG.TRIGNAME           ",
                  "      , TG.GRANULARITY        ",
                  "      , TG.SECURE             ",
                  "      , TG.SQLPL              ",
                  "      , TG.DEBUG_MODE         ",
                  "      , TG.OWNER              ",
                  "      , TG.CREATEDBY          ",
                  "      , TG.ASUTIME            ",
                  "      , TG.WLM_ENVIRONMENT    ",
                  "      , TG.CREATEDTS          ",
                  "      , TG.ALTEREDTS          ",
                  "      , TG.REMARKS            ",
                  "FROM  "SYSIBMS".SYSTRIGGERS  TG" ,
                  WHERELIST ,
                  "ORDER BY SCHEMA, NAME" ,
                  ""
   end
end

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 33           /* NAME                      */
OUTSQLDA.2.SQLLEN   = 8            /* SCHEMA                    */
OUTSQLDA.3.SQLLEN   = 27           /* TBNAME                    */
OUTSQLDA.4.SQLLEN   = 8            /* TBSCHEMA                  */
OUTSQLDA.7.SQLLEN   = 23           /* TRIGNAME                  */
OUTSQLDA.12.SQLLEN  = 8            /* OWNER                     */
OUTSQLDA.13.SQLLEN  = 8            /* CREATEDBY                 */
OUTSQLDA.15.SQLLEN  = 23           /* WLM_ENVIRNONMENT          */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("TRIGGER NAME ", 1, 27)
DDLTEXT = DDLTEXT || SUBSTR("TABLE NAME", 1, 27)
DDLTEXT = DDLTEXT SUBSTR("T", 1, 1)
DDLTEXT = DDLTEXT SUBSTR("E", 1, 1)
DDLTEXT = DDLTEXT SUBSTR("G", 1, 1 )
DDLTEXT = DDLTEXT SUBSTR(" ", 1, 11)
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   XTBNAME = STRIP(SCHEMA) || '.' || ,
             NAME
   LZEILE = LZEILE || SUBSTR(XTBNAME, 1, 27)
   XTBNAME = STRIP(TBOWNER) || '.' || ,
             TBNAME
   LZEILE = LZEILE || SUBSTR(XTBNAME, 1, 27)
   LZEILE = LZEILE SUBSTR(TRIGTIME, 1, 1)
   LZEILE = LZEILE SUBSTR(TRIGEVENT, 1, 1)
   LZEILE = LZEILE SUBSTR(GRANULARITY, 1, 1 )
   LZEILE = LZEILE SUBSTR(' '                  , 1, 11)
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_FK:

WHERELIST    = ""
CALL MAKE_WHERELIST "T1.CREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "T1.RELNAME", DB2_NAME1
CALL MAKE_WHERELIST "T1.CREATOR", DB2_CREATOR2
CALL MAKE_WHERELIST "T1.TBNAME", DB2_NAME2
CALL MAKE_WHERELIST "T1.REFTBCREATOR", DB2_CREATOR3
CALL MAKE_WHERELIST "T1.REFTBNAME", DB2_NAME3

SQLSTMT   =  "SELECT CREATOR            ",
             "    ,  TBNAME             ",
             "    ,  RELNAME            ",
             "    ,  REFTBCREATOR       ",
             "    ,  REFTBNAME          ",
             "    ,  COLCOUNT           ",
             "    ,  DELETERULE         ",
             "    ,  ENFORCED           ",
             "    ,  RELOBID1           ",
             "    ,  RELOBID2           ",
             "    ,  IXOWNER            ",
             "    ,  IXNAME             ",
             "    ,  ENFORCED           ",
             "    ,  CHECKEXISTINGDATA  ",
             "    ,  TIMESTAMP          ",
             " FROM "SYSIBMS".SYSRELS T1 ",
             WHERELIST  ,
             " ORDER BY TIMESTAMP,RELOBID1,RELOBID2"

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* CREATOR                   */
OUTSQLDA.2.SQLLEN   = 32           /* NAME                      */
OUTSQLDA.3.SQLLEN   = 30           /* RELNAME                   */
OUTSQLDA.4.SQLLEN   = 8            /* REFTBCREATOR              */
OUTSQLDA.5.SQLLEN   = 35           /* REFTBNAME                 */
OUTSQLDA.10.SQLLEN   = 12          /* RELOBID2                  */
OUTSQLDA.11.SQLLEN   = 8           /* IXOWNER                   */
OUTSQLDA.12.SQLLEN   = 42          /* IXNAME                    */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''

   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_DT:

WHERELIST    = ""
CALL MAKE_WHERELIST "SCHEMA", DB2_CREATOR1
CALL MAKE_WHERELIST "NAME", DB2_NAME1

SQLSTMT    = "SELECT  SCHEMA            ",
             "      , OWNER             ",
             "      , NAME              ",
             "      , CREATEDBY         ",
             "      , SOURCESCHEMA      ",
             "      , SOURCETYPE        ",
             "      , METATYPE          ",
             "      , DATATYPEID        ",
             "      , SOURCETYPEID      ",
             "      , LENGTH            ",
             "      , SCALE             ",
             "      , SUBTYPE           ",
             "      , CREATEDTS         ",
             "      , ENCODING_SCHEME   ",
             "      , IBMREQD           ",
             "      , REMARKS           ",
             "      , OWNERTYPE         ",
             "      , RELCREATED        ",
             "      , INLINE_LENGTH     ",
             "      , ARRAYLENGTH       ",
             "      , ARRAYINDEXTYPEID  ",
             "      , ARRAYINDEXTYPELEN ",
             "      , ARRAYINDEXSUBTYPE ",
             "FROM  "SYSIBMS".SYSDATATYPES " ,
             WHERELIST ,
             "ORDER BY SCHEMA, NAME" ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* SCHEMA                    */
OUTSQLDA.2.SQLLEN   = 8            /* OWNER                     */
OUTSQLDA.3.SQLLEN   = 27           /* NAME                      */
OUTSQLDA.4.SQLLEN   = 8            /* CREATEDBY                 */
OUTSQLDA.5.SQLLEN   = 8            /* SOURCESCHEMA              */
OUTSQLDA.6.SQLLEN   = 10           /* SOURCETYPE                */
OUTSQLDA.16.SQLLEN  = 30           /* REMARKS                   */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("TYPE NAME", 1, 31)
DDLTEXT = DDLTEXT LEFT("CREA-BY", 8)
DDLTEXT = DDLTEXT SUBSTR("M", 1, 1)
DDLTEXT = DDLTEXT RIGHT("TYID",4,' ')
DDLTEXT = DDLTEXT RIGHT("STYPE",9 ,' ')
DDLTEXT = DDLTEXT RIGHT("LEN",8,' ')
DDLTEXT = DDLTEXT RIGHT("SCALE",5,' ')
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   XTBNAME = STRIP(SCHEMA) || '.' || ,
             NAME
   LZEILE = LZEILE || SUBSTR(XTBNAME, 1, 31)
   LZEILE = LZEILE LEFT(CREATEDBY, 8)
   LZEILE = LZEILE SUBSTR(METATYPE, 1, 1)
   LZEILE = LZEILE RIGHT(DATATYPEID,4,' ')
   LZEILE = LZEILE RIGHT(SOURCETYPE, 9,' ')
   LZEILE = LZEILE RIGHT(LENGTH,8,' ')
   LZEILE = LZEILE RIGHT(SCALE,5,' ')
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_SY:

WHERELIST    = ""
CALL MAKE_WHERELIST "CREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "NAME", DB2_NAME1
CALL MAKE_WHERELIST "TBCREATOR", DB2_CREATOR2
CALL MAKE_WHERELIST "TBNAME", DB2_NAME2

SQLSTMT   =  "SELECT CREATOR           "  ,
             "     , NAME              "  ,
             "     , TBCREATOR         "  ,
             "     , TBNAME            "  ,
             "     , CREATEDBY         "  ,
             "     , CREATORTYPE       "  ,
             "     , RELCREATED        "  ,
             "     , CREATEDTS         "  ,
             "FROM "SYSIBMS".SYSSYNONYMS T2 ",
             WHERELIST ,
             "ORDER BY CREATOR, NAME" ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB
OUTSQLDA.1.SQLLEN   = 8            /* CREATOR                   */
OUTSQLDA.2.SQLLEN   = 26           /* NAME                      */
OUTSQLDA.3.SQLLEN   = 8            /* TBCREATOR                 */
OUTSQLDA.4.SQLLEN   = 26           /* TBNAME                    */
OUTSQLDA.5.SQLLEN   = 9            /* CREATEDBY                 */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END


CALL CLOSE_CURSOR_AC3
RETURN

LIST_TBA:

WHERELIST    = ""
CALL MAKE_WHERELIST "TCREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "TTNAME", DB2_NAME1

SQLSTMT    = "SELECT DISTINCT GRANTOR   " ,
             "    ,  GRANTEE            " ,
             "    ,  GRANTEETYPE        " ,
             "    ,  DBNAME             " ,
             "    ,  SCREATOR           " ,
             "    ,  STNAME             " ,
             "    ,  TCREATOR           " ,
             "    ,  TTNAME             " ,
             "    ,  AUTHHOWGOT         " ,
             "    ,  SELECTAUTH         " ,
             "    ,  INSERTAUTH         " ,
             "    ,  UPDATEAUTH         " ,
             "    ,  DELETEAUTH         " ,
             "    ,  ALTERAUTH          " ,
             "    ,  INDEXAUTH          " ,
             "    ,  REFERENCESAUTH     " ,
             "    ,  TRIGGERAUTH        " ,
             "    ,  UPDATECOLS         " ,
             "    ,  GRANTEELOCATION    " ,
             "    ,  LOCATION           " ,
             "    ,  COLLID             " ,
             "    ,  CAPTUREAUTH        " ,
             "    ,  REFCOLS            " ,
             "    ,  GRANTORTYPE        " ,
             "FROM "SYSIBMS".SYSTABAUTH TA " ,
             WHERELIST ,
             "ORDER BY TCREATOR, TTNAME" ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* GRANTOR                   */
OUTSQLDA.2.SQLLEN   = 8            /* GRANTEE                   */
OUTSQLDA.4.SQLLEN   = 8            /* DBNAME                    */
OUTSQLDA.5.SQLLEN   = 8            /* SCREATOR                  */
OUTSQLDA.6.SQLLEN   = 30           /* STNAME                    */
OUTSQLDA.7.SQLLEN   = 8            /* TCREATOR                  */
OUTSQLDA.8.SQLLEN   = 26           /* TTNAME                    */
OUTSQLDA.18.SQLLEN  = 19           /* UPDATECOLS                */
OUTSQLDA.19.SQLLEN  = 8            /* GRANTEELOCATION           */
OUTSQLDA.20.SQLLEN  = 10           /* LOCATION                  */
OUTSQLDA.21.SQLLEN  = 10           /* COLLID                    */
OUTSQLDA.22.SQLLEN  = 8            /* CAPTUREAUTH               */
OUTSQLDA.23.SQLLEN  = 17           /* REFCOLS                   */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || LEFT("NAME ", 27)
DDLTEXT = DDLTEXT LEFT("GRANTOR", 8)
DDLTEXT = DDLTEXT LEFT("GRANTEE", 8)
DDLTEXT = DDLTEXT LEFT("GT", 2)
DDLTEXT = DDLTEXT LEFT("SE", 2)
DDLTEXT = DDLTEXT LEFT("IN", 2)
DDLTEXT = DDLTEXT LEFT("UP", 2)
DDLTEXT = DDLTEXT LEFT("DE", 2)
DDLTEXT = DDLTEXT LEFT("AL", 2)
DDLTEXT = DDLTEXT LEFT("IX", 2)
DDLTEXT = DDLTEXT LEFT("RF", 2)
DDLTEXT = DDLTEXT LEFT("TG", 2)
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   XTBNAME = STRIP(TCREATOR) || '.' || ,
             TTNAME
   LZEILE = LZEILE || LEFT(XTBNAME, 27)
   LZEILE = LZEILE LEFT(GRANTOR, 8)
   LZEILE = LZEILE LEFT(GRANTEE, 8)
   LZEILE = LZEILE LEFT(GRANTEETYPE, 2)
   LZEILE = LZEILE LEFT(SELECTAUTH, 2)
   LZEILE = LZEILE LEFT(INSERTAUTH, 2)
   LZEILE = LZEILE LEFT(UPDATEAUTH, 2)
   LZEILE = LZEILE LEFT(DELETEAUTH, 2)
   LZEILE = LZEILE LEFT(ALTERAUTH, 2)
   LZEILE = LZEILE LEFT(INDEXAUTH, 2)
   LZEILE = LZEILE LEFT(REFERENCESAUTH, 2)
   LZEILE = LZEILE LEFT(TRIGGERAUTH, 2)
   Call Automatic_Data
   CALL ADD_TABLE
 END


CALL CLOSE_CURSOR_AC3
RETURN

LIST_SCA:

WHERELIST    = ""
CALL MAKE_WHERELIST "SCHEMANAME", DB2_NAME1
CALL MAKE_WHERELIST "GRANTOR", DB2_CREATOR2
CALL MAKE_WHERELIST "GRANTEE", DB2_NAME2

SQLSTMT    = "SELECT GRANTOR            " ,
             "    ,  GRANTEE            " ,
             "    ,  SCHEMANAME         " ,
             "    ,  CREATEINAUTH       " ,
             "    ,  ALTERINAUTH        " ,
             "    ,  DROPINAUTH         " ,
             "    ,  AUTHHOWGOT         " ,
             "    ,  GRANTEETYPE        " ,
             "    ,  GRANTORTYPE        " ,
             "    ,  GRANTEDTS          " ,
             "FROM "SYSIBMS".SYSSCHEMAAUTH SCA" ,
             WHERELIST ,
             "ORDER BY SCHEMANAME, GRANTOR, GRANTEE" ,
             ""


CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 11           /* GRANTOR                   */
OUTSQLDA.2.SQLLEN   = 11           /* GRANTEE                   */
OUTSQLDA.3.SQLLEN   = 12           /* SCHEMANAME                */
DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_RA:

WHERELIST    = ""
CALL MAKE_WHERELIST "QUALIFIER", DB2_CREATOR1
CALL MAKE_WHERELIST "NAME", DB2_NAME1
CALL MAKE_WHERELIST "OBTYPE", DB2_CREATOR2

SQLSTMT    = "SELECT    GRANTOR         " ,
             "        , GRANTEE         " ,
             "        , QUALIFIER       " ,
             "        , NAME            " ,
             ",CASE AUTHHOWGOT              " ,
             "   WHEN 'A' then 'PACKADM'    " ,
             "   WHEN 'C' then 'DBCTRL'     " ,
             "   WHEN 'D' then 'DBADM'      " ,
             "   WHEN 'E' then 'SECADM'     " ,
             "   WHEN 'G' then 'ACCESSCTRL' " ,
             "   WHEN 'L' then 'SYSCTRL'    " ,
             "   WHEN 'M' then 'DBMAINT'    " ,
             "   WHEN 'P' then 'PACKADM'    " ,
             "   WHEN 'S' then 'SYSADM'     " ,
             "   WHEN 'T' then 'DATAACCESS' " ,
             "   ELSE          ' '          " ,
             "  End AS  AUTHHOWGOT      " ,
             ",CASE OBTYPE                  " ,
             "   WHEN 'B' then 'Bufferpool' " ,
             "   WHEN 'C' then 'Collection' " ,
             "   WHEN 'D' then 'Distinct Type'" ,
             "   WHEN 'R' then 'Tablespace' " ,
             "   WHEN 'S' then 'Storagegroup' " ,
             "   WHEN 'J' then 'Jar-File'   " ,
             "   ELSE          ' '          " ,
             "  End AS  OBTYPE          " ,
             "        , USEAUTH         " ,
             "        , GRANTEETYPE     " ,
             "        , GRANTORTYPE     " ,
             "        , TIMESTAMP       " ,
             "        , DATEGRANTED     " ,
             "        , TIMEGRANTED     " ,
             "        , IBMREQD         " ,
             "        , GRANTEDTS       " ,
             "FROM "SYSIBMS".SYSRESAUTH    " ,
             WHERELIST ,
             "ORDER BY QUALIFIER, NAME" ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* GRANTOR                   */
OUTSQLDA.2.SQLLEN   = 8            /* GRANTEE                   */
OUTSQLDA.3.SQLLEN   = 9            /* QUALIFIER                 */
OUTSQLDA.4.SQLLEN   = 18           /* NAME                      */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   XNAME = STRIP(QUALIFIER) || '.' || ,
           STRIP(NAME)
   If QUALIFIER = "" Then Do
     XNAME = STRIP(NAME)
    End

   LZEILE = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END


CALL CLOSE_CURSOR_AC3
RETURN

LIST_DBA:

WHERELIST    = ""
CALL MAKE_WHERELIST "NAME", DB2_NAME1

SQLSTMT    = "SELECT    GRANTOR         " ,
             "        , GRANTEE         " ,
             "        , NAME            " ,
             "        , TIMESTAMP       " ,
             "        , DATEGRANTED     " ,
             "        , TIMEGRANTED     " ,
             "        , GRANTEETYPE     " ,
             "        , AUTHHOWGOT      " ,
             "        , CREATETABAUTH   " ,
             "        , CREATETSAUTH    " ,
             "        , DBADMAUTH       " ,
             "        , DBCTRLAUTH      " ,
             "        , DBMAINTAUTH     " ,
             "        , DISPLAYDBAUTH   " ,
             "        , DROPAUTH        " ,
             "        , IMAGCOPYAUTH    " ,
             "        , LOADAUTH        " ,
             "        , REORGAUTH       " ,
             "        , RECOVERDBAUTH   " ,
             "        , REPAIRAUTH      " ,
             "        , STARTDBAUTH     " ,
             "        , STATSAUTH       " ,
             "        , STOPAUTH        " ,
             "        , GRANTEDTS       " ,
             "        , GRANTORTYPE     " ,
             "FROM "SYSIBMS".SYSDBAUTH  " ,
             WHERELIST ,
             "ORDER BY  NAME, GRANTEE   ",
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB
OUTSQLDA.1.SQLLEN   = 8            /* GRANTOR                   */
OUTSQLDA.2.SQLLEN   = 8            /* GRANTEE                   */
OUTSQLDA.3.SQLLEN   = 10           /* DBNAME                    */
OUTSQLDA.7.SQLLEN   = 12           /* GRANTEETYPE               */
OUTSQLDA.13.SQLLEN  = 19           /* DBMAINTAUTH               */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || LEFT("NAME ", 8)
DDLTEXT = DDLTEXT LEFT("GRANTOR", 8)
DDLTEXT = DDLTEXT LEFT("GRANTEE", 8)
DDLTEXT = DDLTEXT LEFT("TB", 2)
DDLTEXT = DDLTEXT LEFT("TS", 2)
DDLTEXT = DDLTEXT LEFT("DA", 2)
DDLTEXT = DDLTEXT LEFT("DC", 2)
DDLTEXT = DDLTEXT LEFT("DM", 2)
DDLTEXT = DDLTEXT LEFT("DI", 2)
DDLTEXT = DDLTEXT LEFT("DR", 2)
DDLTEXT = DDLTEXT LEFT("IC", 2)
DDLTEXT = DDLTEXT LEFT("LO", 2)
DDLTEXT = DDLTEXT LEFT("RO", 2)
DDLTEXT = DDLTEXT LEFT("RC", 2)
DDLTEXT = DDLTEXT LEFT("RP", 2)
DDLTEXT = DDLTEXT LEFT("SD", 2)
DDLTEXT = DDLTEXT LEFT("SA", 2)
DDLTEXT = DDLTEXT LEFT("SO", 3)
call Automatic_Header
DDLTEXT = DDLTEXT " -NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   LZEILE = LZEILE || LEFT(NAME, 8)
   LZEILE = LZEILE LEFT(GRANTOR, 8)
   LZEILE = LZEILE LEFT(GRANTEE, 8)
   LZEILE = LZEILE LEFT(CREATETABAUTH                   , 2)
   LZEILE = LZEILE LEFT(CREATETSAUTH                    , 2)
   LZEILE = LZEILE LEFT(DBADMAUTH                       , 2)
   LZEILE = LZEILE LEFT(DBCTRLAUTH                      , 2)
   LZEILE = LZEILE LEFT(DBMAINTAUTH                     , 2)
   LZEILE = LZEILE LEFT(DISPLAYDBAUTH                   , 2)
   LZEILE = LZEILE LEFT(DROPAUTH                        , 2)
   LZEILE = LZEILE LEFT(IMAGCOPYAUTH                    , 2)
   LZEILE = LZEILE LEFT(LOADAUTH                        , 2)
   LZEILE = LZEILE LEFT(REORGAUTH                       , 2)
   LZEILE = LZEILE LEFT(RECOVERDBAUTH                   , 2)
   LZEILE = LZEILE LEFT(REPAIRAUTH                      , 2)
   LZEILE = LZEILE LEFT(STARTDBAUTH                     , 2)
   LZEILE = LZEILE LEFT(STATSAUTH                       , 2)
   LZEILE = LZEILE LEFT(STOPAUTH                        , 3)
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_RTA:

WHERELIST    = ""
CALL MAKE_WHERELIST "SCHEMA", DB2_Creator1
CALL MAKE_WHERELIST "SPECIFICNAME", DB2_NAME1

SQLSTMT    = "SELECT    GRANTOR         " ,
             "        , GRANTEE         " ,
             "        , SCHEMA          " ,
             "        , SPECIFICNAME    " ,
             "        , GRANTEDTS       " ,
             "        , ROUTINETYPE     " ,
             "        , GRANTEETYPE     " ,
             "        , AUTHHOWGOT      " ,
             "        , EXECUTEAUTH     " ,
             "        , COLLID          " ,
             "        , HEX(CONTOKEN) AS CONTOKEN " ,
             "        , GRANTORTYPE     " ,
             "FROM "SYSIBMS".SYSROUTINEAUTH " ,
             WHERELIST ,
             "ORDER BY  SCHEMA, SPECIFICNAME " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB
OUTSQLDA.1.SQLLEN   = 8            /* GRANTOR                   */
OUTSQLDA.2.SQLLEN   = 8            /* GRANTEE                   */
OUTSQLDA.3.SQLLEN   = 8            /* SCHEMA                    */
OUTSQLDA.4.SQLLEN   = 51           /* SPECIFICNAME              */
OUTSQLDA.9.SQLLEN   = 17           /* EXECUTEAUTH               */
OUTSQLDA.10.SQLLEN  = 10           /* COLLID                    */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || LEFT("NAME ", 27)
DDLTEXT = DDLTEXT LEFT("GRANTOR", 8)
DDLTEXT = DDLTEXT LEFT("GRANTEE", 8)
DDLTEXT = DDLTEXT LEFT("COLID", 8)
DDLTEXT = DDLTEXT LEFT("RT", 2)
DDLTEXT = DDLTEXT LEFT("GT", 2)
DDLTEXT = DDLTEXT LEFT("AG", 2)
DDLTEXT = DDLTEXT LEFT("EXA", 8)
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   XNAME = STRIP(SCHEMA) || '.' || ,
           STRIP(SPECIFICNAME)
   LZEILE = LZEILE || LEFT(XNAME, 27)
   LZEILE = LZEILE LEFT(GRANTOR, 8)
   LZEILE = LZEILE LEFT(GRANTEE, 8)
   LZEILE = LZEILE LEFT(COLLID                          , 8)
   LZEILE = LZEILE LEFT(ROUTINETYPE                     , 2)
   LZEILE = LZEILE LEFT(GRANTEETYPE                     , 2)
   LZEILE = LZEILE LEFT(AUTHHOWGOT                      , 2)
   LZEILE = LZEILE LEFT(EXECUTEAUTH                     , 8)
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_SEA:

WHERELIST    = ""
CALL MAKE_WHERELIST "SCHEMA", DB2_Creator1
CALL MAKE_WHERELIST "NAME", DB2_NAME1

SQLSTMT    = "SELECT    GRANTOR         " ,
             "        , GRANTEE         " ,
             "        , SCHEMA          " ,
             "        , NAME            " ,
             "        , GRANTEDTS       " ,
             "        , GRANTEETYPE     " ,
             "        , AUTHHOWGOT      " ,
             "        , ALTERAUTH       " ,
             "        , USEAUTH         " ,
             "        , COLLID          " ,
             "        , HEX(CONTOKEN) AS CONTOKEN " ,
             "        , GRANTORTYPE     " ,
             "FROM "SYSIBMS".SYSSEQUENCEAUTH" ,
             WHERELIST ,
             "ORDER BY  SCHEMA, NAME " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* GRANTOR                   */
OUTSQLDA.2.SQLLEN   = 8            /* GRANTEE                   */
OUTSQLDA.3.SQLLEN   = 8            /* SCHEMA                    */
OUTSQLDA.4.SQLLEN   = 44           /* NAME                      */
OUTSQLDA.10.SQLLEN  = 10           /* COLLID                    */
OUTSQLDA.11.SQLLEN  = 22           /* CONTOKEN                  */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_PGA:

WHERELIST    = ""
CALL MAKE_WHERELIST "LOCATION", DB2_NAME1
CALL MAKE_WHERELIST "COLLID", DB2_Creator2
CALL MAKE_WHERELIST "NAME", DB2_NAME2

SQLSTMT    = "SELECT    GRANTOR         " ,
             "        , GRANTEE         " ,
             "        , LOCATION        " ,
             "        , COLLID          " ,
             "        , NAME            " ,
             "        , CONTOKEN        " ,
             "        , TIMESTAMP       " ,
             "        , GRANTEETYPE     " ,
             "        , AUTHHOWGOT      " ,
             "        , BINDAUTH        " ,
             "        , COPYAUTH        " ,
             "        , EXECUTEAUTH     " ,
             "        , GRANTORTYPE     " ,
             "FROM "SYSIBMS".SYSPACKAUTH" ,
             WHERELIST ,
             "ORDER BY  COLLID, NAME, CONTOKEN " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* GRANTOR                   */
OUTSQLDA.2.SQLLEN   = 8            /* GRANTEE                   */
OUTSQLDA.3.SQLLEN   = 8            /* LOCATION                  */
OUTSQLDA.4.SQLLEN   = 8            /* COLLID                    */
OUTSQLDA.5.SQLLEN   = 16           /* NAME                      */
OUTSQLDA.6.SQLLEN   = 8            /* CONTOKEN                  */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || LEFT("COLLID", 8)
DDLTEXT = DDLTEXT LEFT("Name", 16)
DDLTEXT = DDLTEXT LEFT("GRANTOR", 8)
DDLTEXT = DDLTEXT LEFT("GRANTEE", 8)
DDLTEXT = DDLTEXT LEFT("TIMESTAMP", 19)
DDLTEXT = DDLTEXT LEFT("BI", 2)
DDLTEXT = DDLTEXT LEFT("EX", 2)
DDLTEXT = DDLTEXT LEFT("CP", 2)
call Automatic_Header
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   LZEILE = LZEILE || LEFT(COLLID, 8)
   LZEILE = LZEILE LEFT(NAME, 16)
   LZEILE = LZEILE LEFT(GRANTOR, 8)
   LZEILE = LZEILE LEFT(GRANTEE, 8)
   LZEILE = LZEILE LEFT(TIMESTAMP                       , 19)
   LZEILE = LZEILE LEFT(BINDAUTH                        , 2)
   LZEILE = LZEILE LEFT(EXECUTEAUTH                     , 2)
   LZEILE = LZEILE LEFT(COPYAUTH                        , 2)
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_PLA:

WHERELIST    = ""
CALL MAKE_WHERELIST "NAME", DB2_NAME1
CALL MAKE_WHERELIST "GRANTEDTS", DB2_NAME2

SQLSTMT    = "SELECT    GRANTOR         " ,
             "        , GRANTEE         " ,
             "        , NAME            " ,
             "        , GRANTEDTS       " ,
             "        , TIMESTAMP       " ,
             "        , GRANTEETYPE     " ,
             "        , AUTHHOWGOT      " ,
             "        , BINDAUTH        " ,
             "        , EXECUTEAUTH     " ,
             "        , GRANTORTYPE     " ,
             "FROM "SYSIBMS".SYSPLANAUTH" ,
             WHERELIST ,
             "ORDER BY  NAME " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* GRANTOR                   */
OUTSQLDA.2.SQLLEN   = 8            /* GRANTEE                   */
OUTSQLDA.3.SQLLEN   = 12           /* NAME                      */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_COA:

WHERELIST    = ""
CALL MAKE_WHERELIST "CREATOR", DB2_Creator1
CALL MAKE_WHERELIST "TNAME", DB2_NAME1
CALL MAKE_WHERELIST "COLNAME" DB2_NAME2
CALL MAKE_WHERELIST "GRANTOR" DB2_Creator3
CALL MAKE_WHERELIST "GRANTEE" DB2_NAME3

SQLSTMT    = "SELECT    GRANTOR         " ,
             "        , GRANTEE         " ,
             "        , CREATOR         " ,
             "        , TNAME           " ,
             "        , COLNAME         " ,
             "        , PRIVILEGE       " ,
             "FROM "SYSIBMS".SYSCOLAUTH " ,
             WHERELIST ,
             "ORDER BY  CREATOR, TNAME, COLNAME" ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* GRANTOR                   */
OUTSQLDA.2.SQLLEN   = 8            /* GRANTEE                   */
OUTSQLDA.3.SQLLEN   = 8            /* CREATOR                   */
OUTSQLDA.4.SQLLEN   = 20           /* TNAME                     */
OUTSQLDA.5.SQLLEN   = 20           /* COLNAME                   */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_UA:

WHERELIST    = ""
CALL MAKE_WHERELIST "GRANTOR", DB2_Creator1
CALL MAKE_WHERELIST "GRANTEE", DB2_NAME1

SQLSTMT    = "SELECT    GRANTOR         " ,
             "        , GRANTEE         " ,
             "        , TIMESTAMP       " ,
             "        , DATEGRANTED     " ,
             "        , TIMEGRANTED     " ,
             "        , GRANTEETYPE     " ,
             "        , AUTHHOWGOT      " ,
             "        , ALTERBPAUTH     " ,
             "        , BINDADDAUTH     " ,
             "        , BSDSAUTH        " ,
             "        , CREATEDBAAUTH   " ,
             "        , CREATEDBCAUTH   " ,
             "        , CREATESGAUTH    " ,
             "        , DISPLAYAUTH     " ,
             "        , RECOVERAUTH     " ,
             "        , STOPALLAUTH     " ,
             "        , STOSPACEAUTH    " ,
             "        , SYSADMAUTH      " ,
             "        , SYSOPRAUTH      " ,
             "        , TRACEAUTH       " ,
             "        , MON1AUTH        " ,
             "        , MON2AUTH        " ,
             "        , CREATEALIASAUTH " ,
             "        , SYSCTRLAUTH     " ,
             "        , BINDAGENTAUTH   " ,
             "        , ARCHIVEAUTH     " ,
             "        , CAPTURE1AUTH    " ,
             "        , CAPTURE2AUTH    " ,
             "        , GRANTEDTS       " ,
             "        , CREATETMTABAUTH " ,
             "        , GRANTORTYPE     " ,
             "        , DEBUGSESSIONAUTH" ,
             "        , EXPLAINAUTH     " ,
             "        , SQLADMAUTH      " ,
             "        , SDBADMAUTH      " ,
             "        , DATAACCESSAUTH  " ,
             "        , ACCESSCTRLAUTH  " ,
             "        , CREATESECUREAUTH" ,
             "FROM "SYSIBMS".SYSUSERAUTH" ,
             WHERELIST ,
             "ORDER BY  GRANTOR, GRANTEE " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

DDLTEXT = DDLTEXT || "*UZ*"
OUTSQLDA.1.SQLLEN   = 8            /* GRANTOR                   */
OUTSQLDA.2.SQLLEN   = 8            /* GRANTEE                   */
OUTSQLDA.6.SQLLEN   = 16           /* GRANTEETYPE               */
OUTSQLDA.12.SQLLEN  = 20           /* CREATEDBCAUTH             */
OUTSQLDA.18.SQLLEN  = 16           /* SYSADMAUTH                */
OUTSQLDA.24.SQLLEN  = 23           /* SYSCTRLAUTH               */
call Automatic_Header
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_PL:

WHERELIST = ""
FROMLIST  = ""
CALL MAKE_WHERELIST "T1.CREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "T1.NAME", DB2_NAME1
FROMLIST = FROMLIST "FROM "SYSIBMS".SYSPLAN T1" ,

SELECT
   WHEN LENGTH(STRIP(DB2_CREATOR2)) > 0 ,
      | LENGTH(STRIP(DB2_NAME2)) > 0 THEN DO
        FROMLIST = FROMLIST "    , "SYSIBMS".SYSPACKLIST T2"
        CALL MAKE_WHERELIST "T2.COLLID", DB2_CREATOR2
        CALL MAKE_WHERELIST "", "T1.NAME   = T2.PLANNAME"
      END
   OTHERWISE NOP
 End
SQLSTMT    = "SELECT  DISTINCT" ,
             "        T1.NAME" ,
             "      , T1.CREATOR" ,
             "      , T1.BINDDATE" ,
             "      , T1.VALIDATE  " ,
             "      , T1.ISOLATION " ,
             "      , T1.VALID" ,
             "      , T1.OPERATIVE" ,
             "      , T1.BINDTIME" ,
             "      , T1.PLSIZE" ,
             "      , T1.AVGSIZE" ,
             "      , T1.BOUNDBY" ,
             "      , T1.QUALIFIER" ,
             "      , T1.DEGREE" ,
             "      , T1.BOUNDTS" ,
             "      , T1.REOPTVAR" ,
             "      , T1.KEEPDYNAMIC" ,
             "      , T1.REMARKS    " ,
             FROMLIST ,
             WHERELIST ,
             "ORDER BY NAME, CREATOR " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   =  8           /* NAME                      */
OUTSQLDA.2.SQLLEN   =  8           /* CREATOR                   */
OUTSQLDA.3.SQLLEN   =  9           /* BINDDATE                  */
OUTSQLDA.11.SQLLEN  =  8           /* BOUNDBY                   */
OUTSQLDA.12.SQLLEN  =  10          /* QUALIFIER                 */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || LEFT("PLNAME", 20, ' ')
DDLTEXT = DDLTEXT LEFT("V", 1, ' ')
DDLTEXT = DDLTEXT LEFT("O", 1, ' ')
DDLTEXT = DDLTEXT LEFT("QALIF", 8, ' ')
DDLTEXT = DDLTEXT LEFT("BINDDATE", 10, ' ')
call Automatic_Header
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

   PLNAME = STRIP(CREATOR) || '.' || ,
            STRIP(NAME)
   LZEILE  = ''
   LZEILE  = LZEILE  || LEFT(PLNAME, 20, ' ')
   LZEILE  = LZEILE  LEFT(VALID, 1, ' ')
   LZEILE  = LZEILE  LEFT(OPERATIVE,1, ' ')
   LZEILE  = LZEILE  LEFT(QUALIFIER,8, ' ')
   LZEILE  = LZEILE  LEFT(BINDDATE, 10, ' ')
   Call Automatic_Data
   CALL ADD_TABLE

 END /* END DO I = 1 TO DDLTEXT */

CALL CLOSE_CURSOR_AC3
RETURN

LIST_PERM:

WHERELIST = ""
CALL MAKE_WHERELIST "SCHEMA", DB2_CREATOR1
CALL MAKE_WHERELIST "NAME", DB2_NAME1
CALL MAKE_WHERELIST "TBSCHEMA", DB2_CREATOR2
CALL MAKE_WHERELIST "TBNAME", DB2_NAME2
CALL MAKE_WHERELIST "CONTROL_ID", DB2_CREATOR3, NUM
CALL MAKE_WHERELIST "COLNAME", DB2_NAME3

SQLSTMT    = "SELECT CONTROL_ID             " ,
             "    ,  SCHEMA                 " ,
             "    ,  NAME                   " ,
             "    ,  TBSCHEMA               " ,
             "    ,  TBNAME                 " ,
             "    ,  TBCORRELATION          " ,
             "    ,  COLNAME                " ,
             "    ,  COLNO                  " ,
             "    ,  CONTROL_TYPE           " ,
             "    ,  ENFORCED               " ,
             "    ,  IMPLICIT               " ,
             "    ,  ENABLE                 " ,
             "    ,  REMARKS                " ,
             "FROM "SYSIBMS".SYSCONTROLS    " ,
             WHERELIST                        ,
             "ORDER BY SCHEMA, NAME, CONTROL_ID " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.2.SQLLEN   = 8            /* SCHEMA                    */
OUTSQLDA.3.SQLLEN   = 20           /* NAME                      */
OUTSQLDA.4.SQLLEN   = 8            /* TBSCHEMA                  */
OUTSQLDA.5.SQLLEN   = 20           /* TBNAME                    */
OUTSQLDA.6.SQLLEN   = 8            /* TBCORRELATION             */
OUTSQLDA.7.SQLLEN   = 20           /* COLNAME                   */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE

 END /* END DO I = 1 TO DDLTEXT */

CALL CLOSE_CURSOR_AC3
RETURN

LIST_PDDL:

WHERELIST = ""
CALL MAKE_WHERELIST "T1.DBNAME", DB2_CREATOR1
CALL MAKE_WHERELIST "T1.TSNAME", DB2_NAME1
CALL MAKE_WHERELIST "T1.OBJSCHEMA", DB2_CREATOR2
CALL MAKE_WHERELIST "T1.OBJNAME", DB2_NAME2

SQLSTMT    = "SELECT T1.DBNAME                 " ,
             "    ,  T1.TSNAME                 " ,
             "    ,  T1.OBJSCHEMA              " ,
             "    ,  T1.OBJNAME                " ,
             "    ,  T1.OBJTYPE                " ,
             "    ,  T1.STATEMENT_TYPE AS STMT_TYPE " ,
             "    ,  T1.OPTION_KEYWORD            ",
             "    ,  T1.OPTION_VALUE           " ,
             "    ,  T2.TYPE AS TSTYPE         " ,
             "    ,  T1.OPTION_ENVID           " ,
             "    ,  T1.OPTION_SEQNO           " ,
             "    ,  T1.CREATEDTS              " ,
             "    ,  T1.RELCREATED             " ,
             "    ,  T1.COLNAME                " ,
             "    ,  T1.PARTITION              " ,
             "    ,  T1.PARTITION_KEYWORD      " ,
             "    ,  T1.COLUMN_KEYWORD         " ,
             "    ,  T1.DBID                   " ,
             "    ,  T1.PSID                   " ,
             "    ,  T1.STATEMENT_TEXT         " ,
             "FROM "SYSIBMS".SYSPENDINGDDL T1  " ,
             "LEFT OUTER JOIN "SYSIBMS".SYSTABLESPACE T2" ,
             "ON   T1.DBNAME   = T2.DBNAME     " ,
             "AND  T1.TSNAME   = T2.NAME       " ,
             WHERELIST                        ,
             "ORDER BY T1.DBNAME, T1.TSNAME, T1.OBJSCHEMA " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* DBNAME                    */
OUTSQLDA.2.SQLLEN   = 8            /* TSNAME                    */
OUTSQLDA.3.SQLLEN   = 8            /* OBJSCHEMA                 */
OUTSQLDA.4.SQLLEN   = 8            /* OBJNAME                   */
OUTSQLDA.7.SQLLEN   = 17           /* OPTION_KEYWORD            */
OUTSQLDA.8.SQLLEN   = 70           /* OPTION_VALUE              */
OUTSQLDA.20.SQLLEN  = 72           /* STATEMENT_TEXT            */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE

 END /* END DO I = 1 TO DDLTEXT */

CALL CLOSE_CURSOR_AC3
RETURN

LIST_DBRM:

WHERELIST = ""
CALL MAKE_WHERELIST "NAME", DB2_NAME1
CALL MAKE_WHERELIST "PLCREATOR", DB2_CREATOR2
CALL MAKE_WHERELIST "PLNAME", DB2_NAME2


SQLSTMT    = "SELECT NAME            " ,
             "    ,  TIMESTAMP       " ,
             "    ,  PDSNAME         " ,
             "    ,  PLNAME          " ,
             "    ,  PLCREATOR       " ,
             "    ,  PRECOMPTIME     " ,
             "    ,  PRECOMPDATE     " ,
             "    ,  QUOTE           " ,
             "    ,  COMMA           " ,
             "    ,  HOSTLANG        " ,
             "    ,  CHARSET         " ,
             "    ,  MIXED           " ,
             "    ,  DEC31           " ,
             "    ,  VERSION         " ,
             "    ,  PRECOMPTS       " ,
             "    ,  PLCREATORTYPE   " ,
             "    ,  RELCREATED      " ,
             "FROM "SYSIBMS".SYSDBRM " ,
             WHERELIST ,
             "ORDER BY NAME          " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* NAME                      */
OUTSQLDA.3.SQLLEN   = 45           /* PDSNAME                   */
OUTSQLDA.4.SQLLEN   = 8            /* PLNAME                    */
OUTSQLDA.5.SQLLEN   = 8            /* PLCREATOR                 */
OUTSQLDA.14.SQLLEN  = 26           /* VERSION                   */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || LEFT("NAME", 15, ' ')
DDLTEXT = DDLTEXT LEFT("PCREATOR", 8, ' ')
DDLTEXT = DDLTEXT LEFT("PNAME", 8, ' ')
DDLTEXT = DDLTEXT LEFT("VERSION", 8, ' ')
DDLTEXT = DDLTEXT LEFT("PCTIME", 8, ' ')
DDLTEXT = DDLTEXT LEFT("PCDATE", 20, ' ')
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   LZEILE  = LZEILE  || LEFT(NAME, 15, ' ')
   LZEILE  = LZEILE  LEFT(PLCREATOR, 8, ' ')
   LZEILE  = LZEILE  LEFT(PLNAME,8, ' ')
   LZEILE  = LZEILE  LEFT(VERSION,8, ' ')
   LZEILE  = LZEILE  LEFT(PRECOMPTIME, 8, ' ')
   LZEILE  = LZEILE  LEFT(PRECOMPDATE, 20, ' ')
   Call Automatic_Data
   CALL ADD_TABLE

 END /* END DO I = 1 TO DDLTEXT */


CALL CLOSE_CURSOR_AC3
RETURN

LIST_PG:

WHERELIST = ""
FROMLIST  = ""
CALL MAKE_WHERELIST "", "T1.LOCATION = ''"
CALL MAKE_WHERELIST "T1.COLLID", DB2_CREATOR1
CALL MAKE_WHERELIST "T1.NAME", DB2_NAME1

FROMLIST = FROMLIST "FROM  "SYSIBMS".SYSPACKAGE T1"
SELECT
   WHEN LENGTH(STRIP(DB2_CREATOR2)) > 0 ,
      | LENGTH(STRIP(DB2_NAME2)) > 0 ,
      | LENGTH(STRIP(DB2_TABLESPACE)) > 0 ,
      | LENGTH(STRIP(DB2_DATABASE)) > 0  THEN DO
        FROMLIST = FROMLIST "    , "SYSIBMS".SYSPACKDEP T2"
        CALL MAKE_WHERELIST "", "DCOLLID = COLLID"
        CALL MAKE_WHERELIST "", "DNAME   = NAME"
        IF LENGTH(DB2_CREATOR2) > 0 ,
         | LENGTH(DB2_NAME2) > 0 THEN DO
           BTY = "'A', 'S', 'V', 'T', 'I', 'O', 'F'"
/*         CALL MAKE_WHERELIST "",  "BTYPE IN ("BTY")" */
           CALL MAKE_WHERELIST "BQUALIFIER", DB2_CREATOR2
           CALL MAKE_WHERELIST "BNAME", DB2_NAME2
         END
        IF LENGTH(DB2_TABLESPACE) > 0 ,
         | LENGTH(DB2_DATABASE) > 0 THEN DO
           CALL MAKE_WHERELIST "", "BTYPE IN ('P', 'R')"
           CALL MAKE_WHERELIST "BQUALIFIER", DB2_DATABASE
           CALL MAKE_WHERELIST "BNAME", DB2_TABLESPACE
         END

      END
   WHEN LENGTH(STRIP(DB2_CREATOR3)) > 0 ,
      | LENGTH(STRIP(DB2_NAME3)) > 0 THEN DO
        FROMLIST = FROMLIST "    , "SYSIBMS".SYSPACKLIST T3"
        CALL MAKE_WHERELIST "T3.PLANNAME", DB2_NAME3
        CALL MAKE_WHERELIST "", "T3.COLLID = T1.COLLID"
      END
   OTHERWISE NOP
 End

SQLSTMT    = "SELECT  DISTINCT t1.LOCATION ",
             "      , T1.COLLID " ,
             "      , T1.NAME" ,
             "      , T1.VERSION" ,
             "      , T1.VALID " ,
             "      , T1.TYPE  " ,
             "      , T1.BINDTIME",
             "      , T1.OPERATIVE ",
             "      , T1.OWNER" ,
             "      , T1.QUALIFIER" ,
             "      , T1.CONTOKEN " ,
             "      , T1.EXPLAIN " ,
             "      , T1.LASTUSED " ,
             "      , T1.CREATOR                " ,
             "      , T1.TIMESTAMP              " ,
             "      , T1.PKSIZE                 " ,
             "      , T1.AVGSIZE                " ,
             "      , T1.SYSENTRIES             " ,
             "      , T1.VALIDATE               " ,
             "      , T1.ISOLATION              " ,
             "      , T1.RELEASE                " ,
             "      , T1.QUOTE                  " ,
             "      , T1.COMMA                  " ,
             "      , T1.HOSTLANG               " ,
             "      , T1.CHARSET                " ,
             "      , T1.MIXED                  " ,
             "      , T1.DEC31                  " ,
             "      , T1.DEFERPREP              " ,
             "      , T1.SQLERROR               " ,
             "      , T1.REMOTE                 " ,
             "      , T1.PCTIMESTAMP            " ,
             "      , T1.DEGREE                 " ,
             "      , T1.GROUP_MEMBER           " ,
             "      , T1.DYNAMICRULES           " ,
             "      , T1.REOPTVAR               " ,
             "      , T1.DEFERPREPARE           " ,
             "      , T1.KEEPDYNAMIC            " ,
             "      , T1.DBPROTOCOL             " ,
             "      , T1.FUNCTIONTS             " ,
             "      , T1.ENCODING_CCSID         " ,
             "      , T1.IMMEDWRITE             " ,
             "      , T1.RELBOUND               " ,
             "      , T1.CATENCODE              " ,
             "      , T1.OWNERTYPE              " ,
             "      , T1.ROUNDING               " ,
             "      , T1.DISTRIBUTE             " ,
             "      , T1.COPYID                 " ,
             "      , T1.PLANMGMT               " ,
             "      , T1.PLANMGMTSCOPE          " ,
             "      , T1.APREUSE                " ,
             "      , T1.APRETAINDUP            " ,
             "      , T1.SYSTIMESENSITIVE       " ,
             "      , T1.RECORDTEMPORALHIST     " ,
             "      , T1.BUSTIMESENSITIVE       " ,
             "      , T1.APPLCOMPAT             " ,
             "      , T1.EXTSEQNO               " ,
             "      , T1.OPTHINT                " ,
             "      , T1.PDSNAME                " ,
              FROMLIST ,
              WHERELIST ,
             "ORDER BY COLLID, NAME, VERSION DESC " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 10           /* LOCATION                  */
OUTSQLDA.2.SQLLEN   = 20           /* COLLID                    */
OUTSQLDA.3.SQLLEN   = 30           /* NAME                      */
OUTSQLDA.4.SQLLEN   = 26           /* VERSION                   */
OUTSQLDA.9.SQLLEN   =  8           /* OWNER                     */
OUTSQLDA.10.SQLLEN  =  8           /* QUALIFIER                 */
OUTSQLDA.14.SQLLEN  =  8           /* CREATOR                   */
OUTSQLDA.33.SQLLEN  = 12           /* GROUP_MEMBER              */
OUTSQLDA.57.SQLLEN  = 20           /* OPTHINT                   */
OUTSQLDA.58.SQLLEN  = 42           /* PDSNAME                   */
OUTSQLDA.59.SQLLEN  = 40           /* PATHSCHEMAS               */
OUTSQLDA.60.SQLLEN  = 30           /* REMARKS                   */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || LEFT("PGNAME", 20, ' ')
DDLTEXT = DDLTEXT LEFT("VERSION", 15, ' ')
DDLTEXT = DDLTEXT LEFT("TY", 2, ' ')
DDLTEXT = DDLTEXT LEFT("V", 1, ' ')
DDLTEXT = DDLTEXT LEFT("O", 1, ' ')
DDLTEXT = DDLTEXT LEFT("OWNER", 8, ' ')
DDLTEXT = DDLTEXT LEFT("BINDDATE", 10, ' ')
DDLTEXT = DDLTEXT LEFT("EXP", 8, ' ')

call Automatic_Header
DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

   PGNAME = STRIP(LOCATION)
   IF PGNAME <> '' THEN PGNAME = PGNAME || '.'
   PGNAME = STRIP(PGNAME) || STRIP(COLLID) || "." || ,
                             STRIP(NAME)
   LZEILE  = ''
   LZEILE  = LZEILE  || LEFT(PGNAME, 20, ' ')
   LZEILE  = LZEILE  LEFT(VERSION, 15, ' ')
   LZEILE  = LZEILE  LEFT(TYPE, 2, ' ')
   LZEILE  = LZEILE  LEFT(VALID, 1, ' ')
   LZEILE  = LZEILE  LEFT(OPERATIVE,1, ' ')
   LZEILE  = LZEILE  LEFT(OWNER,8, ' ')
   LZEILE  = LZEILE  LEFT(BINDTIME, 10, ' ')
   LZEILE  = LZEILE  LEFT(EXPLAIN, 8, ' ')

   Call Automatic_Data
   LZEILE = strip(LZEILE)
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3
RETURN

LIST_COLS:

WHERELIST = ""
CALL MAKE_WHERELIST "NAME", DB2_NAME1
CALL MAKE_WHERELIST "TBCREATOR", DB2_CREATOR2
CALL MAKE_WHERELIST "TBNAME", DB2_NAME2
/* CALL MAKE_WHERELIST "", "NAME NOT LIKE 'DB2_GENERATED____ID_FOR%'"*/

SQLSTMT    = "SELECT TBCREATOR       " ,
             "     , TBNAME          " ,
             "     , COLNO           " ,
             "     , NAME            " ,
             "     , COLTYPE         " ,
             "     , LENGTH          " ,
             "     , SCALE           " ,
             "     , LENGTH2         " ,
             "     , NULLS           " ,
             "     , DEFAULT         " ,
             "     , HIDDEN                    " ,
             "     , INT(COLCARDF) AS COLCARD " ,
             "     , KEYSEQ                    " ,
             "     , PARTKEY_COLSEQ            " ,
             "     , PARTKEY_ORDERING          " ,
             "     , GENERATED_ATTR            " ,
             "     , UPDATES                   " ,
             "     , FOREIGNKEY                " ,
             "     , CCSID                     " ,
             "     , FLDPROC                   " ,
             "     , COLSTATUS                 " ,
             "     , TYPENAME                  " ,
             "     , HASHKEY_COLSEQ            " ,
             "     , STATS_FORMAT              " ,
             "     , PERIOD                    " ,
             "     , DEFAULTVALUE              " ,
             "     , REMARKS                   " ,
             "     , LABEL                     " ,
             "FROM  "SYSIBMS".SYSCOLUMNS       " ,
             WHERELIST ,
             "ORDER BY TBCREATOR, TBNAME, COLNO" ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* TBCREATOR                 */
OUTSQLDA.2.SQLLEN   = 25           /* TBNAME                    */
OUTSQLDA.4.SQLLEN   = 27           /* COLNAME                   */
OUTSQLDA.5.SQLLEN   = 10           /* COLTYPE                   */
OUTSQLDA.8.SQLLEN   = 13           /* LENGTH2                   */
OUTSQLDA.21.SQLLEN  = 12           /* COLSTATUS                 */
OUTSQLDA.22.SQLLEN  = 15           /* TYPENAME                  */
OUTSQLDA.26.SQLLEN  = 40           /* DEFAULTVALUE              */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || RIGHT("NR ", 3, ' ')
DDLTEXT = DDLTEXT LEFT("COLNAME", 20, ' ')
DDLTEXT = DDLTEXT LEFT("TYPE", 8, ' ')
DDLTEXT = DDLTEXT RIGHT("LENGTH", 6, ' ')
DDLTEXT = DDLTEXT SUBSTR("N", 1, 1)
DDLTEXT = DDLTEXT SUBSTR("DG", 1, 2)
DDLTEXT = DDLTEXT SUBSTR("H", 1, 1)
DDLTEXT = DDLTEXT SUBSTR("  COLCARD", 1, 9)
DDLTEXT = DDLTEXT SUBSTR("KSQ", 1, 3)
DDLTEXT = DDLTEXT SUBSTR("PKEY", 1, 4)
DDLTEXT = DDLTEXT SUBSTR("Inlen", 1, 5)
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   ilen = ""
   If Pos('LOB', COLTYPE, 1) > 0 Then do
      LEN = STRIP(LENGTH2)
      SZ  = ""
      If LEN >= 1024 Then do
         len = format(len / 1024,, 0)
         sz = "K"
       End
      If LEN >= 1024 Then do
         len = format(len / 1024,, 0)
         sz = "M"
       End
      If LEN >= 1024 Then do
         len = format(len / 1024,, 0)
         sz = "G"
       End
      LEN = LEN sz
      If LENGTH > 4 Then ilen = LENGTH - 4
      IF COLTYPE = 'DBCLOB' THEN Do
         if datatype(ilen) =  'NUM' then ilen = ilen / 2
       End
    End
   Else Do
      LEN = STRIP(LENGTH)
      IF COLTYPE = 'DECIMAL' THEN DO
         LEN = STRIP(LENGTH) || ,
               ',' || ,
               STRIP(SCALE)
       END
    End
   IF DEFAULT = 'D' THEN NULLS = 'D'

   LZEILE = ''
   LZEILE = LZEILE || RIGHT(COLNO, 3, '0')
   LZEILE = LZEILE LEFT(NAME, 20)
   LZEILE = LZEILE LEFT(COLTYPE, 8)
   LZEILE = LZEILE RIGHT(LEN, 6)
   LZEILE = LZEILE STRIP(NULLS)
   LZEILE = LZEILE STRIP(DEFAULT) || ,
                         GENERATED_ATTR
   LZEILE = LZEILE STRIP(HIDDEN)
   LZEILE = LZEILE RIGHT(COLCARD, 9, ' ')
   LZEILE = LZEILE RIGHT(KEYSEQ, 3, ' ')
   LZEILE = LZEILE RIGHT(PARTKEY_COLSEQ || ,
                         PARTKEY_ORDERING, 4, ' ')
   LZEILE = LZEILE RIGHT(ilen, 5 , ' ')

   Call Automatic_Data
   CALL ADD_TABLE
 END /* END DO I = 1 TO DDLTEXT */
CALL CLOSE_CURSOR_AC3
RETURN

LIST_STF_COLS:

WHERELIST = ""
CALL MAKE_WHERELIST "", "COLNO in("DB2_NAME1")"
CALL MAKE_WHERELIST "TBCREATOR", DB2_CREATOR2
CALL MAKE_WHERELIST "TBNAME", DB2_NAME2

SQLSTMT    = "SELECT TBCREATOR       " ,
             "     , TBNAME          " ,
             "     , COLNO           " ,
             "     , NAME            " ,
             "FROM  "SYSIBMS".SYSCOLUMNS       " ,
             WHERELIST ,
             "ORDER BY TBCREATOR, TBNAME, COLNO" ,
             ""

CALL OPEN_CURSOR_AC3

DDLTEXT = ""
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   ANZAHL_ROWS = ANZAHL_ROWS +1
   DDLTEXT = DDLTEXT NAME
 END /* END DO I = 1 TO DDLTEXT */

CALL CLOSE_CURSOR_AC3
RETURN

LIST_LU:

WHERELIST = ""
CALL MAKE_WHERELIST "LU.LUNAME", DB2_NAME1

SQLSTMT    = "SELECT  LU.LUNAME        ",
             "      , LU.SYSMODENAME   ",
             "      , LU.SECURITY_IN   ",
             "      , LU.SECURITY_OUT  ",
             "      , LU.ENCRYPTPSWDS  ",
             "      , LU.MODESELECT    ",
             "      , LU.USERNAMES     ",
             "      , LU.GENERIC       ",
             "FROM "SYSIBMS".LUNAMES LU",
              WHERELIST ,
             "ORDER BY LU.LUNAME       " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 12           /* LUNAME                    */
OUTSQLDA.2.SQLLEN   = -1           /* SYSMODENAME               */
OUTSQLDA.6.SQLLEN   = 10           /* MODESELECT                */
OUTSQLDA.7.SQLLEN   = 9            /* USERNAMES                 */
OUTSQLDA.8.SQLLEN   = 7            /* GENERIC                   */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END /* END DO I = 1 TO DDLTEXT */
CALL CLOSE_CURSOR_AC3
RETURN

LIST_LO:

WHERELIST = ""
CALL MAKE_WHERELIST "LO.LINKNAME", DB2_CREATOR1
CALL MAKE_WHERELIST "LO.LOCATION", DB2_NAME1

SQLSTMT    = "SELECT  LO.LOCATION      ",
             "      , LO.LINKNAME      ",
             "      , LO.PORT          ",
             "      , LO.TPN           ",
             "      , LO.DBALIAS       ",
             "      , LO.TRUSTED       ",
             "      , LO.SECURE        ",
             "      , IP.IPADDR        ",
             "FROM "SYSIBMS".LOCATIONS LO",
             "INNER JOIN "SYSIBMS".IPNAMES IP",
             "  ON  LO.LINKNAME = IP.LINKNAME ",
              WHERELIST ,
             "ORDER BY LO.LOCATION     " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 12           /* LOCATION                  */
OUTSQLDA.2.SQLLEN   = 12           /* LINKNAME                  */
OUTSQLDA.3.SQLLEN   = 5            /* PORT                      */
OUTSQLDA.4.SQLLEN   = 8            /* TPN                       */
OUTSQLDA.5.SQLLEN   = 8            /* DBALIAS                   */
OUTSQLDA.6.SQLLEN   = 7            /* TRUSTED                   */
OUTSQLDA.7.SQLLEN   = 6            /* SECURE                    */
OUTSQLDA.8.SQLLEN   = 15           /* IPADDR                    */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END /* END DO I = 1 TO DDLTEXT */
CALL CLOSE_CURSOR_AC3
RETURN

LIST_IPN:

WHERELIST = ""
CALL MAKE_WHERELIST "IP.IPADDR", DB2_CREATOR1
CALL MAKE_WHERELIST "IP.LINKNAME", DB2_NAME1

SQLSTMT    = "SELECT  IP.LINKNAME      ",
             "      , IP.SECURITY_OUT  ",
             "      , IP.USERNAMES     ",
             "      , IP.IPADDR        ",
             "FROM "SYSIBMS".IPNAMES IP",
              WHERELIST ,
             "ORDER BY IP.LINKNAME     " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 18           /* LINKNAME                  */
OUTSQLDA.2.SQLLEN   = 12           /* SECURITY_OUT              */
OUTSQLDA.3.SQLLEN   = 9            /* USERNAMES                 */
OUTSQLDA.4.SQLLEN   = 30           /* IPADDR                    */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END /* END DO I = 1 TO DDLTEXT */
CALL CLOSE_CURSOR_AC3
RETURN

LIST_UN:

WHERELIST = ""
CALL MAKE_WHERELIST "UN.AUTHID", DB2_CREATOR1
CALL MAKE_WHERELIST "UN.LINKNAME", DB2_NAME1

SQLSTMT    = "SELECT  UN.TYPE          ",
             "      , UN.AUTHID        ",
             "      , UN.LINKNAME      ",
             "      , UN.NEWAUTHID     ",
             "      , UN.PASSWORD      ",
             "FROM "SYSIBMS".USERNAMES UN",
              WHERELIST ,
             "ORDER BY UN.LINKNAME     " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB
OUTSQLDA.1.SQLLEN   = 4            /* TYPE                      */
OUTSQLDA.2.SQLLEN   = 12           /* AUTHID                    */
OUTSQLDA.3.SQLLEN   = 15           /* LINKNAME                  */
OUTSQLDA.4.SQLLEN   = 15           /* NEWAUTHID                 */
OUTSQLDA.5.SQLLEN   = 20           /* PASSWORD                  */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END /* END DO I = 1 TO DDLTEXT */

CALL CLOSE_CURSOR_AC3
RETURN

LIST_IC:

WHERELIST = ""
CALL MAKE_WHERELIST "IC.DBNAME", DB2_CREATOR1
CALL MAKE_WHERELIST "iC.TSNAME", DB2_NAME1
Select
     When DB2_LIST_OBJ = "LIC" Then Do
          CALL MAKE_WHERELIST "","IC.ICTYPE IN('F', 'I'   )"
          CALL MAKE_WHERELIST "","IC.TIMESTAMP = ( SELECT",
          "Max(TIMESTAMP) from "SYSIBMS".syscopy IC2 ",
          "WHERE IC.DBNAME = IC2.DBNAME AND IC.TSNAME = IC2.TSNAME ",
          "AND IC2.ICTYPE IN('F', 'I'   )  ) "
      End
     When DB2_LIST_OBJ = "LFIC" Then Do
          CALL MAKE_WHERELIST "","IC.ICTYPE IN('F'        )"
          CALL MAKE_WHERELIST "","IC.TIMESTAMP = ( SELECT",
          "Max(TIMESTAMP) from "SYSIBMS".syscopy ic2 ",
          "WHERE IC.DBNAME = IC2.DBNAME AND IC.TSNAME = IC2.TSNAME ",
          "AND IC2.ICTYPE IN('F'        )  ) "
      End
      OTHERWISE NOP
   End

SQLSTMT    = "SELECT  IC.DBNAME        ",
             "      , IC.TSNAME        ",
             "      , IC.TIMESTAMP     ",
             "      , IC.DSNUM         ",
             "      , IC.ICTYPE        ",
             "      , IC.ICDATE        ",
             "      , IC.START_RBA     ",
             "      , IC.FILESEQNO     ",
             "      , IC.DEVTYPE       ",
             "      , IC.DSNAME        ",
             "      , IC.OTYPE         ",
             "      , IC.STYPE         ",
             "      , IC.IBMREQD       ",
             "      , IC.ICTIME        ",
             "      , IC.SHRLEVEL      ",
             "      , IC.DSVOLSER      ",
             "      , IC.ICBACKUP      ",
             "      , IC.ICUNIT        ",
             "      , IC.PIT_RBA       ",
             "      , IC.GROUP_MEMBER  ",
             "      , IC.LOWDSNUM      ",
             "      , IC.HIGHDSNUM     ",
             "      , IC.COPYPAGESF    ",
             "      , IC.NPAGESF       ",
             "      , IC.CPAGESF       ",
             "      , IC.JOBNAME       ",
             "      , IC.AUTHID        ",
             "      , IC.OLDEST_VERSION",
             "      , IC.LOGICAL_PART  ",
             "      , IC.LOGGED        ",
             "      , IC.TTYPE         ",
             "      , IC.INSTANCE      ",
             "      , IC.RELCREATED    ",
             "      , IC.MODECREATED   ",
             "      , CHAR(' ', 1) AS DSAVAILABLE ",
             "FROM "SYSIBMS".SYSCOPY IC",
              WHERELIST ,
             "ORDER BY IC.DBNAME, IC.TSNAME, IC.TIMESTAMP DESC",
             ""
CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 8            /* DBNAME                    */
OUTSQLDA.2.SQLLEN   = 8            /* TSNAME                    */
OUTSQLDA.16.SQLLEN  = 10           /* DSVOLSER                  */
OUTSQLDA.34.SQLLEN  = 11           /* MODECREATED               */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || LEFT("TY", 2, ' ')
DDLTEXT = DDLTEXT LEFT("DBNAME", 8, ' ')
DDLTEXT = DDLTEXT LEFT("TSNAME", 8, ' ')
DDLTEXT = DDLTEXT LEFT("T", 1, ' ')
DDLTEXT = DDLTEXT LEFT("PART", 4, ' ')
DDLTEXT = DDLTEXT LEFT("TIMESTAMP", 19, ' ')
DDLTEXT = DDLTEXT LEFT("VOLSE", 5, ' ')
DDLTEXT = DDLTEXT RIGHT("SEQ", 4, ' ')
DDLTEXT = DDLTEXT RIGHT("DNU", 3, ' ')
DDLTEXT = DDLTEXT LEFT("JOBNAME", 9 , ' ')
call Automatic_Header

DDLTEXT = DDLTEXT ANZ_Daten('START_RBA       '  , '', 'L', 20, ' ')
DDLTEXT = DDLTEXT ANZ_Daten('PIT_RBA         '  , '', 'L', 20, ' ')
DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   Select
     When OTYPE            = "I" THEN  OTYPE = "IX"
     Otherwise                         OTYPE = "TS"
    End

   Select
     When ICTYPE = "F" | ICTYPE = "I"  Then do
          dsi = listdsi("'" || Space(DSNAME, 0) || "'")
          if dsi = 16 & (SYSREASON = 8 | SYSREASON = 19) Then dsi = 0
          If dsi = 0 Then DSAVAILABLE = 'Y'
          else               DSAVAILABLE = 'N'
      End
     Otherwise  DSAVAILABLE = ' '
    End

   SRBA   = C2X(START_RBA)
   PRBA   = C2X(PIT_RBA)
   LZEILE = ''
   LZEILE = LZEILE || LEFT(OTYPE, 2, ' ')
   LZEILE = LZEILE LEFT(DBNAME, 8, ' ')
   LZEILE = LZEILE LEFT(TSNAME, 8, ' ')
   LZEILE = LZEILE LEFT(ICTYPE, 1, ' ')
   LZEILE = LZEILE RIGHT(LOGICAL_PART, 4, ' ')
   LZEILE = LZEILE LEFT(TIMESTAMP, 19, ' ')
   LZEILE = LZEILE LEFT(DSVOLSER, 5, ' ')
   LZEILE = LZEILE RIGHT(FILESEQNO, 4, ' ')
   LZEILE = LZEILE RIGHT(DSNUM, 3, ' ')
   LZEILE = LZEILE LEFT(JOBNAME,  9, ' ')
   Call Automatic_Data

   LZEILE = LZEILE ANZ_Daten('', SRBA                  , 'L', 20, ' ')
   LZEILE = LZEILE ANZ_Daten('', PRBA                  , 'L', 20, ' ')
   CALL ADD_TABLE
 END /* END DO I = 1 TO DDLTEXT */
CALL CLOSE_CURSOR_AC3
RETURN

LIST_SYSLGRNX:

WHERELIST = ""
CALL MAKE_WHERELIST "TS.DBNAME", DB2_CREATOR1
CALL MAKE_WHERELIST "TS.NAME", DB2_NAME1
Datum   = "DATE(SUBSTR(LG.LGRUCDT, 3, 2) || '.'   ||  ",
          "     SUBSTR(LG.LGRUCDT, 1, 2) || '.20' ||  ",
          "     SUBSTR(LG.LGRUCDT, 5, 2)          || )",
          ""

Uhrzeit = "TIME(SUBSTR(LG.LGRUCTM, 1, 2) || ':'   ||  ",
          "     SUBSTR(LG.LGRUCTM, 3, 2) || ':'   ||  ",
          "     SUBSTR(LG.LGRUCTM, 5, 2)          || )",
          ""
If DB2_CREATOR1 = "" & DB2_NAME1 = "" Then do
   Such2  = "Current Date"
   Such3  = "Current Time -10 Minutes "
 End
CALL MAKE_WHERELIST Datum,   Such2
CALL MAKE_WHERELIST Uhrzeit, Such3
CALL MAKE_WHERELIST "", "LG.LGRELRSN <> x'00000000000000000000'"

SQLSTMT   = "SELECT    SUBSTR(DBNAME, 1, 8)  AS DBNAME            ",
            "        , SUBSTR(NAME, 1, 8)    AS TSNAME            ",
            "        , HEX(LGRDBID)  AS LGRDBID                   ",
            "        , HEX(LGRPSID)  AS LGRPSID                   ",
            ", CASE WHEN YEAR(TIMESTAMP(SUBSTR(LG.LGRELRSN,2,8))) ",
            "  = 1900 THEN CURRENT Date      ELSE                 ",
            " date(TIMESTAMP(SUBSTR(LG.LGRELRSN, 2,8))) END AS LGRUCDT",
            ", CASE WHEN YEAR(TIMESTAMP(SUBSTR(LG.LGRELRSN,2,8))) ",
            "  = 1900 THEN CURRENT Time      ELSE                 ",
            " Time(TIMESTAMP(SUBSTR(LG.LGRELRSN, 2,8))) END AS LGRUCTM",
            "        , HEX(LGRSRBA)   AS LGRSRBA                  ",
            "        , HEX(LGRSPBA)   AS LGRSPBA                  ",
            "        , HEX(LGRPART)   AS LGRPART                  ",
            "        , HEX(LGRSLRSN)  AS LGRSLRSN                 ",
            "        , HEX(LGRELRSN)  AS LGRELRSN                 ",
            "        , HEX(LGRMEMB)   AS LGRMEMB                  ",
            "FROM "SYSIBMS".SYSLGRNX                LG            ",
            "INNER JOIN "SYSIBMS".SYSTABLESPACE     TS            ",
            "ON  LG.LGRDBID     = EBCDIC_CHR(INT(DBID/256)) ||    ",
            " EBCDIC_CHR(INT(MOD(DBID,256)))                      ",
            "AND LG.LGRPSID     = EBCDIC_CHR(INT(PSID/256)) ||    ",
            "EBCDIC_CHR(INT(MOD(PSID,256)))                       ",
            WHERELIST ,
            "ORDER BY  TS.DBNAME, TS.NAME                         ",
            ", CASE WHEN YEAR(TIMESTAMP(SUBSTR(LG.LGRELRSN,2,8))) ",
            "  = 1900 THEN CURRENT TIMESTAMP ELSE                 ",
            " TIMESTAMP(SUBSTR(LG.LGRELRSN, 2,8)) END             ",
            "DESC                                                 ",
            ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.7.SQLLEN   = 20           /* LGRSRBA                   */
OUTSQLDA.8.SQLLEN   = 20           /* LGRSPBA                   */
OUTSQLDA.10.SQLLEN  = 20           /* LGRSLRSN                  */
OUTSQLDA.11.SQLLEN  = 22           /* LGRELRSN                  */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END /* END DO I = 1 TO DDLTEXT */
CALL CLOSE_CURSOR_AC3
RETURN

LIST_RO:

WHERELIST = ""
CALL MAKE_WHERELIST "RO.DEFINER", DB2_CREATOR1
CALL MAKE_WHERELIST "RO.NAME", DB2_NAME1

SQLSTMT    = "SELECT   NAME         ",
             "      ,  DEFINER      ",
             "      ,  DEFINERTYPE  ",
             "      ,  CREATEDTS    ",
             "      ,  RELCREATED   ",
             "      ,  REMARKS      ",
             "FROM "SYSIBMS".SYSROLES RO" ,
              WHERELIST ,
             "ORDER BY RO.NAME       " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 24           /* NAME                      */
OUTSQLDA.2.SQLLEN   = 8            /* DEFINER                   */
OUTSQLDA.6.SQLLEN   = 30           /* REMARKS                   */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END /* END DO I = 1 TO DDLTEXT */
CALL CLOSE_CURSOR_AC3
RETURN

LIST_PK:
CNR = 1
SNR = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "CO.TBCREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "CO.TBNAME   ", DB2_NAME1
CALL MAKE_WHERELIST "CO.IXOWNER  ", DB2_CREATOR2
CALL MAKE_WHERELIST "CO.IXNAME   ", DB2_NAME2

SQLSTMT   =  "SELECT CO.CONSTNAME  ",
             "     , CO.TBCREATOR  ",
             "     , CO.TBNAME     ",
             "     , CO.IXOWNER    ",
             "     , CO.IXNAME     ",
             "     , CO.TYPE       ",
             "     , CO.CREATOR    ",
             "     , CO.COLCOUNT   ",
             "     , CO.CREATEDTS  ",
             "     , CO.RELCREATED ",
             "FROM "SYSIBMS".SYSTABCONST CO ",
             WHERELIST ,
             "ORDER BY CO.CREATOR",
             "       , CO.TBNAME   ",
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   = 22           /* CONSTNAME                 */
OUTSQLDA.2.SQLLEN   = 9            /* TBCREATOR                 */
OUTSQLDA.3.SQLLEN   = 35           /* TBNAME                    */
OUTSQLDA.4.SQLLEN   = 9            /* IXOWNER                   */
OUTSQLDA.5.SQLLEN   = 50           /* IXNAME                    */
OUTSQLDA.7.SQLLEN   = 8            /* CREATOR                   */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("CONST", 1, 10)
DDLTEXT = DDLTEXT SUBSTR("T", 1, 1)
DDLTEXT = DDLTEXT SUBSTR("TBCreato", 1, 8)
DDLTEXT = DDLTEXT SUBSTR("TBNAME", 1, 18)
DDLTEXT = DDLTEXT SUBSTR("IXCreato", 1, 8)
DDLTEXT = DDLTEXT SUBSTR("IXNAME", 1, 18)
DDLTEXT = DDLTEXT SUBSTR("COL", 1, 3)
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   LZEILE = LZEILE || Left(CONSTNAME, 10, ' ')
   LZEILE = LZEILE  Left(TYPE, 1 , ' ')
   LZEILE = LZEILE  Left(TBCREATOR, 8, ' ')
   LZEILE = LZEILE  Left(TBNAME, 18, ' ')
   LZEILE = LZEILE  Left(IXOWNER, 8, ' ')
   LZEILE = LZEILE  Left(IXNAME, 18, ' ')
   LZEILE = LZEILE  Right(COLCOUNT, 3, ' ')
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return

LIST_VAR:
CNR = 1
SNR = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "VAR.SCHEMA", DB2_CREATOR1
CALL MAKE_WHERELIST "VAR.NAME  ", DB2_NAME1
CALL MAKE_WHERELIST "VAR.VARID", DB2_NAME2, "NUM"

SQLSTMT   =  "SELECT    INT(VARID) AS VARID ",
             "        , SCHEMA         ",
             "        , NAME           ",
             "        , TYPESCHEMA     ",
             "        , TYPENAME       ",
             "        , LENGTH         ",
             "        , SCALE          ",
             "        , SOURCETYPEID   ",
             "        , CCSID          ",
             "        , ENVID          ",
             "        , DEFAULT        ",
             "        , DEFAULTTEXT    ",
             "        , OWNER          ",
             "        , OWNERTYPE      ",
             "        , DATATYPEID     ",
             "        , CREATEDTS      ",
             "        , RELCREATED     ",
             "        , REMARKS        ",
             "FROM "SYSIBMS".SYSVARIABLES VAR",
             WHERELIST ,
             "ORDER BY VAR.SCHEMA",
             "       , VAR.NAME  ",
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.2.SQLLEN   =  15          /* SCHEMA                    */
OUTSQLDA.3.SQLLEN   =  33          /* NAME                      */
OUTSQLDA.4.SQLLEN   =  10          /* TYPESCHEMA                */
OUTSQLDA.5.SQLLEN   =  15          /* TYPENAME                  */
OUTSQLDA.12.SQLLEN  =  32          /* DEFAULTTEXT               */
OUTSQLDA.13.SQLLEN  =  8           /* OWNER                     */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return

LIST_VARA:
CNR = 1
SNR = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "SCHEMA", DB2_CREATOR1
CALL MAKE_WHERELIST "NAME  ", DB2_NAME1

SQLSTMT   =  "SELECT    SCHEMA              ",
             "        , NAME                ",
             "        , GRANTOR             ",
             "        , GRANTORTYPE         ",
             "        , GRANTEE             ",
             "        , GRANTEETYPE         ",
             "        , COLLID              ",
             "        , CONTOKEN            ",
             "        , READAUTH            ",
             "        , WRITEAUTH           ",
             "        , AUTHHOWGOT          ",
             "        , GRANTEDTS           ",
             "FROM "SYSIBMS".SYSVARIABLEAUTH VA",
             WHERELIST ,
             "ORDER BY VA.SCHEMA",
             "       , VA.NAME  ",
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   =  10          /* SCHEMA                    */
OUTSQLDA.2.SQLLEN   =  33          /* NAME                      */
OUTSQLDA.3.SQLLEN   =  10          /* CRANTOR                   */
OUTSQLDA.4.SQLLEN   =  11          /* CRANTORTYPE               */
OUTSQLDA.5.SQLLEN   =  10          /* GRANTEE                   */
OUTSQLDA.6.SQLLEN   =  11          /* GRANTEETYPE               */
OUTSQLDA.7.SQLLEN   =  11          /* COLLID                    */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return


LIST_IXC:
CNR = 1
SNR = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "IXC.DBNAME", DB2_CREATOR1
CALL MAKE_WHERELIST "IXC.INDEXSPACE", DB2_NAME1

SQLSTMT   =  "SELECT DBNAME                  " ,
             "     , INDEXSPACE              " ,
             "     , ENABLE_DISABLE AS EN_DIS" ,
             "     , MONTH_WEEK              " ,
             "     , MONTH                   " ,
             "     , DAY                     " ,
             "     , START_TIME              " ,
             "     , END_TIME                " ,
             "FROM "SYSIBMS".SYSINDEXCLEANUP IXC" ,
             WHERELIST ,
             "ORDER BY IXC.DBNAME",
             "       , IXC.INDEXSPACE ",
             ""
CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   =  8           /* DBNAME                    */
OUTSQLDA.2.SQLLEN   =  10          /* INDEXSPACE                */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return

LIST_SC:

 Select
   When Length(DB2_NAME1) > 0 Then Do
        WHERELIST    = ""
        CALL MAKE_WHERELIST "CREATOR", DB2_NAME1
        WHERELIST_CR = WHERELIST

        WHERELIST    = ""
        CALL MAKE_WHERELIST "SCHEMA",  DB2_NAME1
        WHERELIST_SC = WHERELIST
    End
   When Length(DB2_NAME2) > 0 Then Do
        such1     = "Select Distinct Creator   ",
                    "From "SYSIBMS".systables ",
                    "Where DBNAME = '" || DB2_NAME2 || "'",
                    ""
        Call LIST_SQLEX

        ADDRESS ISPEXEC  'TBCLOSE 'SELTAB
        ADDRESS ISPEXEC  'TBOPEN  'SELTAB
        ADDRESS ISPEXEC  'TBSKIP  'SELTAB
        Komma = ""
        Do while rc = 0
           DB2_NAME1 = DB2_NAME1 || ,
                       KOmma  ,
                       "'" || COL1 || "'"
           ADDRESS ISPEXEC  'TBSKIP  'SELTAB
           Komma = ","
        End
        ADDRESS ISPEXEC  'TBCLOSE 'SELTAB
        ADDRESS ISPEXEC  'TBERASE 'SELTAB
/*
        ADDRESS ISPEXEC  'TBCLOSE 'LUWTABLE
        ADDRESS ISPEXEC  'TBERASE 'COLTAB
        ADDRESS ISPEXEC  'TBERASE 'BRTAB
*/
        DDLTEXT = ""
        WHERELIST    = ""
        IF DB2_NAME1 = "" THEN DB2_NAME1 = "''"
        CALL MAKE_WHERELIST "", "CREATOR IN ("DB2_NAME1")"
        WHERELIST_CR = WHERELIST

        WHERELIST    = ""
        CALL MAKE_WHERELIST "", "SCHEMA IN ("DB2_NAME1")"
        WHERELIST_SC = WHERELIST
    End
   Otherwise Nop
  End

CNR = 1
SNR = CNR

SQLSTMT   =  "SELECT DISTINCT TB.CREATOR  AS SCHEMA" ,
             "     , (Select COUNT(*) FROM "SYSIBMS".SYSTABLES  T1" ,
             "        WHERE T1.CREATOR = TB.CREATOR               " ,
             "        AND TYPE IN ('T', 'P', 'X', 'R', 'H', 'G', 'C')",
             "        ) AS TABLES                                 " ,
             "     , (Select COUNT(*) FROM "SYSIBMS".SYSTABLES  T1" ,
             "        WHERE T1.CREATOR = TB.CREATOR               " ,
             "        AND T1.TYPE = 'A'             )  AS ALIAS   " ,
             "     , (Select COUNT(*) FROM "SYSIBMS".SYSTABLES  T2" ,
             "        WHERE T2.CREATOR = TB.CREATOR               " ,
             "        AND T2.TYPE IN('V', 'M')      )  AS VIEWS   " ,
             "     , (Select COUNT(*) FROM "SYSIBMS".SYSINDEXES   IX" ,
             "        WHERE IX.CREATOR = TB.CREATOR )  AS INDEX   " ,
             "     , (Select COUNT(*) FROM "SYSIBMS".SYSSEQUENCES SE" ,
             "        WHERE SE.SCHEMA = TB.CREATOR )  AS SEQUENCE " ,
             "     , (Select COUNT(*) FROM "SYSIBMS".SYSTRIGGERS  TG" ,
             "        WHERE TG.SCHEMA = TB.CREATOR )  AS TRIGGER  " ,
             "     , (Select COUNT(*) FROM "SYSIBMS".SYSROUTINES  RT" ,
             "        WHERE RT.SCHEMA = TB.CREATOR )  AS ROUTINS  " ,
             "     , (Select COUNT(*) FROM "SYSIBMS".SYSVARIABLES VA" ,
             "        WHERE VA.SCHEMA = TB.CREATOR )  AS VAR      " ,
             "     , (Select COUNT(*) FROM "SYSIBMS".SYSDATATYPES DT" ,
             "        WHERE DT.SCHEMA = TB.CREATOR )  AS DATATYPE " ,
             "     , (Select COUNT(*) FROM "SYSIBMS".SYSRELS      FK" ,
             "        WHERE FK.CREATOR = TB.CREATOR )  AS RELS     " ,
             "FROM (                                              " ,
             "     SELECT DISTINCT CREATOR                        ",
             "     FROM "SYSIBMS".SYSTABLES TB                    ",
                   WHERELIST_CR ,
             "     UNION ALL                                      ",
             "     Select DISTINCT SCHEMA                         ",
             "     FROM "SYSIBMS".SYSSEQUENCES SE                 ",
                   WHERELIST_SC ,
             "     UNION ALL                                      ",
             "     Select DISTINCT SCHEMA                         ",
             "     FROM "SYSIBMS".SYSTRIGGERS  TG                 ",
                   WHERELIST_SC ,
             "     UNION ALL                                      ",
             "     Select DISTINCT SCHEMA                         ",
             "     FROM "SYSIBMS".SYSROUTINES  RT                 ",
                   WHERELIST_SC ,
             "     UNION ALL                                      ",
             "     Select DISTINCT SCHEMA                         ",
             "     FROM "SYSIBMS".SYSVARIABLES VA                 ",
                   WHERELIST_SC ,
             "     UNION ALL                                      ",
             "     Select DISTINCT SCHEMA                         ",
             "     FROM "SYSIBMS".SYSDATATYPES   DT               ",
                   WHERELIST_SC ,
             "     UNION ALL                                      ",
             "     Select DISTINCT CREATOR                        ",
             "     FROM "SYSIBMS".SYSRELS        FK               ",
                   WHERELIST_CR ,
             "     ) TB (CREATOR)                                 ",
             WHERELIST_CR ,
             "GROUP BY TB.CREATOR                                 " ,
             "ORDER BY TB.CREATOR                                 " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB
OUTSQLDA.1.SQLLEN   = 15           /* SCHEMA                    */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return

LIST_STMT:

WHERELIST = ""
CALL MAKE_WHERELIST "COLLID", DB2_CREATOR1
CALL MAKE_WHERELIST "NAME", DB2_NAME1
CALL MAKE_WHERELIST "VERSION", SUCH2

Maxlen = 400
SQLSTMT    = "SELECT MAX(LENGTH(STATEMENT)) AS MAXLEN " ,
             "FROM  "SYSIBMS".SYSPACKSTMT " ,
             WHERELIST ,
             ""
CALL OPEN_CURSOR_AC3
SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
Call EXECUTE_SQL_TEXT_AC3
CALL CLOSE_CURSOR_AC3

SQLSTMT    = "SELECT LOCATION      " ,
             "     , COLLID        " ,
             "     , NAME          " ,
             "     , CONTOKEN      " ,
             "     , SEQNO         " ,
             "     , STMTNO        " ,
             "     , SECTNO        " ,
             "     , STATEMENT AS TEXT " ,
             "FROM  "SYSIBMS".SYSPACKSTMT " ,
             WHERELIST ,
             "ORDER BY 1, 2, 3, 4 " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("PKG NAME", 1, 18)
DDLTEXT = DDLTEXT SUBSTR("STMTNO", 1, 6)
DDLTEXT = DDLTEXT SUBSTR("STMT", 1, 44)
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
    SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
    Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   If Length(TEXT) > MaxLen Then Do
      Maxlen = Length(TEXT)
    End
   If MAXLEN < 1 Then MAXLEN = 1
   LZEILE  = ''
   TEMP = STRIP(COLLID)||'.'||STRIP(NAME)
   LZEILE = LZEILE || LEFT(TEMP, 18)
   LZEILE = LZEILE LEFT(STMTNO, 6)
   LZEILE = LZEILE LEFT(TEXT, MAXLEN)
   CALL ADD_TABLE
 END /* END DO I = 1 TO DDLTEXT */
CALL CLOSE_CURSOR_AC3
RETURN

LIST_PRGA:
CNR = 1
SNR = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "PA.PROGNAME", DB2_CREATOR1
CALL MAKE_WHERELIST "PA.PLANNAME", DB2_NAME1

SQLSTMT   =  "SELECT PA.PROGNAME   ",
             "    ,  PA.PLANNAME   ",
             "    ,  PA.PROGMDCVAL ",
             "    ,  PA.PROGMDCPAD ",
             "    ,  PA.CREATOR    ",
             "    ,  PA.ENABLED    ",
             "    ,  PA.CREATETS   ",
             "    ,  PA.REMARKS    ",
             "FROM "SYSIBMS".DSNPROGAUTH PA " ,
             WHERELIST ,
             "ORDER BY PA.PROGNAME, PA.PLANNAME " ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.5.SQLLEN   = 8            /* PROGNAME                  */
OUTSQLDA.3.SQLLEN   = 21           /* PROGMDCVAL                */
OUTSQLDA.8.SQLLEN   = 100          /* REMARKS                   */

DDLTEXT = DDLTEXT || "*UZ*"

call Automatic_Header
DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return

LIST_STF:    /* STATS FEEDBACK */
CNR = 1
SNR = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "SF.TBCREATOR",DB2_CREATOR1
CALL MAKE_WHERELIST "SF.TBNAME",   DB2_NAME1

CALL MAKE_WHERELIST "SF.DBNAME",   DB2_CREATOR2
CALL MAKE_WHERELIST "SF.TSNAME",   DB2_NAME2

CALL MAKE_WHERELIST "SF.IXCREATOR",DB2_CREATOR3
CALL MAKE_WHERELIST "SF.IXNAME",   DB2_NAME3

CALL MAKE_WHERELIST "SF.TYPE",     DB2_CREATOR4
CALL MAKE_WHERELIST "SF.COLNAME",  DB2_NAME4

SQLSTMT    = "SELECT CASE SF.TYPE  WHEN 'C' THEN 'C Cardinality '  ",
             "                     WHEN 'F' THEN 'F Frequency   '  ",
             "                     WHEN 'H' THEN 'H Histogram   '  ",
             "                     WHEN 'I' THEN 'I Index       '  ",
             "                     WHEN 'T' THEN 'T Table       '  ",
             "     ELSE  SF.TYPE CONCAT ' UNKOWN TYPE' END AS TYPE ",
             "        , SF.TBCREATOR           ",
             "        , SF.TBNAME              ",
             "        , SF.DBNAME              ",
             "        , SF.TSNAME              ",
             "        , SF.IXCREATOR           ",
             "        , SF.IXNAME              ",
             "        , SF.COLNAME             ",
             "        , SF.NUMCOLUMNS          ",
             "        , SF.COLGROUPCOLNO       ",
             "        , SF.REASON              ",
             "        , SF.BLOCK_RUNSTATS      ",
             "        , SF.LASTDATE            ",
             "        , SF.REMARKS             ",
             "FROM "SYSIBMS".SYSSTATFEEDBACK SF",
             "INNER JOIN "SYSIBMS".SYSTABLES TB",
             "ON  SF.TBCREATOR  = TB.CREATOR   ",
             "AND SF.TBNAME     = TB.NAME      ",
              WHERELIST ,
             "AND NOT EXISTS (SELECT 1                          ",
             "                FROM "SYSIBMS".SYSINDEXPART IP    ",
             "                WHERE SF.TYPE = 'I'               ",
             "                AND   SF.IXCREATOR = IP.IXCREATOR ",
             "                AND   SF.IXNAME    = IP.IXNAME    ",
             "                AND   IP.SPACE < 0                ",
             "                UNION ALL                         ",
             "                SELECT 1                          ",
             "                FROM "SYSIBMS".SYSTABLEPART TP    ",
             "                WHERE SF.TYPE <> 'I'              ",
             "                AND   SF.DBNAME = TP.DBNAME       ",
             "                AND   SF.TSNAME = TP.TSNAME       ",
             "                AND   TP.SPACE   < 0              ",
             "                FETCH FIRST 1 ROWS ONLY           ",
             "               )                                  ",
             "ORDER BY SF.DBNAME               ",
             "       , SF.TSNAME               ",
             "       , SF.TBCREATOR            ",
             "       , SF.TBNAME               ",
             "       , SF.TYPE                 ",
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN    = 15           /* TYPE                      */
OUTSQLDA.2.SQLLEN    = 8            /* TBCREATOR                 */
OUTSQLDA.3.SQLLEN    = 28           /* TBNAME                    */
OUTSQLDA.4.SQLLEN    = 8            /* DBNAME                    */
OUTSQLDA.5.SQLLEN    = 8            /* TSNAME                    */
OUTSQLDA.6.SQLLEN    = 8            /* IXCREATOR                 */
OUTSQLDA.7.SQLLEN    = 30           /* IXNAME                    */
OUTSQLDA.8.SQLLEN    = 30           /* COLNAME                   */
OUTSQLDA.10.SQLLEN   = 13           /* COLGROUPCOLNO             */
OUTSQLDA.11.SQLLEN   = 8            /* REASON                    */
OUTSQLDA.13.SQLLEN   = 8            /* LASTDATE                  */
OUTSQLDA.14.SQLLEN   = 75           /* REMARKS                   */

DDLTEXT = DDLTEXT || "*UZ*"

call Automatic_Header
DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return


LIST_TBH:    /* SYSTABLE_HIST  */
CNR = 1
SNR = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "TH.CREATOR",DB2_CREATOR1
CALL MAKE_WHERELIST "TH.NAME",   DB2_NAME1


SQLSTMT    = "SELECT    CREATOR                   ",
             "        , NAME                      ",
             "        , DBNAME                    ",
             "        , TSNAME                    ",
             "        , COLCOUNT                  ",
             "        , PCTPAGES                  ",
             "        , PCTROWCOMP                ",
             "        , STATSTIME                 ",
             "        , BIGINT(CARDF)   AS CARDF  ",
             "        , BIGINT(NPAGESF) AS NPAGESF",
             "        , AVGROWLEN                 ",
             "        , BIGINT(SPACEF)  AS SPACEF ",
             "FROM "SYSIBMS".SYSTABLES_HIST TH    ",
              WHERELIST                            ,
             "ORDER BY  CREATOR, NAME, STATSTIME  ",


CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN    = 10           /* CREATOR                   */
OUTSQLDA.2.SQLLEN    = 30           /* NAME                      */
OUTSQLDA.3.SQLLEN    = 9            /* DBNAME                    */
OUTSQLDA.4.SQLLEN    = 9            /* TSNAME                    */

DDLTEXT = DDLTEXT || "*UZ*"

call Automatic_Header
DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return


LIST_RFS:           /* RESTFul Service    */
CNR = 1
SNR = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "Upper(DS.COLLID)   ",DB2_CREATOR1
CALL MAKE_WHERELIST "Upper(DS.NAME)  ",   DB2_NAME1


SQLSTMT    = "SELECT COLLID        ",
             "     , NAME          ",
             "     , CONTOKEN      ",
             "     , ENABLED       ",
             "     , CREATEDTS     ",
             "     , ALTEREDTS     ",
             "     , DESCRIPTION   ",
             "FROM "SYSIBMS".DSNSERVICE DS ",
              WHERELIST ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN    = 20           /* COLLID                    */
OUTSQLDA.2.SQLLEN    = 20           /* NAME                      */
OUTSQLDA.7.SQLLEN    = 75           /* DESCRIPTION               */

DDLTEXT = DDLTEXT || "*UZ*"

call Automatic_Header
DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return

LIST_STP:    /* STATS PROFILE  */
CNR = 1
SNR = CNR

WHERELIST    = ""

CALL MAKE_WHERELIST "SP.SCHEMA ",DB2_CREATOR1
CALL MAKE_WHERELIST "SP.TBNAME ",   DB2_NAME1

SQLSTMT    = "SELECT   SP.SCHEMA ",
             "       , SP.TBNAME         ",
             "       , SP.PROFILE_TYPE   ",
             "       , SP.PROFILE_MODE   ",
             "       , SP.PROFILE_UPDATE ",
             "       , SP.PROFILE_USED   ",
             "       , SP.PROFILE_TEXT   ",
             "FROM "SYSIBMS".SYSTABLES_PROFILES SP ",
                WHERELIST ,
             "ORDER BY SP.SCHEMA, SP.TBNAME, SP.PROFILE_TYPE ",
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN    = 10           /* SCHEMA                    */
OUTSQLDA.2.SQLLEN    = 30           /* TBNAME                    */
OUTSQLDA.3.SQLLEN    = 12           /* PROFILE_TYPE              */
OUTSQLDA.4.SQLLEN    = 12           /* PROFILE_MODE              */
OUTSQLDA.5.SQLLEN    = 8            /* PROFILE_UPDATE            */
OUTSQLDA.6.SQLLEN    = 8            /* PROFILE_USED              */
OUTSQLDA.7.SQLLEN    = 70           /* PROFILE_TEXT              */

DDLTEXT = DDLTEXT || "*UZ*"

call Automatic_Header
DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return

LIST_DEP:    /* SYSDEPENDENCIES     */
CNR = 1
SNR = CNR

WHERELIST    = ""

CALL MAKE_WHERELIST "DEP.DSCHEMA ",DB2_CREATOR1
CALL MAKE_WHERELIST "DEP.DNAME",   DB2_NAME1

CALL MAKE_WHERELIST "DEP.BSCHEMA ",DB2_CREATOR2
CALL MAKE_WHERELIST "DEP.BNAME",   DB2_NAME2

SQLSTMT    = "SELECT    DEP.BSCHEMA              " ,
             "        , DEP.BNAME                " ,
             "        , DEP.BTYPE                " ,
             "        , DEP.BCOLNAME             " ,
             "        , DEP.BCOLNO               " ,
             "        , DEP.BOWNER               " ,
             "        , DEP.BOWNERTYPE           " ,
             "        , DEP.DSCHEMA              " ,
             "        , DEP.DNAME                " ,
             "        , DEP.DTYPE                " ,
             "        , DEP.DCOLNAME             " ,
             "        , DEP.DCOLNO               " ,
             "        , DEP.DOWNER               " ,
             "        , DEP.DOWNERTYPE           " ,
             "        , DEP.BAUTH                " ,
             "        , DEP.DVERSION             " ,
             "FROM "SYSIBMS".SYSDEPENDENCIES  DEP" ,
             WHERELIST ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN     = 10           /* BSCHEMA                   */
OUTSQLDA.2.SQLLEN     = 30           /* BNAME                     */
OUTSQLDA.4.SQLLEN     = 20           /* BCOLNAME                  */
OUTSQLDA.6.SQLLEN     = 10           /* BOWNER                    */
OUTSQLDA.7.SQLLEN     = 30           /* BOWNERTYPE                */
OUTSQLDA.8.SQLLEN     = 10           /* DSCHEMA                   */
OUTSQLDA.9.SQLLEN     = 30           /* DNAME                     */
OUTSQLDA.11.SQLLEN    = 20           /* DCOLNAME                  */
OUTSQLDA.13.SQLLEN    = 10           /* DOWNER                    */
OUTSQLDA.15.SQLLEN    = 10           /* BAUTH                     */
OUTSQLDA.16.SQLLEN    = 10           /* DVERSION                  */

DDLTEXT = DDLTEXT || "*UZ*"

call Automatic_Header
DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return

LIST_ATL:
CNR = 1
SNR = CNR

WHERELIST    = ""
CALL MAKE_WHERELIST "ATL.USERID", DB2_CREATOR1

SQLSTMT   =  "SELECT USERID                 ",
             "     , BEGIN_TIMESTAMP        ",
             "     , END_TIMESTAMP          ",
             "     , MAX_INVOCATIONS        ",
             "     , INTERVAL               ",
             "     , POINT_IN_TIME          ",
             "     , TRIGGER_TASK_NAME      ",
             "     , TRIGGER_TASK_COND      ",
             "     , TRIGGER_TASK_CODE      ",
             "     , DB2_SSID               ",
             "     , PROCEDURE_SCHEMA       ",
             "     , PROCEDURE_NAME         ",
             "     , PROCEDURE_INPUT        ",
             "     , JCL_LIBRARY            ",
             "     , JCL_MEMBER             ",
             "     , JOB_WAIT               ",
             "     , TASK_NAME              ",
             "     , DESCRIPTION            ",
             "     , CREATOR                ",
             "     , LAST_MODIFIED          ",
             "FROM TABLE (DSNADM.ADMIN_TASK_LIST()) AS ATL ",
             WHERELIST ,
             "ORDER BY ATL.USERID ",
             "       , ATL.BEGIN_TIMESTAMP ",
             "       , ATL.END_TIMESTAMP ",
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

OUTSQLDA.1.SQLLEN   =  9           /* USERID                    */
OUTSQLDA.6.SQLLEN   =  33          /* POINT_IN_TIME             */
OUTSQLDA.7.SQLLEN   =  10          /* TRIGGER_TASK_NAME         */
OUTSQLDA.10.SQLLEN  =  4           /* DB2_SSID                  */
OUTSQLDA.11.SQLLEN  =  9           /* PROCEDURE_SCHEMA          */
OUTSQLDA.13.SQLLEN  =  15          /* PROCEDURE_NAME            */
OUTSQLDA.14.SQLLEN  =  70          /* PROCEDURE_INPUT           */
OUTSQLDA.15.SQLLEN  =  44          /* JCL_LIBRARY               */
OUTSQLDA.16.SQLLEN  =  8           /* JCL_MEMBER                */
OUTSQLDA.17.SQLLEN  =  8           /* JOB_WAIT                  */
OUTSQLDA.18.SQLLEN  =  70          /* TASK_NAME                 */
OUTSQLDA.19.SQLLEN  =  9           /* DESCRIPTION               */

DDLTEXT = DDLTEXT || "*UZ*"
call Automatic_Header
DDLTEXT = DDLTEXT "-NR"
DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End
   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return

LIST_STATS:  /* TABLE / LOBSTATS    */
CNR = 1
SNR = CNR

WHERELIST    = ""

select
  when db2_name2 = 'O' Then do
       CALL MAKE_WHERELIST "ST.DBNAME ", DB2_CREATOR1
       CALL MAKE_WHERELIST "St.NAME ",   DB2_NAME1


       SQLSTMT    = "SELECT    ST.STATSTIME             " ,
                    "        , ST.DBNAME                " ,
                    "        , ST.NAME                  " ,
                    "        , ST.AVGSIZE               " ,
                    "        , ST.FREESPACE             " ,
                    "        , ST.ORGRATIO              " ,
                    "FROM "SYSIBMS".SYSLOBSTATS      ST " ,
                    WHERELIST ,
                    ""

   End

  Otherwise Do
       CALL MAKE_WHERELIST "ST.DBNAME ", DB2_CREATOR1
       CALL MAKE_WHERELIST "St.TSNAME ", DB2_NAME1


       sqlstmt =    "select    ST.STATSTIME             " ,
                    "        , ST.DBNAME                " ,
                    "        , ST.TSNAME                " ,
                    "        , ST.PARTITION             " ,
                    "        , ST.OWNER                 " ,
                    "        , ST.NAME                  " ,
                    "        , ST.CARD                  " ,
                    "        , BIGINT(ST.CARDF) AS CARDF " ,
                    "        , ST.NPAGES                " ,
                    "        , ST.PCTPAGES              " ,
                    "        , ST.NACTIVE               " ,
                    "        , ST.PCTROWCOMP            " ,
                    "FROM "SYSIBMS".SYSTABSTATS      ST " ,
                    WHERELIST ,
                    ""
   End

 End

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB

select
  when db2_name2 = 'O' Then do
       OUTSQLDA.2.SQLLEN     = 10           /* DBNAME         */
       OUTSQLDA.3.SQLLEN     = 10           /* NAME           */
   End
  Otherwise Do
       OUTSQLDA.2.SQLLEN     = 10           /* DBNAME         */
       OUTSQLDA.3.SQLLEN     = 10           /* TSNAME         */
       OUTSQLDA.5.SQLLEN     = 10           /* TBOWNER        */
       OUTSQLDA.6.SQLLEN     = 10           /* TBNAME         */
   End
 End


DDLTEXT = DDLTEXT || "*UZ*"

call Automatic_Header
DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return

LIST_BR:    /* SYSDEPENDENCIES     */
CNR = 4
SNR = CNR

save = DB2_EDITSQL
DB2_EDITSQL = 'N'
db2_list_Obj = Space(DB2_CREATOR1 "." DB2_NAME1, 0)
Call Get_TBCols
if tbCols = "" Then TBCols = "*"
WHERELIST    = ""

DB2_EDITSQL = save

SQLSTMT    = "SELECT "TBCols ,
             "FROM "db2_list_Obj ,
             WHERELIST ,
             ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB


DDLTEXT = DDLTEXT || "*UZ*"

call Automatic_Header
DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return

LIST_SSIDINFO:   /* SYSDEPENDENCIES     */
CNR = 4
SNR = CNR

WHERELIST = ""

SQLSTMT = "SELECT GETVARIABLE('"SYSIBMS".APPLICATION_ENCODING_SCHEME') ",
          "   AS APPLICATION_ENCODING_SCHEME                          ",
          "    , GETVARIABLE('"SYSIBMS".COBOL_STRING_DELIMITER')      ",
          "   AS COBOL_STRING_DELIMITER                               ",
          "    , GETVARIABLE('"SYSIBMS".DATA_SHARING_GROUP_NAME')     ",
          "   AS DATA_SHARING_GROUP_NAME                              ",
          "    , GETVARIABLE('"SYSIBMS".DATE_FORMAT')                 ",
          "   AS DATE_FORMAT                                          ",
          "    , GETVARIABLE('"SYSIBMS".DATE_LENGTH')                 ",
          "   AS DATE_LENGTH                                          ",
          "    , GETVARIABLE('"SYSIBMS".DECIMAL_ARITHMETIC')          ",
          "   AS DECIMAL_ARITHMETIC                                   ",
          "    , GETVARIABLE('"SYSIBMS".DECIMAL_POINT')               ",
          "   AS DECIMAL_POINT                                        ",
          "    , GETVARIABLE('"SYSIBMS".DEFAULT_DECFLOAT_ROUND_MODE') ",
          "   AS DEFAULT_DECFLOAT_ROUND_MODE                          ",
          "    , GETVARIABLE('"SYSIBMS".DEFAULT_SSID')                ",
          "   AS DEFAULT_SSID                                         ",
          "    , GETVARIABLE('"SYSIBMS".DEFAULT_LANGUAGE')            ",
          "   AS DEFAULT_LANGUAGE                                     ",
          "    , GETVARIABLE('"SYSIBMS".DEFAULT_LOCALE_LC_CTYPE')     ",
          "   AS DEFAULT_LOCALE_LC_CTYPE                              ",
          "  , GETVARIABLE('"SYSIBMS".DISTRIBUTED_SQL_STRING_DELIMITER') ",
          "   AS DISTRIBUTEDSQLSTRINGDELIMITER                     ",
          "    , GETVARIABLE('"SYSIBMS".DSNHDECP_NAME')               ",
          "   AS DSNHDECP_NAME                                        ",
          "    , GETVARIABLE('"SYSIBMS".DYNAMIC_RULES')               ",
          "   AS DYNAMIC_RULES                                        ",
          "    , GETVARIABLE('"SYSIBMS".ENCODING_SCHEME')             ",
          "   AS ENCODING_SCHEME                                      ",
          "    , GETVARIABLE('"SYSIBMS".MIXED_DATA')                  ",
          "   AS MIXED_DATA                                           ",
          "    , GETVARIABLE('"SYSIBMS".NEWFUN')                      ",
          "   AS NEWFUN                                               ",
          "    , GETVARIABLE('"SYSIBMS".PACKAGE_NAME')                ",
          "   AS PACKAGE_NAME                                         ",
          "    , GETVARIABLE('"SYSIBMS".PACKAGE_SCHEMA')              ",
          "   AS PACKAGE_SCHEMA                                       ",
          "    , GETVARIABLE('"SYSIBMS".PACKAGE_VERSION')             ",
          "   AS PACKAGE_VERSION                                      ",
          "    , GETVARIABLE('"SYSIBMS".PAD_NUL_TERMINATED')          ",
          "   AS PAD_NUL_TERMINATED                                   ",
          "    , GETVARIABLE('"SYSIBMS".PLAN_NAME')                   ",
          "   AS PLAN_NAME                                            ",
          "    , GETVARIABLE('"SYSIBMS".SECLABEL')                    ",
          "   AS SECLABEL                                             ",
          "    , GETVARIABLE('"SYSIBMS".SQL_STRING_DELIMITER')        ",
          "   AS SQL_STRING_DELIMITER                                 ",
          "    , GETVARIABLE('"SYSIBMS".SSID')                        ",
          "   AS SSID                                                 ",
          "    , GETVARIABLE('"SYSIBMS".STANDARD_SQL')                ",
          "   AS STANDARD_SQL                                         ",
          "    , GETVARIABLE('"SYSIBMS".SYSTEM_NAME')                 ",
          "   AS SYSTEM_NAME                                          ",
          "    , GETVARIABLE('"SYSIBMS".SYSTEM_ASCII_CCSID')          ",
          "   AS SYSTEM_ASCII_CCSID                                   ",
          "    , GETVARIABLE('"SYSIBMS".SYSTEM_EBCDIC_CCSID')         ",
          "   AS SYSTEM_EBCDIC_CCSID                                  ",
          "    , GETVARIABLE('"SYSIBMS".SYSTEM_UNICODE_CCSID')        ",
          "   AS SYSTEM_UNICODE_CCSID                                 ",
          "    , GETVARIABLE('"SYSIBMS".TIME_FORMAT')                 ",
          "   AS TIME_FORMAT                                          ",
          "    , GETVARIABLE('"SYSIBMS".TIME_LENGTH')                 ",
          "   AS TIME_LENGTH                                          ",
          "    , GETVARIABLE('"SYSIBMS".VERSION')                     ",
          "   AS VERSION                                              ",
          "FROM "SYSIBMS".SYSDUMMY1                                   ",
          ""

CALL OPEN_CURSOR_AC3
Call OPEN_COLTB


DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT LEFT("GETVARIABLE Name ", 33)
DDLTEXT = DDLTEXT LEFT("GETVARIABLE Value ", 30)

DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   CALL ADD_TABLE
   LZEILE  = "APPLICATION_ENCODING_SCHEME       " ,
              APPLICATION_ENCODING_SCHEME
   CALL ADD_TABLE
   LZEILE  = "COBOL_STRING_DELIMITER            " COBOL_STRING_DELIMITER
   CALL ADD_TABLE
   LZEILE  = "DATA_SHARING_GROUP_NAME           " ,
              DATA_SHARING_GROUP_NAME
   CALL ADD_TABLE
   LZEILE  = "DATE_FORMAT                       " DATE_FORMAT
   CALL ADD_TABLE
   LZEILE  = "DATE_LENGTH                       " DATE_LENGTH
   CALL ADD_TABLE
   LZEILE  = "DECIMAL_ARITHMETIC                " DECIMAL_ARITHMETIC
   CALL ADD_TABLE
   LZEILE  = "DECIMAL_POINT                     " DECIMAL_POINT
   CALL ADD_TABLE
   LZEILE  = "DEFAULT_DECFLOAT_ROUND_MODE       " ,
              DEFAULT_DECFLOAT_ROUND_MODE
   CALL ADD_TABLE
   LZEILE  = "DEFAULT_LANGUAGE                  " DEFAULT_LANGUAGE
   CALL ADD_TABLE
   LZEILE  = "DEFAULT_LOCALE_LC_CTYPE           " ,
              DEFAULT_LOCALE_LC_CTYPE
   CALL ADD_TABLE
   LZEILE  = "DEFAULT_SSID                      " DEFAULT_SSID
   CALL ADD_TABLE
   LZEILE  = "DISTRIBUTED_SQL_STRING_DELIMITER  " ,
              DISTRIBUTEDSQLSTRINGDELIMITER
   CALL ADD_TABLE
   LZEILE  = "DSNHDECP_NAME                     " DSNHDECP_NAME
   CALL ADD_TABLE
   LZEILE  = "DYNAMIC_RULES                     " DYNAMIC_RULES
   CALL ADD_TABLE
   LZEILE  = "ENCODING_SCHEME                   " ENCODING_SCHEME
   CALL ADD_TABLE
   LZEILE  = "MIXED_DATA                        " MIXED_DATA
   CALL ADD_TABLE
   LZEILE  = "NEWFUN                            " NEWFUN
   CALL ADD_TABLE
   LZEILE  = "PACKAGE_NAME                      " PACKAGE_NAME
   CALL ADD_TABLE
   LZEILE  = "PACKAGE_SCHEMA                    " PACKAGE_SCHEMA
   CALL ADD_TABLE
   LZEILE  = "PACKAGE_VERSION                   " PACKAGE_VERSION
   CALL ADD_TABLE
   LZEILE  = "PAD_NUL_TERMINATED                " PAD_NUL_TERMINATED
   CALL ADD_TABLE
   LZEILE  = "PLAN_NAME                         " PLAN_NAME
   CALL ADD_TABLE
   LZEILE  = "SECLABEL                          " SECLABEL
   CALL ADD_TABLE
   LZEILE  = "SQL_STRING_DELIMITER              " SQL_STRING_DELIMITER
   CALL ADD_TABLE
   LZEILE  = "SSID                              " SSID
   CALL ADD_TABLE
   LZEILE  = "STANDARD_SQL                      " STANDARD_SQL
   CALL ADD_TABLE
   LZEILE  = "SYSTEM_ASCII_CCSID                " SYSTEM_ASCII_CCSID
   CALL ADD_TABLE
   LZEILE  = "SYSTEM_EBCDIC_CCSID               " SYSTEM_EBCDIC_CCSID
   CALL ADD_TABLE
   LZEILE  = "SYSTEM_NAME                       " SYSTEM_NAME
   CALL ADD_TABLE
   LZEILE  = "SYSTEM_UNICODE_CCSID              " SYSTEM_UNICODE_CCSID
   CALL ADD_TABLE
   LZEILE  = "TIME_FORMAT                       " TIME_FORMAT
   CALL ADD_TABLE
   LZEILE  = "TIME_LENGTH                       " TIME_LENGTH
   CALL ADD_TABLE
   LZEILE  = "VERSION                           " VERSION
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

Return

Get_TBCols:

CNR = 1
SNR = CNR
parse value DB2_LIST_OBJ with TB_Creator "." TB_Name .
WHERELIST = ""
CALL MAKE_WHERELIST "TBCREATOR", TB_Creator
CALL MAKE_WHERELIST "TBNAME", TB_Name
CALL MAKE_WHERELIST "", "CO.NAME NOT LIKE 'DB2_GENERATED_ROWID%'"

SQLSTMT    = "SELECT COLNO               " ,
             "     , NAME                " ,
             "     , LENGTH2             " ,
             "     , COLTYPE                   " ,
             "FROM  "SYSIBMS".SYSCOLUMNS CO    " ,
             WHERELIST ,
             "ORDER BY COLNO                   " ,
             ""


CALL OPEN_CURSOR_AC3

Komma    = ""
TBCols   = ""
DO WHILE SQLCODE = 0
   CNR = 1
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3

   Select
       When SQLCODE = 100 THEN DO
            CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
            LEAVE
         End
       When SQLCODE <  0  THEN DO
            SAY "ERROR ON FETCH C"CNR", RC="RC ,
                "SQLCODE="SQLCODE         ,
                "SQLERRMC="SQLERRMC       ,
                ""
            Exit 8
         End
       Otherwise NOP
    End

   If COLTYPE = 'BLOB' Then DO
      NAME = "CAST(" || NAME" AS BLOB("MAXBLOBS")) AS "NAME
    End
   If COLTYPE = 'CLOB' Then DO
      NAME = "CAST(" || NAME" AS CLOB("MAXBLOBS")) AS "NAME
    End


   TBCols   = TBCols || Komma || Name
   Komma    = ","
 END   /* END WHILE SQLCODE = 0 */
DROP NAME COLNO LENGTH2 COLTYPE
RETURN

LIST_SPACE:

CNR = 1
SNR = CNR

WHERELIST    = ""
Select
   When  DB2_LIST_OBJ = "SG" Then do
         CALL MAKE_WHERELIST "DB.STGROUP      ", DB2_CREATOR1
         SQLSTMT   = "SELECT 'SG ' AS TYPE                     ",
                     "     , SUM(ST.SPACE)           SPACE_KB  ",
                     "     , SUM(ST.SPACE) / 1024 as SPACE_MB  ",
                     "     , SUM(ST.SPACE) / 1048576 SPACE_GB  ",
                     "FROM  "SYSIBMS".SYSDATABASE        DB" ,
                     "INNER JOIN "SYSIBMS".SYSTABLESPACESTATS ST" ,
                     "ON    DB.NAME  = ST.DBNAME                " ,
                     wherelist                          ,
                     " UNION ALL " ,
                     "SELECT 'IX ' AS TYPE                     ",
                     "     , SUM(ST.SPACE)           SPACE_KB  ",
                     "     , SUM(ST.SPACE) / 1024 as SPACE_MB  ",
                     "     , SUM(ST.SPACE) / 1048576 SPACE_GB  ",
                     "FROM  "SYSIBMS".SYSDATABASE        DB" ,
                     "INNER JOIN "SYSIBMS".SYSINDEXSPACESTATS ST" ,
                     "ON    DB.NAME  = ST.DBNAME                " ,
                     wherelist                          ,
                     ""
    End
   When  DB2_LIST_OBJ = "DB" Then do
         CALL MAKE_WHERELIST "ST.DBNAME       ", DB2_CREATOR1
         SQLSTMT   = "SELECT 'DB ' AS TYPE                     ",
                     "     , SUM(ST.SPACE)           SPACE_KB  ",
                     "     , SUM(ST.SPACE) / 1024 as SPACE_MB  ",
                     "     , SUM(ST.SPACE) / 1048576 SPACE_GB  ",
                     "FROM  "SYSIBMS".SYSTABLESPACESTATS ST" ,
                     wherelist                          ,
                     " UNION ALL " ,
                     "SELECT 'IX ' AS TYPE                     ",
                     "     , SUM(ST.SPACE)           SPACE_KB  ",
                     "     , SUM(ST.SPACE) / 1024 as SPACE_MB  ",
                     "     , SUM(ST.SPACE) / 1048576 SPACE_GB  ",
                     "FROM  "SYSIBMS".SYSINDEXSPACESTATS ST" ,
                     wherelist                          ,
                     ""
    End
   When  DB2_LIST_OBJ = "TS" Then do
         CALL MAKE_WHERELIST "ST.DBNAME       ", DB2_CREATOR1
         CALL MAKE_WHERELIST "ST.NAME         ", DB2_NAME1
         SQLSTMT   = "SELECT 'TS ' AS TYPE                     ",
                     "     , SUM(ST.SPACE)        as SPACE_KB  ",
                     "     , SUM(ST.SPACE) / 1024 as SPACE_MB  ",
                     "     , SUM(ST.SPACE) / 1048576 SPACE_GB  ",
                     "FROM  "SYSIBMS".SYSTABLESPACESTATS ST" ,
                     wherelist                          ,
                     ""
    End
   When  DB2_LIST_OBJ = "TP" Then do
         CALL MAKE_WHERELIST "ST.DBNAME       ", DB2_CREATOR1
         CALL MAKE_WHERELIST "ST.NAME         ", DB2_NAME1
         CALL MAKE_WHERELIST "PARTITION", DB2_NAME2, "NUM"
         SQLSTMT   = "SELECT 'TP ' AS TYPE                     ",
                     "     , SUM(ST.SPACE)        as SPACE_KB  ",
                     "     , SUM(ST.SPACE) / 1024 as SPACE_MB  ",
                     "     , SUM(ST.SPACE) / 1048576 SPACE_GB  ",
                     "FROM  "SYSIBMS".SYSTABLESPACESTATS ST" ,
                     wherelist                          ,
                     ""
    End
   When  DB2_LIST_OBJ = "IX" Then do
         CALL MAKE_WHERELIST "ST.CREATOR      ", DB2_CREATOR2
         CALL MAKE_WHERELIST "ST.NAME         ", DB2_NAME2
         SQLSTMT   = "SELECT 'IX ' AS TYPE                     ",
                     "     , SUM(ST.SPACE)        as SPACE_KB  ",
                     "     , SUM(ST.SPACE) / 1024 as SPACE_MB  ",
                     "     , SUM(ST.SPACE) / 1048576 SPACE_GB  ",
                     "FROM  "SYSIBMS".SYSINDEXSPACESTATS ST" ,
                     wherelist                          ,
                     ""
    End

   When  DB2_LIST_OBJ = "SC" Then do
         CALL MAKE_WHERELIST "TB.Creator      ", DB2_CREATOR2
         wherelist1  = wherelist
         wherelist   = ""
         CALL MAKE_WHERELIST "Creator         ", DB2_CREATOR2
         SQLSTMT   = "SELECT 'SC ' AS TYPE                     ",
                     "     , SUM(ST.SPACE)           SPACE_KB  ",
                     "     , SUM(ST.SPACE) / 1024 as SPACE_MB  ",
                     "     , SUM(ST.SPACE) / 1048576 SPACE_GB  ",
                     "FROM  "SYSIBMS".SYSTABLESPACESTATS ST" ,
                     "inner join  "SYSIBMS".SYSTABLES TB       " ,
                     "ON    ST.DBNAME   = TB.DBNAME            " ,
                     "AND   ST.NAME     = TB.TSNAME            " ,
                     wherelist1                         ,
                     " UNION ALL " ,
                     "SELECT 'IX ' AS TYPE                     ",
                     "     , SUM(ST.SPACE)           SPACE_KB  ",
                     "     , SUM(ST.SPACE) / 1024 as SPACE_MB  ",
                     "     , SUM(ST.SPACE) / 1048576 SPACE_GB  ",
                     "FROM  "SYSIBMS".SYSINDEXSPACESTATS ST" ,
                     wherelist                          ,
                     ""
    End
   When  DB2_LIST_OBJ = "TB" Then do
         CALL MAKE_WHERELIST "ST.DBNAME       ", DB2_CREATOR1
         CALL MAKE_WHERELIST "ST.NAME         ", DB2_NAME1
         wherelist1  = wherelist
         wherelist   = ""
         CALL MAKE_WHERELIST "IX.TBCREATOR    ", DB2_CREATOR2
         CALL MAKE_WHERELIST "IX.TBNAME       ", DB2_Name2
         wherelisti  = wherelist
         wherelist   = ""
         CALL MAKE_WHERELIST "AUX.TBOWNER     ", DB2_CREATOR2
         CALL MAKE_WHERELIST "AUX.TBNAME      ", DB2_Name2
         wherelista  = wherelist
         SQLSTMT   = "SELECT 'TB ' AS TYPE                     ",
                     "     , SUM(ST.SPACE)           SPACE_KB  ",
                     "     , SUM(ST.SPACE) / 1024 as SPACE_MB  ",
                     "     , SUM(ST.SPACE) / 1048576 SPACE_GB  ",
                     "FROM  "SYSIBMS".SYSTABLESPACESTATS ST" ,
                     wherelist1                         ,
                     " UNION ALL " ,
                     "SELECT 'IX ' AS TYPE                     ",
                     "     , SUM(ST.SPACE)           SPACE_KB  ",
                     "     , SUM(ST.SPACE) / 1024 as SPACE_MB  ",
                     "     , SUM(ST.SPACE) / 1048576 SPACE_GB  ",
                     "FROM  "SYSIBMS".SYSINDEXSPACESTATS ST" ,
                     "inner join  "SYSIBMS".SYSINDEXES IX      " ,
                     "ON    ST.CREATOR  = IX.CREATOR           " ,
                     "AND   ST.NAME     = IX.NAME              " ,
                     wherelisti                         ,
                     " UNION ALL " ,
                     "SELECT 'AUX' AS TYPE                     ",
                     "     , SUM(ST.SPACE)           SPACE_KB  ",
                     "     , SUM(ST.SPACE) / 1024 as SPACE_MB  ",
                     "     , SUM(ST.SPACE) / 1048576 SPACE_GB  ",
                     "FROM  "SYSIBMS".SYSAUXRELS     AUX       ",
                     "INNER JOIN "SYSIBMS".SYSTABLES TB        ",
                     "ON    AUX.AUXTBOWNER = TB.CREATOR        ",
                     "AND   AUX.AUXTBNAME  = TB.NAME           ",
                     "INNER JOIN "SYSIBMS".SYSTABLESPACESTATS ST" ,
                     "ON    TB.DBNAME      = ST.DBNAME         ",
                     "AND   TB.TSNAME      = ST.NAME           ",
                     wherelista                         ,
                     " UNION ALL " ,
                     "SELECT 'AUXIX' AS TYPE                     ",
                     "     , SUM(ST.SPACE)           SPACE_KB  ",
                     "     , SUM(ST.SPACE) / 1024 as SPACE_MB  ",
                     "     , SUM(ST.SPACE) / 1048576 SPACE_GB  ",
                     "FROM  "SYSIBMS".SYSAUXRELS     AUX       ",
                     "INNER JOIN "SYSIBMS".SYSINDEXES IX       ",
                     "ON    AUX.AUXTBOWNER = IX.TBCREATOR      ",
                     "AND   AUX.AUXTBNAME  = IX.TBNAME         ",
                     "INNER JOIN "SYSIBMS".SYSINDEXSPACESTATS ST" ,
                     "ON    IX.CREATOR     = ST.CREATOR        ",
                     "AND   IX.NAME        = ST.NAME           ",
                     wherelista                         ,
                     " UNION ALL " ,
                     "SELECT 'XML' AS TYPE                     ",
                     "     , SUM(ST.SPACE)           SPACE_KB  ",
                     "     , SUM(ST.SPACE) / 1024 as SPACE_MB  ",
                     "     , SUM(ST.SPACE) / 1048576 SPACE_GB  ",
                     "FROM  "SYSIBMS".SYSXMLRELS     AUX       ",
                     "INNER JOIN "SYSIBMS".SYSTABLES TB        ",
                     "ON    AUX.XMLTBOWNER = TB.CREATOR        ",
                     "AND   AUX.XMLTBNAME  = TB.NAME           ",
                     "INNER JOIN "SYSIBMS".SYSTABLESPACESTATS ST" ,
                     "ON    TB.DBNAME      = ST.DBNAME         ",
                     "AND   TB.TSNAME      = ST.NAME           ",
                     wherelista                         ,
                     " UNION ALL " ,
                     "SELECT 'XMLIX' AS TYPE                     ",
                     "     , SUM(ST.SPACE)           SPACE_KB  ",
                     "     , SUM(ST.SPACE) / 1024 as SPACE_MB  ",
                     "     , SUM(ST.SPACE) / 1048576 SPACE_GB  ",
                     "FROM  "SYSIBMS".SYSXMLRELS     AUX       ",
                     "INNER JOIN "SYSIBMS".SYSINDEXES IX       ",
                     "ON    AUX.XMLTBOWNER = IX.TBCREATOR      ",
                     "AND   AUX.XMLTBNAME  = IX.TBNAME         ",
                     "INNER JOIN "SYSIBMS".SYSINDEXSPACESTATS ST" ,
                     "ON    IX.CREATOR     = ST.CREATOR        ",
                     "AND   IX.NAME        = ST.NAME           ",
                     wherelista                         ,
                     ""
    End

   Otherwise return
 End


CALL OPEN_CURSOR_AC3
Call OPEN_COLTB


DDLTEXT = DDLTEXT || "*UZ*"

call Automatic_Header
DDLTEXT = DDLTEXT "-NR"

DO WHILE SQLCODE = 0
   SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
   Call EXECUTE_SQL_TEXT_AC3 saveileEdit

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR_AC3 /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE <> 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Call SQLERROR
             Exit 8
          End
        Otherwise NOP
     End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END

CALL CLOSE_CURSOR_AC3

RETURN

LIST_SQLEX:  /* EXEUTE A SQLSTATEMENT IN WRITE TO A ISPF-TABLE */
   CNR = 1
   SNR = CNR

   Eingabe.0 = 1
   Eingabe.1 = SUCH1

   Fetch_Data = "NO"
   CALL EXECUTE_SQL_DYNAMIC_AC3

   COLUMNS = ""
   KOMMA =   ""
   DO CI = 1 TO OUTSQLDA.SQLD
      COLUMNS = COLUMNS "COL"CI || KOMMA
      DDLTEXT = DDLTEXT OUTSQLDA.CI.SQLNAME
    END

   ADDRESS ISPEXEC  'TBCLOSE 'SELTAB
   ADDRESS ISPEXEC  'TBERASE 'SELTAB
   ADDRESS ISPEXEC  'TBOPEN  'SELTAB

   IF RC <> 0 THEN Do
      ADDRESS ISPEXEC  'TBCLOSE 'SELTAB
      ADDRESS ISPEXEC 'TBCREATE 'SELTAB ,
                      'KEYS(ROWNR) NAMES('COLUMNS') '
      If rc <> 0 Then DO
         say "TBCREATE "SELTAB "RC="RC
         say "ZEDSMSG="ZEDSMSG
         say "ZERRLM="ZERRLM
         say "ZERRMSG="ZERRMSG
         say "ZERRSM="ZERRSM
       End
       ADDRESS ISPEXEC  'TBOPEN  'SELTAB
    End

   ROWNR = 0
   DO WHILE SQLCODE = 0
      ROWNR = ROWNR + 1
      SQLTEXT =  " FETCH C"CNR" USING DESCRIPTOR :OUTSQLDA"
      Call EXECUTE_SQL_TEXT_AC3
      IF SQLCODE =  100 THEN LEAVE      /* UB       13.06.2013 */
      IF SQLCODE <    0 THEN Do         /* UB       13.06.2013 */
         SQLSTMT = SQLTEXT              /* UB       13.06.2013 */
         LEAVE
       End
      If sqlcode > 0 then sqlcode = 0   /* Warnings 13.06.2013 */
      DO CI = 1 TO OUTSQLDA.SQLD
         CO = "COL"CI
         INTERPRET CO "=" "OUTSQLDA.CI.SQLDATA"
       END
       ANZAHL_ROWS = ANZAHL_ROWS +1
      ADDRESS ISPEXEC 'TBADD 'SELTAB' MULT('TBADD_MULT')'
    END
ADDRESS ISPEXEC  'TBCLOSE 'SELTAB
SQLTEXT = "CLOSE C"CNR
Call EXECUTE_SQL_TEXT_AC3


Return

EXECUTE_IMMEDIATE:
    SQLSTMT = STRIP(SUCH1)
    DDLTEXT = "0"
    ANZAHL_ROWS = 1


    SELECT
       WHEN WORD(SQLSTMT, 1) = 'CONNECT' THEN DO
            SQLTEXT = " "SQLSTMT
            Call EXECUTE_SQL_TEXT_AC3
            sqlc = sqlcode
        END
       OTHERWISE DO
          SQLTEXT = " EXECUTE IMMEDIATE :SQLSTMT"
          Call EXECUTE_SQL_TEXT_AC3
          IF SQLCODE <  0 THEN DO
             DDLTEXT = sqlcode "SQLCODE="SQLCODE ,
             "SQLERRMC="SQLERRMC
             SQLTEXT = "ROLLBACK"
             Call EXECUTE_SQL_TEXT_AC3
           END
          ELSE DO
            If ACOMMIT = 'Y' Then Do
              SQLTEXT = "COMMIT"
              Call EXECUTE_SQL_TEXT_AC3
             End
           END
        END
     END

RETURN Sqlcode

LIST_GRP:   /* Thread */

RXDB2_PUTSTEM  = 'AUSGABE1. AUSGABE. AUSGABE3. AUSGABE4.'
Anzeige_stem   = 2
AUSGABE.0      = 0
AUSGABE1.0     = 0
AUSGABE2.0     = 0
AUSGABE3.0     = 0
AUSGABE4.0     = 0
DB2_Creator1 = Strip(TRANSLATE(DB2_NAME1, '*', '%'))
DB2_NAME1    = Strip(TRANSLATE(DB2_NAME1, '*', '%'))
SQLSTMT    = "",
             " CALL "SYSPROCA".ADMIN_COMMAND_DB2 ( " ,
             " '-DISPLAY GROUP '                   " ,
             " ,   200                             " ,
             " ,   'GRP'                           " ,
             " ,   ''                              " ,
             " ,   500                             " ,
             " ,   0                               " ,
             " ,   0                               " ,
             " ,   0                               " ,
             " ,   0                               " ,
             " ,   0                               " ,
             " ,   0                               " ,
             " ,   ''                              " ,
             " )                                   " ,
             " ;                                   " ,
             ""

CALL Stored_Procedure
Call OPEN_COLTB

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("ID", 1, 3)
DDLTEXT = DDLTEXT SUBSTR("SSID", 1, 5)
DDLTEXT = DDLTEXT SUBSTR("CMDPREF", 1, 6)
DDLTEXT = DDLTEXT SUBSTR("STATUS", 1, 8)
DDLTEXT = DDLTEXT SUBSTR("LVL", 1, 5)
DDLTEXT = DDLTEXT SUBSTR("SMFID", 1, 6)
DDLTEXT = DDLTEXT SUBSTR("IRLM", 1, 5)
DDLTEXT = DDLTEXT SUBSTR("IRLMPROC", 1, 8)
DDLTEXT = DDLTEXT SUBSTR("Mode", 1, 6)
DDLTEXT = DDLTEXT SUBSTR("Group", 1, 7 )
call Automatic_Header

parse value ausgabe1.1.text with UI "MODE(" MODE ")"
parse value ausgabe1.2.text with UI "GROUP ATTACH NAME(" GATTN ")"
DO I = 1 TO AUSGABE.0
   LZEILE  = ''
   LZEILE = LZEILE || LEFT(AUSGABE.I.ID, 3)
   LZEILE = LZEILE LEFT(AUSGABE.I.SUBSYS,  5)
   LZEILE = LZEILE LEFT(AUSGABE.I.CMDPREF, 6)
   LZEILE = LZEILE LEFT(AUSGABE.I.STATUS, 8, ' ')
   LZEILE = LZEILE LEFT(AUSGABE.I.DB2_LVL, 5)
   LZEILE = LZEILE LEFT(AUSGABE.I.SYSTEM_NAME, 6, ' ')
   LZEILE = LZEILE LEFT(AUSGABE.I.IRLM_SUBSYS, 5, ' ')
   LZEILE = LZEILE LEFT(AUSGABE.I.IRLMPROC, 8, ' ')
   LZEILE = LZEILE LEFT(MODE              , 6, ' ')
   LZEILE = LZEILE LEFT(GATTN             , 7, ' ')
   Call Automatic_Data
   CALL ADD_TABLE
 END /* END DO I = 1 TO DDLTEXT */
RETURN

LIST_THD:   /* Thread */

RXDB2_PUTSTEM  = 'AUSGABE1. AUSGABE. AUSGABE3. AUSGABE4.'
Anzeige_stem   = 2
AUSGABE.0      = 0
AUSGABE1.0     = 0
AUSGABE2.0     = 0
AUSGABE3.0     = 0
AUSGABE4.0     = 0
DB2_Creator1 = Strip(TRANSLATE(DB2_NAME1, '*', '%'))
DB2_NAME1    = Strip(TRANSLATE(DB2_NAME1, '*', '%'))
SQLSTMT    = "",
             " CALL "SYSPROCA".ADMIN_COMMAND_DB2 ( " ,
             " '-DISPLAY THREAD (" || DB2_Creator1 || ") " ,
             " '                                 " ,
             " ,   200                           " ,
             " ,   'THD'                         " ,
             " ,   ''                            " ,
             " ,   500                           " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   ''                            " ,
             " )                                 " ,
             " ;                                 " ,
             ""

CALL Stored_Procedure
Call OPEN_COLTB

DDLTEXT = DDLTEXT || "*UZ*"
OUTSQLDA.2.SQLLEN   = 11           /* TYPE                      */
OUTSQLDA.2.SQLTYPE = 452           /* WANDELN NACH CHAR         */
call Automatic_Header

DDLTEXT = DDLTEXT "-NR"
DO I = 1 TO AUSGABE.0
   Select
     When AUSGABE.I.TYPE = 0  THEN AUSGABE.I.TYPE = "0 Unknown  "
     When AUSGABE.I.TYPE = 1  THEN AUSGABE.I.TYPE = "1 Active   "
     When AUSGABE.I.TYPE = 2  THEN AUSGABE.I.TYPE = "2 Inactive "
     When AUSGABE.I.TYPE = 3  THEN AUSGABE.I.TYPE = "3 Indoubt  "
     When AUSGABE.I.TYPE = 4  THEN AUSGABE.I.TYPE = "4 Postponed"
     OTHERWISE NOP
    End

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END /* END DO I = 1 TO DDLTEXT */
RETURN

LIST_DDF:   /* Thread */

RXDB2_PUTSTEM  = 'AUSGABE1. AUSGABE. AUSGABE3. AUSGABE4.'
Anzeige_stem   = 2
AUSGABE.0      = 0
AUSGABE1.0     = 0
AUSGABE2.0     = 0
AUSGABE3.0     = 0
AUSGABE4.0     = 0
DB2_Creator1 = Strip(TRANSLATE(DB2_NAME1, '*', '%'))
DB2_NAME1    = Strip(TRANSLATE(DB2_NAME1, '*', '%'))
SQLSTMT    = "",
             " CALL "SYSPROCA".ADMIN_COMMAND_DB2 ( " ,
             " '-DISPLAY DDF                   ' " ,
             " ,   200                           " ,
             " ,   'DDF'                         " ,
             " ,   ''                            " ,
             " ,   500                           " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   ''                            " ,
             " )                                 " ,
             " ;                                 " ,
             ""

CALL Stored_Procedure
Call OPEN_COLTB

DDLTEXT = DDLTEXT || "*UZ*"
OUTSQLDA.2.SQLLEN   = 11           /* TYPE                      */
OUTSQLDA.2.SQLTYPE = 452           /* WANDELN NACH CHAR         */
call Automatic_Header

DDLTEXT = DDLTEXT "-NR"
DO I = 1 TO AUSGABE.0

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END /* END DO I = 1 TO DDLTEXT */
RETURN

LIST_UTIL:  /* DIS UTIL  */

RXDB2_PUTSTEM  = 'AUSGABE1. AUSGABE. AUSGABE3. AUSGABE4.'
Anzeige_stem   = 2
AUSGABE.0      = 0
AUSGABE1.0     = 0
AUSGABE2.0     = 0
AUSGABE3.0     = 0
AUSGABE4.0     = 0
DB2_Creator1 = Strip(TRANSLATE(DB2_NAME1, '*', '%'))
DB2_NAME1    = Strip(TRANSLATE(DB2_NAME1, '*', '%'))
SQLSTMT    = "",
             " CALL "SYSPROCA".ADMIN_COMMAND_DB2 ( " ,
             " '-DISPLAY UTILITY(*)            ' " ,
             " ,   200                           " ,
             " ,   'UT'                          " ,
             " ,   ''                            " ,
             " ,   500                           " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   ''                            " ,
             " )                                 " ,
             " ;                                 " ,
             ""

CALL Stored_Procedure
Call OPEN_COLTB

DDLTEXT = DDLTEXT || "*UZ*"
OUTSQLDA.2.SQLLEN   = 11           /* TYPE                      */
OUTSQLDA.2.SQLTYPE = 452           /* WANDELN NACH CHAR         */
call Automatic_Header

DDLTEXT = DDLTEXT "-NR"
DO I = 1 TO AUSGABE.0

   LZEILE  = ''
   Call Automatic_Data
   CALL ADD_TABLE
 END /* END DO I = 1 TO DDLTEXT */
RETURN

LIST_BP:

RXDB2_PUTSTEM  = 'AUSGABE1. AUSGABE. AUSGABE3. AUSGABE4.'
Anzeige_stem   = 2
AUSGABE.0      = 0
AUSGABE1.0     = 0
AUSGABE2.0     = 0
AUSGABE3.0     = 0
AUSGABE4.0     = 0
DB2_NAME1  = Strip(TRANSLATE(DB2_NAME1, '*', '%'))
SQLSTMT    = "",
             " CALL "SYSPROCA".ADMIN_COMMAND_DB2 ( " ,
             " '-DISPLAY BUFFERPOOL (" || DB2_NAME1 || ") ' " ,
             " ,   200                           " ,
             " ,   'BP'                          " ,
             " ,   ''                            " ,
             " ,   200                           " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   0                             " ,
             " ,   ''                            " ,
             " )                                 " ,
             " ;                                 " ,
             ""
CALL Stored_Procedure
Call OPEN_COLTB

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("ROW", 1, 3)
DDLTEXT = DDLTEXT SUBSTR("BPNAME", 1, 7)
DDLTEXT = DDLTEXT SUBSTR("VPSZ", 1, 7)
DDLTEXT = DDLTEXT SUBSTR("VPSQ", 1, 4)
DDLTEXT = DDLTEXT SUBSTR("VPPS", 1, 4)
DDLTEXT = DDLTEXT SUBSTR("VPXP", 1, 4)
DDLTEXT = DDLTEXT SUBSTR("DWQT   ", 1, 4)
DDLTEXT = DDLTEXT SUBSTR("PCTV", 1, 4)
DDLTEXT = DDLTEXT SUBSTR("ABSV", 1, 4)
DDLTEXT = DDLTEXT SUBSTR("PGST", 1, 5)
DDLTEXT = DDLTEXT SUBSTR("ID     ", 1, 3)
DDLTEXT = DDLTEXT SUBSTR("UCNT   ", 1, 4)
DDLTEXT = DDLTEXT SUBSTR("PGF", 1, 3)
DDLTEXT = DDLTEXT SUBSTR("AR", 1, 3)
DDLTEXT = DDLTEXT ANZ_Daten('ROW'             , '', 'L',  3, ' ')
DDLTEXT = DDLTEXT ANZ_Daten('BPNAME'          , '', 'L',  7, ' ')
DDLTEXT = DDLTEXT ANZ_Daten('FRAMESIZE'       , '', 'L',  9, ' ')
DDLTEXT = DDLTEXT ANZ_Daten('ALLOC_FRAME4K'   , '', 'L' , 13, ' ')
DDLTEXT = DDLTEXT ANZ_Daten('ALLOC_FRAME1M'   , '', 'L', 13, ' ')
DDLTEXT = DDLTEXT ANZ_Daten('VPSIZEMIN'       , '', 'L',  9, ' ')
DDLTEXT = DDLTEXT ANZ_Daten('VPSIZEMAX'       , '', 'L',  9, ' ')
DDLTEXT = DDLTEXT "-NR"

DO I = 1 TO AUSGABE.0
   LZEILE  = ''
   LZEILE = LZEILE || LEFT(AUSGABE.I.ROWNUM, 3)
   LZEILE = LZEILE LEFT(AUSGABE.I.BPNAME,  7)
   LZEILE = LZEILE LEFT(AUSGABE.I.VPSIZE,  7)
   LZEILE = LZEILE RIGHT(AUSGABE.I.VPSEQT,  4, ' ')
   LZEILE = LZEILE RIGHT(AUSGABE.I.VPPSEQT, 4)
   LZEILE = LZEILE RIGHT(AUSGABE.I.VPXPSEQT  , 4, ' ')
   LZEILE = LZEILE RIGHT(AUSGABE.I.DWQT      , 4, ' ')
   LZEILE = LZEILE RIGHT(AUSGABE.I.PCT_VDWQT , 4, ' ')
   LZEILE = LZEILE RIGHT(AUSGABE.I.ABS_VDWQT , 4, ' ')
   LZEILE = LZEILE LEFT(AUSGABE.I.PGSTEAL   , 5)
   LZEILE = LZEILE RIGHT(AUSGABE.I.ID        , 3, ' ')
   LZEILE = LZEILE RIGHT(AUSGABE.I.USE_COUNT , 4, ' ')
   LZEILE = LZEILE LEFT(AUSGABE.I.PGFIX     , 3)
   LZEILE = LZEILE LEFT(AUSGABE.I.AUTOSIZE  , 3)
   LZEILE = LZEILE ANZ_DATEN('', AUSGABE.I.ROWNUM   ,    'R',  3, ' ')
   LZEILE = LZEILE ANZ_DATEN('', AUSGABE.I.BPNAME   ,    'R',  7, ' ')
   LZEILE = LZEILE ANZ_DATEN('', AUSGABE.I.FRAMESIZE,    'R',  9, ' ')
   LZEILE = LZEILE ANZ_DATEN('', AUSGABE.I.ALLOC_FRAME4K,'R', 13, ' ')
   LZEILE = LZEILE ANZ_DATEN('', AUSGABE.I.ALLOC_FRAME1M,'R', 13, ' ')
   LZEILE = LZEILE ANZ_DATEN('', AUSGABE.I.VPSIZEMIN ,   'R',  9, ' ')
   LZEILE = LZEILE ANZ_DATEN('', AUSGABE.I.VPSIZEMAX ,   'R',  9, ' ')
   CALL ADD_TABLE
 END /* END DO I = 1 TO DDLTEXT */
RETURN

LIST_SSI:

AUSGABE.0 = 0
SQLSTMT    = "",
             "CALL "SYSPROCA".ADMIN_INFO_HOST(   " ,
             "   "INR"                           " ,
             ",   ''                             " ,
             ",   0                              " ,
             ",   ''                             " ,
             "    )                              " ,
             ";                                  " ,
             ""

CALL Stored_Procedure
Call OPEN_COLTB

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("ROWNUM", 1, 6)
DDLTEXT = DDLTEXT SUBSTR("DB2_MEMBER", 1, 10)
DDLTEXT = DDLTEXT SUBSTR("HOSTNAME", 1, 20)
DDLTEXT = DDLTEX  "-NR"
DO I = 1 TO AUSGABE.0
   LZEILE  = ''
   LZEILE = LZEILE || LEFT(AUSGABE.I.ROWNUM, 6)
   LZEILE = LZEILE substr(AUSGABE.I.DB2_MEMBER, 1, 10)
   LZEILE = LZEILE substr(AUSGABE.I.HOSTNAME, 1, 20)
   CALL ADD_TABLE
 END /* END DO I = 1 TO DDLTEXT */
RETURN

LIST_ZPARM:

AUSGABE.0 = 0
SQLSTMT    = "",
             "CALL "SYSPROCA".ADMIN_INFO_SYSPARM(" ,
             ",   ''                             " ,
             ",   0                              " ,
             ",   ''                             " ,
             "    )                              " ,
             ";                                  " ,
             ""

CALL Stored_Procedure
Call OPEN_COLTB
/* ROWNUM, MACRO, PARAMETER, INSTALL_PANEL, INSTALL_FIELD */
/* INSTALL_LOCATION, VALUE, ADDITIONAL_INFO               */

DDLTEXT = DDLTEXT || "*UZ*"
DDLTEXT = DDLTEXT || SUBSTR("PARAMETER ", 1, 40)
DDLTEXT = DDLTEXT SUBSTR("BESCHREIBUNG",1, 40)
DDLTEXT = DDLTEXT SUBSTR("MACRO"    , 1, 9 )
DDLTEXT = DDLTEXT SUBSTR("ONLINE",1, 6)
DDLTEXT = DDLTEXT SUBSTR("PANEL ",1,10)
DDLTEXT = DDLTEXT SUBSTR("LOCATION",1, 8)
DDLTEXT = DDLTEXT "-NR"
DO I = 1 TO AUSGABE.0
   Parm = AUSGABE.I.PARAMETER
   PVal = AUSGABE.I.VALUE
   Parse value AUSGABE.I.ADDITIONAL_INFO with ol "=" ADDI .

      select
         When Parm = "AUDITST" Then PVal = ZPARM_Options(PVal)
         When Parm = "SMFACCT" Then PVal = ZPARM_Options(PVal)
         When Parm = "ROUTCDE" Then PVal = ZPARM_Options(PVal)
         When Parm = "ARCWRTC" Then PVal = ZPARM_Options(PVal)
         when Parm = "SMFSTAT" Then do
              PVal = ZPARM_Options(PVal)
              If PVal = "()" Then PVal = "NO"
          End
         when Parm = "TRACSTR" Then do
              PVal = ZPARM_Options(PVal)
              If PVal = "()" Then PVal = "NO"
          End
         when Parm = "TWOBSDS" Then do
              If PVal = 2 THEN PVal = "YES"
              ELSE             PVal = "NO"
          End
         when Parm = "TWOARCH" Then do
              If PVal = 2 THEN PVal = "YES"
              ELSE             PVal = "NO"
          End
         when Parm = "TWOACTV" Then do
              If PVal = 2 THEN PVal = "YES"
              ELSE             PVal = "NO"
          End
         when Parm = "MON"     Then do
              If PVal = 0 THEN PVal = "NO"
              ELSE             PVal = "YES"
          End
         Otherwise NOP
        End  /* END SELECT */

   If datatype(PVal) = "NUM" Then Do
      PVal = PVal * 1
    end

   parmval = space(Parm "=" PVal, 0)

   LZEILE  = ''
   LZEILE = LZEILE || substr(parmval, 1,40)
   LZEILE = LZEILE substr(AUSGABE.I.INSTALL_FIELD, 1, 40)
   LZEILE = LZEILE substr(AUSGABE.I.MACRO, 1, 9)
   LZEILE = LZEILE substr(ADDI, 1,6)
   LZEILE = LZEILE substr(AUSGABE.I.INSTALL_PANEL, 1, 10)
   LZEILE = LZEILE substr(AUSGABE.I.INSTALL_LOCATION, 1, 8)
   CALL ADD_TABLE
 END /* END DO I = 1 TO DDLTEXT */
RETURN

ZPARM_Options:
 ZOPT_STRG = "("
 komma = ""
 do zoi = 1 to length(Arg(1) )
    if Substr(arg(1), zoi, 1) = 1 Then do
    ZOPT_STRG = ZOPT_STRG komma zoi
    komma = ","
  End
  end
 ZOPT_STRG = ZOPT_STRG ")"
 return space(ZOPT_STRG, 0)

EXECUTE_SQL_DYNAMIC_AC3:

If datatype(CNR) <> "NUM" Then CNR = 1
If datatype(SNR) <> "NUM" Then SNR = CNR

DO STI = 1 TO EINGABE.0
   SQLSTMT = EINGABE.STI
   SQLSTMT = SPACE(SQLSTMT, 1)

   IF WORD(SQLSTMT, 1) = "CONNECT" & WORD(SQLSTMT, 2) = "TO" THEN DO
      SQLTEXT =  " "SQLSTMT
      Call EXECUTE_SQL_TEXT_AC3
      IF SQLCODE <> 0 THEN DO
         SAY "Error in "SQLSTMT "SQLCODE: " SQLCODE
       END
      ITERATE
    END

   If DB2_FUNKTION = "SQLEX" Then do
      SQLSTMT = SQLSTMT "FOR FETCH ONLY WITH UR "
    End
   ELSE DO
      SQLSTMT = SQLSTMT maxFetch "FOR FETCH ONLY WITH UR "
    End

   If DB2_EDITSQL = "Y" | DB2_EDITSQL = "J" Then do
      SQLSTMT = Edit_SQL(SQLSTMT)
      DB2_EDITSQL = 'N'
    End

   SQLTEXT =         " CLOSE C"CNR" "
   Call EXECUTE_SQL_TEXT_AC3
   SQLTEXT =  " DECLARE              C"CNR" CURSOR FOR S"SNR
   Call EXECUTE_SQL_TEXT_AC3
   IF SQLCODE <> 0 THEN DO
      SAY "A3 DECLARE     SQLCODE="SQLCODE
      SAY SQLSTMT
    END
   SQLTEXT =  " PREPARE              S"SNR" FROM :SQLSTMT"
   Call EXECUTE_SQL_TEXT_AC3
   IF SQLCODE <> 0 THEN DO
      SAY "A3 PREPARE     SQLCODE="SQLCODE
      SAY SQLSTMT
    END
   SQLTEXT =  " DESCRIBE S"SNR" INTO :OUTSQLDA"
   Call EXECUTE_SQL_TEXT_AC3
   IF SQLCODE <> 0 THEN DO
      SAY "A3 DESCRIBE    SQLCODE="SQLCODE
      SAY SQLSTMT
    END

   COLS      = ""
   RXCOLS    = ""
   SQL_FETCH = ""
   KOMMA     = ""
   if datatype(OUTSQLDA.SQLD) = NUM THEN DO CI = 1 TO OUTSQLDA.SQLD
      cols   = cols OUTSQLDA.CI.SQLNAME
      rxcols = rxcols  SPACE(RXDB2_PUTSTEM, 0) || I || "." ||  ,
                       SPACE(OUTSQLDA.CI.SQLNAME, 0)
      SQL_FETCH = SQL_FETCH || komma || ":" || OUTSQLDA.CI.SQLNAME
      If OUTSQLDA.CI.SQLTYPE // 2 = 1 THEN Do
         SQL_FETCH = SQL_FETCH ":I" || OUTSQLDA.CI.SQLNAME
       END
      KOMMA = ","
    End

   SQLTEXT =  " OPEN C"CNR""
   Call EXECUTE_SQL_TEXT_AC3
   IF SQLCODE <> 0 THEN DO
      SAY "A3 OPEN        SQLCODE="SQLCODE
      SAY SQLSTMT
    END
   IVAL = VALUE(SPACE(RXDB2_PUTSTEM, 0) || 0) "= 0"
   INTERPRET  IVAL

   If Fetch_Data = "NO" Then NOP
   ELSE call Fetch_Dynamic_data
 END

RETURN

Fetch_Dynamic_data:

   DO WHILE SQLCODE = 0
      SQLTEXT =  " FETCH C"CNR" USING DESCRIPTOR :OUTSQLDA"
      Call EXECUTE_SQL_TEXT_AC3
      IF SQLCODE =  100 THEN LEAVE      /* UB       13.06.2013 */
      IF SQLCODE <    0 THEN Do         /* UB       13.06.2013 */
         SQLSTMT = SQLTEXT              /* UB       13.06.2013 */
         LEAVE
       End
      If sqlcode > 0 then sqlcode = 0   /* Warnings 13.06.2013 */
      IVAL = "IVAL_I = " VALUE(SPACE(RXDB2_PUTSTEM, 0) || 0) "+ 1"
      INTERPRET  IVAL
      IVAL = SPACE(RXDB2_PUTSTEM, 0) || 0  " = IVAL_I"
      INTERPRET  IVAL
      DO CI = 1 TO OUTSQLDA.SQLD
         /* AUSGABE.1.DBNAME = "DSNDB07"   */
         IVAL = VALUE(SPACE(RXDB2_PUTSTEM, 0) || IVAL_I) || "." ||  ,
                SPACE(OUTSQLDA.CI.SQLNAME, 0)
         INTERPRET IVAL"=OUTSQLDA.CI.SQLDATA"

         IVAL = value(SPACE(OUTSQLDA.CI.SQLNAME, 0))
       END
    END
SQLTEXT = "CLOSE C"CNR
Call EXECUTE_SQL_TEXT_AC3

Return

Stored_Procedure:

rexx_sqltype.0   = 27
REXX_SQLTYPE.1   = "384 DATE               10 "
REXX_SQLTYPE.2   = "388 TIME                8 "
REXX_SQLTYPE.3   = "392 TIMESTAMP          26 "
REXX_SQLTYPE.4   = "396 DATALINK              "
REXX_SQLTYPE.5   = "404 BLOB                  "
REXX_SQLTYPE.6   = "408 CLOB                  "
REXX_SQLTYPE.7   = "412 DBCLOB                "
REXX_SQLTYPE.8   = "448 VARCHAR               "
REXX_SQLTYPE.9   = "452 CHAR                  "
REXX_SQLTYPE.10  = "456 LONGVARCHAR           "
REXX_SQLTYPE.11  = "464 VARGRAPHIC            "
REXX_SQLTYPE.12  = "468 GRAPHIC               "
REXX_SQLTYPE.13  = "472 LONGVARGRAPHIC        "
REXX_SQLTYPE.14  = "480 FLOAT                 "
REXX_SQLTYPE.15  = "484 DECIMAL               "
REXX_SQLTYPE.16  = "492 BIGINT             19 "
REXX_SQLTYPE.17  = "496 INTEGER            10 "
REXX_SQLTYPE.18  = "500 SMALLINT            5 "
REXX_SQLTYPE.19  = "904 ROWID                 "
REXX_SQLTYPE.20  = "908 VARBINARY             "
REXX_SQLTYPE.21  = "912 BINARY                "
REXX_SQLTYPE.22  = "916 BLOB                  "
REXX_SQLTYPE.23  = "924 DBCLOB                "
REXX_SQLTYPE.24  = "996 DECFLOAD              "
REXX_SQLTYPE.25  = "988 XML                   "
REXX_SQLTYPE.26  = "412 DBCLOB                "
REXX_SQLTYPE.27  = "468 GRAPHIC               "
DROP OU.
OU.0 = 0

maxrc         = 0
COLDEL        = ';'
CHARDEL       = '"'
SQLTERM       = ';'
SPROCPARSER   = ','
END_SQL_TERM  = SPACE(SQLTERM SQLTERM, 0)


    SQLSTMT = STRIP(SQLSTMT)
    If DB2_EDITSQL = "Y" | DB2_EDITSQL = "J" Then do
       SQLSTMT = Edit_SQL(SQLSTMT)
       DB2_EDITSQL = 'N'
     End


     parse value sqlstmt with proc "(" command
     command = reverse(command)
     command = Strip(command, 'L')
     command = Strip(command, 'L', ')' )
     command = reverse(command)

     callstmt  = sqlstmt

     parse value PROC WITH cl PROC_CREATOR '.' PROC_NAME
     PROC_CREATOR  = Strip(Translate(PROC_CREATOR))
     PROC_NAME     = Strip(Translate(PROC_NAME))

     CNR     = 10
     SNR     = 10
     If DB_ENV = "SQL" Then Do  /* DB2 LUW */
        SQLSTMT = "SELECT    DISTINCT                            ",
                  "        P.ROUTINENAME                         ",
                  "     ,  P.ROUTINESCHEMA                       ",
                  "     ,  P.SPECIFICNAME                        ",
                  "     ,  P.ROWTYPE                             ",
                  "     ,  P.PARMNAME                            ",
                  "     ,  P.LOCATOR                             ",
                  "     ,  P.ORDINAL                             ",
                  "     ,  P.TYPENAME                            ",
                  "     ,  P.LENGTH                              ",
                  "     ,  P.SCALE                               ",
                  "     ,  P.ROUTINETYPE                         ",
                  "     ,  R.RESULT_SETS                         ",
                  "FROM "SYSIBMS".SYSROUTINEPARMS P              ",
                  "INNER JOIN "SYSIBMS".SYSROUTINES R            ",
                  "  ON  P.ROUTINESCHEMA = R.ROUTINESCHEMA       ",
                  "  AND P.ROUTINENAME   = R.ROUTINENAME         ",
                  "  AND P.SPECIFICNAME  = R.SPECIFICNAME        ",
                  "WHERE P.ROUTINESCHEMA = '"PROC_CREATOR"'      ",
                  "AND   P.ROUTINENAME   = '"PROC_NAME"'         ",
                  "ORDER BY ORDINAL                              ",
                  ""
      End
     Else Do                    /* DB2 zOS */
        SQLSTMT = "SELECT    DISTINCT                            ",
                  "        P.SCHEMA       AS ROUTINENAME         ",
                  "     ,  P.NAME         AS ROUTINESCHEMA       ",
                  "     ,  P.SPECIFICNAME AS SPECIFICNAME        ",
                  "     ,  P.ROWTYPE      AS ROWTYPE             ",
                  "     ,  P.PARMNAME     AS PARMNAME            ",
                  "     ,  P.LOCATOR      AS LOCATOR             ",
                  "     ,  P.ORDINAL      AS ORDINAL             ",
                  "     ,  P.TYPENAME     AS TYPENAME            ",
                  "     ,  P.LENGTH       AS LENGTH              ",
                  "     ,  P.SCALE        AS SCALE               ",
                  "     ,  P.ROUTINETYPE  AS ROUTINETYPE         ",
                  "     ,  R.RESULT_SETS                         ",
                  "FROM "SYSIBMS".SYSPARMS P                     ",
                  "INNER JOIN "SYSIBMS".SYSROUTINES R            ",
                  "  ON  P.SCHEMA       = R.SCHEMA               ",
                  "  AND P.NAME         = R.NAME                 ",
                  "  AND P.SPECIFICNAME = R.SPECIFICNAME         ",
                  "WHERE P.SCHEMA        = '"PROC_CREATOR"'      ",
                  "AND   P.NAME          = '"PROC_NAME"'         ",
                  "ORDER BY ORDINAL                              ",
                  ""
      End
     SQLSTMT = SPACE(SQLSTMT, 1)
     ADD_TBCOL = "N"  /* Hier keine TBCOL Tab fuellen */
     Call OPEN_CURSOR_AC3
     ADD_TBCOL = "Y"
     OUTSQLDA.SQLD = 0
     cmd          = command
     cmdi         = 0
     cmdstring    = ""
     komma        = ""
     DO WHILE SQLCODE = 0
        SQLTEXT = " FETCH C"CNR" INTO "   SQL_FETCH
        Call EXECUTE_SQL_TEXT_AC3

          IF SQLCODE = 100 THEN LEAVE
          If sqlcode < 0 Then Do
             call SQLERROR
             return 8
           End

          cmdi         = cmdi + 1
          Do sqlti = 1 to rexx_sqltype.0
             If TYPENAME <>  WORD(rexx_sqltype.sqlti, 2) Then Iterate
             sqltype = WORD(rexx_sqltype.sqlti, 1)
             sqltype = sqltype + 1
             LEAVE
           End

          If Words(rexx_sqltype.sqlti) > 2 Then Do
             Length = Word(rexx_sqltype.sqlti, 3)
           End

          SPROCPARSER = Strip(SPROCPARSER)
          I1    =   "parse value cmd with DATA '"SPROCPARSER"' cmd"
          INTERPRET I1

          Data = Strip(Data)
          If Strip(Data) = "?" Then DATA = ""
          If Strip(Data) = "''"  Then DATA = ""
          Ind = 0
          If Length(data) = 0 Then Do
             Ind = -1
             Select
               When TYPENAME = "BIGINT"   THEN Do
                    DATA = Right(DATA, LENGTH, '0')
                End
               When TYPENAME = "INTEGER"  THEN Do
                    DATA = Right(DATA, LENGTH, '0')
                End
               When TYPENAME = "SMALLINT" THEN Do
                    DATA = Right(DATA, LENGTH, '0')
                End
               When TYPENAME = "DECIMAL"  THEN Do
                    DATA = Right(DATA, LENGTH, '0')
                    DATA = "0.0"
                End
               Otherwise Do
                    If length > 32000 Then Length = 32000
                    DATA = "'" || Left(DATA, LENGTH, ' ') || "'"
                End
              End
           End


/*        INTERPRET "CM"cmdi "= DATA"                              */
/*        cmdstring = cmdstring || komma ":" || "CM" || cmdi       */
          PARMNAME  = Translate(PARMNAME, '_', '-')
          INTERPRET PARMNAME "= DATA"
          cmdstring = cmdstring || komma ":" || PARMNAME

          Interpret PARMNAME || "_I" || CMDI "= "IND
          cmdstring = cmdstring ":" || PARMNAME || "_I" || CMDI

          komma     = ","

          OUTSQLDA.SQLD          = OUTSQLDA.SQLD + 1
          SQLDI                  = OUTSQLDA.SQLD
          OUTSQLDA.SQLDI.SQLTYPE = sqltype
          OUTSQLDA.SQLDI.SQLLEN  = LENGTH
          OUTSQLDA.SQLDI.SQLIND  = 0
          OUTSQLDA.SQLDI.SQLDATA = DATA
      END

     Call CLOSE_CURSOR_AC3
     Proc = Subword(Proc, 2)
     If Length(Strip(cmdstring)) = 0 Then do
        cmdstring = cmd
        cmdstring = ":CM1"
        CM1       = Strip(cmd)
        cm1 = strip(cm1)
      End

     SQLTEXT = " Call " Proc "(" || cmdstring ||")"
     Call EXECUTE_SQL_TEXT_AC3

     If SQLCODE = 0   ,
      | SQLCODE = 466 Then do
        Ausgabe = cmdstring
        Do while length(Ausgabe) > 0
           Parse value Ausgabe With parm "," Ausgabe
           ausi = 0
           If Words(Parm) > 1 Then Parm = Word(Parm, 1)
           If Words(Parm) > 1 Then IND  = Word(Parm, 2)
           Parm = Translate(Parm, ' ', ':')
           Interpret "Ausx = "Parm
           Interpret "Ausi = "ind
/*
           If ausi < 0 Then Ausx = ""
*/
           ou.0 = ou.0 + 1 ; oui = ou.0;
           ou.oui = parm "=" Ausx
         End
           ou.0 = ou.0 + 1 ; oui = ou.0;
           ou.oui = "RESULTS =" RESULTS
      End

     If sqlcode = 466 Then do
        Call Lesen_SProc_Data
      End

return

Lesen_SProc_Data:
  SAVE_PUTSTEM  = RXDB2_PUTSTEM
  RXDB2_PUTSTEM = Word(RXDB2_PUTSTEM, 1)
  SQLTEXT = "DESCRIBE PROCEDURE :PROC INTO :OUTSQLDA"
  Call EXECUTE_SQL_TEXT_AC3
  if sqlcode <> 0 Then do
     Say "Warning SQLERROR="SQLERROR
     If sqlcode < 0 Then Do
        call SQLERROR
        return 8
      End
   End

  /* Problem war SQLCODE=-423 SQLSTATE=0F001 */
  If OUTSQLDA.SQLD < RESULT_SETS Then RESULT_SETS = OUTSQLDA.SQLD

  /* Allocatte RESULT SET                                         */
  Loc_GES = ":RS_LoC1"
  if RESULT_SETS > 1 Then do
     Loc_GES = ""
     Komma = ''
     do loci = 1 to RESULT_SETS
        Loc_GES = Loc_Ges || Komma || ":" || "RS_Loc" || Loci" "
        Komma = ','
      End
   End
  Else Do
   End

  SQLTEXT = "ASSOCIATE LOCATORS ("Loc_Ges") WITH PROCEDURE "Proc
  Call EXECUTE_SQL_TEXT_AC3
  if sqlcode <> 0 Then do
     Say "Warning SQLERROR="SQLERROR
     SQLSTMT = SQLTEXT
     If sqlcode < 0 Then Do
        call SQLERROR
        return 8
      End
   End

  CNR    = "100"
  Do RESI = 1 to RESULT_SETS  /* Anzahl Resut_Sets (Anzahl Tables) */
     Loc     = ":" || "RS_Loc" || RESI
     CNR     = CNR + 1
     cursor  = "C"CNR
     SQLTEXT = "ALLOCATE C"CNR" CURSOR FOR RESULT SET "Loc
     Call EXECUTE_SQL_TEXT_AC3
     if sqlcode <> 0 Then do
        say SQLCODE  sqltext
        SQLSTMT = SQLTEXT
        If sqlcode < 0 Then Do
           call SQLERROR
           return 8
         End
      End

     /* Describe the Cursor                                          */
     SQLTEXT = "DESCRIBE CURSOR :CURSOR INTO :OUTSQLDA"
     Call EXECUTE_SQL_TEXT_AC3
     If sqlcode <> 0 Then do
        Say "Warning SQLERROR="SQLERROR
       If sqlcode < 0 Then Do
          SQLSTMT = SQLTEXT
          call SQLERROR
          return 8
        End
      End

   RXDB2_PUTSTEM = Word(SAVE_PUTSTEM, resi)
   If datatype(Anzeige_stem) = "NUM" ,
    & Anzeige_stem = resi Then Do
        COLS      = ""
        RXCOLS    = ""
        SQL_FETCH = ""
        KOMMA     = ""
        if datatype(OUTSQLDA.SQLD) = NUM THEN DO CI = 1 TO OUTSQLDA.SQLD
           cols   = cols OUTSQLDA.CI.SQLNAME
           rxcols = rxcols  SPACE(RXDB2_PUTSTEM, 0) || I || "." ||  ,
                            SPACE(OUTSQLDA.CI.SQLNAME, 0)
           SQL_FETCH = SQL_FETCH || komma || ":" || OUTSQLDA.CI.SQLNAME
           If OUTSQLDA.CI.SQLTYPE // 2 = 1 THEN Do
              SQL_FETCH = SQL_FETCH ":I" || ci
            END
           KOMMA = ","
           If ADD_TBCOL <> "N" & RXDB2_PUTSTEM = "AUSGABE."   Then Do
              CLNAME = Strip(OUTSQLDA.CI.SQLNAME, "T")
              Call ADD_TABLE_TBCOL
            End
         End
    End

      /* Fetch Data                                                   */
     call Fetch_Dynamic_data
  End /* END DO */

Return 0

OPEN_CURSOR_AC3:

   SQLSTMT = SQLSTMT MaxFetch "FOR FETCH ONLY WITH UR "

   If DB2_EDITSQL = "Y" | DB2_EDITSQL = "J" Then do
      SQLSTMT = Edit_SQL(SQLSTMT)
      DB2_EDITSQL = 'N'
    End

    IF DATATYPE(CNR) <> 'NUM' THEN CNR = 1
    IF DATATYPE(SNR) <> 'NUM' THEN SNR = 1
    SQLTEXT =         " CLOSE C"CNR
    Call EXECUTE_SQL_TEXT_AC3
    SQLTEXT =         " DECLARE C"CNR" CURSOR FOR S"SNR
    Call EXECUTE_SQL_TEXT_AC3
    IF SQLCODE <> 0 THEN DO
       SAY "ERROR ON DECLARE, RC="RC ,
           "SQLCODE="SQLCODE         ,
           "SQLERRMC="SQLERRMC       ,
           ""
       If sqlcode < 0 Then Do
          call SQLERROR
          return 8
        End
    END
    SQLTEXT =         " PREPARE S"SNR" FROM :SQLSTMT"
    Call EXECUTE_SQL_TEXT_AC3
    IF SQLCODE <> 0 THEN DO
       SAY "ERROR ON PREPARE S"SNR"RC="RC ,
           "SQLCODE="SQLCODE         ,
           "SQLERRMC="SQLERRMC       ,
           ""
       If sqlcode < 0 Then Do
          call SQLERROR
          return 8
        End
    END

   SQLTEXT =  " DESCRIBE S"SNR" INTO :OUTSQLDA"
   Call EXECUTE_SQL_TEXT_AC3
   COLS   = ""
   RXCOLS = ""
   SQL_FETCH = ""
   KOMMA     = ""
   if datatype(OUTSQLDA.SQLD) = NUM THEN DO CI = 1 TO OUTSQLDA.SQLD
      cols   = cols OUTSQLDA.CI.SQLNAME
      rxcols = cols OUTSQLDA.CI.SQLNAME
      SQL_FETCH = SQL_FETCH || komma || ":" || OUTSQLDA.CI.SQLNAME
      If OUTSQLDA.CI.SQLTYPE // 2 = 1 THEN Do  /* NULL VALUES */
         SQL_FETCH = SQL_FETCH ":I" || OUTSQLDA.CI.SQLNAME
       END
      KOMMA = ","
      CLNAME = Strip(OUTSQLDA.CI.SQLNAME, "T")
      If ADD_TBCOL <> "N" Then  Call ADD_TABLE_TBCOL
    End
    SQLTEXT =         " OPEN C"CNR
    Call EXECUTE_SQL_TEXT_AC3
    IF SQLCODE <> 0 THEN DO
       SAY "ERROR ON OPEN C"CNR" , RC="RC ,
           "SQLCODE="SQLCODE         ,
           "SQLERRMC="SQLERRMC       ,
           ""
       If sqlcode < 0 Then Do
          call SQLERROR
          return 8
        End
    END

RETURN

CLOSE_CURSOR_AC3:

    IF DATATYPE(CNR) <> 'NUM' THEN CNR = 1
    SQLTEXT =         " CLOSE C"CNR
    Call EXECUTE_SQL_TEXT_AC3

RETURN

CONNECT_LOCATION_AC3:
   If Length(SYSUID) > 0 & Length(SYSPWD) > 0 Then do
       SQLTEXT = "CONNECT TO "ARG(1) ,
                 "USER :SYSUID USING :SYSPWD "
    End
   ELSE Do
       SQLTEXT = "CONNECT TO "ARG(1)
    End

   Call EXECUTE_SQL_TEXT_AC3
   IF SQLCODE <> 0 THEN DO
      SAY "Error in CONNECT TO "ARG(1) "SQLCODE: " SQLCODE
      If sqlcode < 0 Then Do
         call SQLERROR
         return 8
       End
    END
RETURN 0

DISCONNECT_LOCATION_AC3:
   SQLTEXT =  "RELEASE " arg(1)
   Call EXECUTE_SQL_TEXT_AC3
   SQLTEXT =  "COMMIT  "
   Call EXECUTE_SQL_TEXT_AC3
   SQLTEXT =  " CONNECT RESET"
   Call EXECUTE_SQL_TEXT_AC3
RETURN 0

EXECUTE_SQL_TEXT_AC3:
 Select
    When ENV = 'TSO' Then Do
         ADDRESS DSNREXX "EXECSQL "SQLTEXT

         Select
           When rc =  -2168 Then do
                SQLCODE    = -99999
                SQLERRMC   = "Returncode war " RC
            End
           When word(SQLTEXT, 1) = "CLOSE" Then NOP
           When sqlcode < 0 Then do
                say SQLTEXT
                call SQLERROR
                return 8
            End
           Otherwise nop
          End
     End
    When ENV = 'WIN' Then Do
         CALL SQLEXEC SQLTEXT
         SQLCODE    = SQLCA.SQLCODE
         SQLERRMC   = SqlMsg
     End
    Otherwise NOP
  End
Return

SQLERROR:

If ENV = "WIN" Then do
   say
   say '**** SQL returned the following : '
   say '     STEP        = ' STEP
   say '     SQLCODE     = ' sqlca.Sqlcode
   say '     Message   = ' SqlMsg
   say
   Return
 End

SQLC = D2X(SQLCODE,8)
SQLC = X2C(SQLC)
say "error : sqlcode="sqlcode "sqlstate="sqlstate  "SQLERRMC="SQLERRMC
say SQLSTMT

SQL_ERRD = ""
Do I = 1 To 6
   SQL_ERRD = SQL_ERRD||D2C(SQLERRD.I,4)
End
SQL_WARN = ""
Do I = 0 To 10
   SQL_WARN = SQL_WARN||LEFT(SQLWARN.I,1)
End

MSG_LEN = 80
SQLCA = 'SQLCA   '
SQLCA = SQLCA || X2C(00000088)
SQLCA = SQLCA || SQLC
SQLCA = SQLCA || D2C(70,2)
SQLCA = SQLCA || 'DSN     '
SQLCA = SQLCA || LEFT(SQLERRMC,70)
SQLCA = SQLCA || LEFT(SQLERRP,8)
SQLCA = SQLCA || SQL_ERRD
SQLCA = SQLCA || SQL_WARN
SQLCA = SQLCA || LEFT(SQLSTATE,5)
TIAR_MSG = D2C(MSG_LEN * 12,2) || COPIES(' ',MSG_LEN * 12)
TEXT_LEN = D2C(MSG_LEN,4)
ADDRESS ATTCHPGM 'DSNTIAR SQLCA TIAR_MSG TEXT_LEN'

If RC < 5 Then,
   Do
   If RC = 4 Then Say "DSNTIAR RC=4 Message Area Truncated"
   S_POS = 3              /* Bypass the length bytes in Message Area */
   Do I = 1 to 12         /* Loop through all lines of message */
      MSG_TEXT = Substr(tiar_msg,S_POS,MSG_LEN) /* Pick out text */
      MSG_TEXT = Strip(MSG_TEXT,T," ") /* Remove trailing blanks */
      If MSG_TEXT > " " Then Say MSG_TEXT /* Echo msg to terminal */
      Else Iterate /* Some msg lines are blank, skip */
      S_POS = S_POS + MSG_LEN /* Skip to next "line" of MSG data */
   End I
End
Else Do
   Say "Call to DSNTIAR - Failed. RC=" RC
   Say 'SQLCODE ='SQLCODE; Say 'SQLERRM ='SQLERRMC
   Say 'SQLERRP ='SQLERRP; Say 'SQLSTATE='SQLSTATE
   XX = "SQLERRD ="
   Do I = 1 to 6 ; XX = XX||SQLERRD.I||',';End;Say XX
   XX = "SQLWARN ="
   Do I = 0 to 10; XX = XX||SQLWARN.I||',';End;Say XX
End


RETURN


MAKE_WHERELIST: PROCEDURE EXPOSE WHERELIST

COLUMNNAME = ARG(1)
ARGUMENT   = ARG(2)
ARGTYPE    = ARG(3)

IF LENGTH(STRIP(ARGUMENT)) = 0 THEN RETURN
ARGUMENT   = TRANSLATE(ARGUMENT, '%', '*')

IF TRANSLATE(WORD(WHERELIST, 1) ) = "WHERE" THEN ANDKZ = "AND"
 ELSE ANDKZ = "WHERE"

IF LENGTH(STRIP(COLUMNNAME)) = 0 ,
 & LENGTH(STRIP(ARGUMENT)) > 0 THEN DO
   WHERELIST = WHERELIST ANDKZ ARGUMENT
   RETURN
 END

IF LENGTH(STRIP(ARGUMENT)) = 0 THEN RETURN

If ARGTYPE = "NUM" Then do
   IF POS('%', ARGUMENT) > 0 THEN DO
      WHERELIST = WHERELIST ANDKZ COLUMNNAME "LIKE "ARGUMENT
    END
   Else Do
      WHERELIST = WHERELIST ANDKZ COLUMNNAME "= "ARGUMENT
    END
 End
Else Do
   IF POS('%', ARGUMENT) > 0 ,
    | POS('_', ARGUMENT) > 0 THEN DO
      WHERELIST = WHERELIST ANDKZ COLUMNNAME "LIKE '"ARGUMENT"'"
    END
   Else Do
      WHERELIST = WHERELIST ANDKZ COLUMNNAME "= '"ARGUMENT"'"
    END
 End

RETURN

OPEN_TABLE:

ADDRESS ISPEXEC  'TBCLOSE 'LUWTABLE
ADDRESS ISPEXEC  'TBERASE 'LUWTABLE
ADDRESS ISPEXEC  'TBOPEN  'LUWTABLE
IF RC <> 0 THEN Do
   ADDRESS ISPEXEC 'TBCREATE 'LUWTABLE  ,
                   'KEYS(ROWNR) NAMES(LCMD, LZEILE) '
   If rc <> 0 Then DO
      say 'TBCREATE 'LUWTABLE "RC="RC
      say "ZEDSMSG="ZEDSMSG
      say "ZERRLM="ZERRLM
      say "ZERRMSG="ZERRMSG
      say "ZERRSM="ZERRSM
    End
 End

RETURN

OPEN_COLTB:

ADDRESS ISPEXEC  'TBCLOSE 'COLTAB
ADDRESS ISPEXEC  'TBERASE 'COLTAB
ADDRESS ISPEXEC  'TBOPEN  'COLTAB
IF RC <> 0 THEN Do
   ADDRESS ISPEXEC 'TBCREATE 'COLTAB ,
                   'KEYS(ROWNR) NAMES(CZEILE) '
   If rc <> 0 Then DO
      say "TBCREATE "COLTAB "RC="RC
      say "ZEDSMSG="ZEDSMSG
      say "ZERRLM="ZERRLM
      say "ZERRMSG="ZERRMSG
      say "ZERRSM="ZERRSM
    End
 End

ADDRESS ISPEXEC  'TBCLOSE 'BRTAB
ADDRESS ISPEXEC  'TBERASE 'BRTAB
ADDRESS ISPEXEC  'TBOPEN  'BRTAB

IF RC <> 0 THEN Do
   ADDRESS ISPEXEC  'TBCLOSE 'BRTAB
   ADDRESS ISPEXEC 'TBCREATE 'BRTAB ,
                   'KEYS(ROWNR) NAMES(BZEILE) '
   If rc <> 0 Then DO
      say "TBCREATE "BRTAB "RC="RC
      say "ZEDSMSG="ZEDSMSG
      say "ZERRLM="ZERRLM
      say "ZERRMSG="ZERRMSG
      say "ZERRSM="ZERRSM
    End
    ADDRESS ISPEXEC  'TBOPEN  'BRTAB
 End

RETURN

OPEN_TBCOL:

ADDRESS ISPEXEC  'TBCLOSE 'TBCOL
ADDRESS ISPEXEC  'TBERASE 'TBCOL
ADDRESS ISPEXEC  'TBOPEN  'TBCOL
IF RC <> 0 THEN Do
   ADDRESS ISPEXEC 'TBCREATE 'TBCOL 'NAMES(CLNAME) '
   If rc <> 0 Then DO
      say "TBCREATE "TBCOL "RC="RC
      say "ZEDSMSG="ZEDSMSG
      say "ZERRLM="ZERRLM
      say "ZERRMSG="ZERRMSG
      say "ZERRSM="ZERRSM
    End
 End


RETURN

ADD_TABLE_TBCOL:

ADDRESS ISPEXEC 'TBADD 'TBCOL

RETURN

ADD_TABLE_LUWTABLE:

ROWNR  = ROWNR + 1
LZEILE = "       " || LZEILE
BZEILE = LZEILE
ADDRESS ISPEXEC 'TBADD 'LUWTABLE' MULT('TBADD_MULT')'
ADDRESS ISPEXEC 'TBADD 'BRTAB' MULT('TBADD_MULT')'
ANZAHL_ROWS = ANZAHL_ROWS + 1

RETURN

ADD_TABLE:

ROWNR  = ROWNR + 1
LZEILE = "       " || LZEILE
BZEILE = LZEILE
If Length(LZEILE) > ZSCREENW Then LZEILE = Substr(LZeile, 1, ZSCREENW )

ADDRESS ISPEXEC 'TBADD 'LUWTABLE' MULT('TBADD_MULT')'
ADDRESS ISPEXEC 'TBADD 'BRTAB' MULT('TBADD_MULT')'
ANZAHL_ROWS = ANZAHL_ROWS + 1

IF DB2_FUNKTION = "BR" Then Return  /* Nicht fuer Browse Table */

CZeile = ""
Do czi = 1 to words(cols)
   ColValue = word(RXCols, czi)
   CZeile = CZeile || value(ColValue) || "0a0d"x
 End

ADDRESS ISPEXEC 'TBADD 'COLTAB' MULT('TBADD_MULT')'

RETURN

CLOSE_TABLE:

ADDRESS ISPEXEC 'TBCLOSE 'LUWTABLE
ADDRESS ISPEXEC 'TBCLOSE 'COLTAB
ADDRESS ISPEXEC 'TBCLOSE 'BRTAB
ADDRESS ISPEXEC 'TBCLOSE 'SELTAB
ADDRESS ISPEXEC 'TBCLOSE 'TBCOL

RETURN

Edit_SQL:

EDIT_STMT = LUWEDSQL(ARG(1), LNR, ARG(2) )

RETURN EDIT_STMT

Load_DSNREXX_AC3:
ADDRESS TSO "SUBCOM DSNREXX"
IF RC THEN   S_RC = RXSUBCOM('ADD','DSNREXX','DSNREXX')

ADDRESS DSNREXX "CONNECT "DB2_SSID
IF SQLCODE <  0 THEN Do
   say "CONNECT   SQLCODE ="SQLCODE "<"DB2_SSID">"
   say "          SQLSTATE="SQLSTATE
 End

Return

UNLoad_DSNREXX_AC3:

ADDRESS TSO "SUBCOM DSNREXX"
If RC = 0 Then ADDRESS DSNREXX "DISCONNECT"
S_RC = RXSUBCOM('DELETE','DSNREXX','DSNREXX')

Return

Automatic_Header:

LOBVAL        = "404 405 408 409 412 413 988 989"
FNumeric      = "480 481 484 485 492 493 496 497 500 501 "

ADDRESS ISPEXEC  "VGET (ZSCREENW,ZSCREEND)"
/* LAENGENFELD AN HEADER ANPASSEN */
if datatype(OUTSQLDA.SQLD) = "NUM" THEN DO CI = 1 TO OUTSQLDA.SQLD
   IF Datatype(OUTSQLDA.ci.SQLLEN) = "NUM"  ,
    & OUTSQLDA.ci.SQLLEN < 0 THEN ITERATE  /* KEINE ANZEIGE */

   IF OUTSQLDA.CI.SQLTYPE = 492 | OUTSQLDA.CI.SQLTYPE = 493 Then do
      OUTSQLDA.ci.SQLLEN = 19   /* BIGINT   */
    End
   IF OUTSQLDA.CI.SQLTYPE = 496 | OUTSQLDA.CI.SQLTYPE = 497 Then do
      OUTSQLDA.ci.SQLLEN = 10   /* INTEGER  */
    End
   IF OUTSQLDA.CI.SQLTYPE = 500 | OUTSQLDA.CI.SQLTYPE = 501 Then do
      OUTSQLDA.ci.SQLLEN =  5   /* SAMLLINT */
    End
   IF OUTSQLDA.CI.SQLTYPE = 384 | OUTSQLDA.CI.SQLTYPE = 385 Then do
      OUTSQLDA.ci.SQLLEN = 10   /* DATE     */
    End
   IF OUTSQLDA.CI.SQLTYPE = 388 | OUTSQLDA.CI.SQLTYPE = 389 Then do
      OUTSQLDA.ci.SQLLEN =  8   /* TIME     */
    End
   IF OUTSQLDA.CI.SQLTYPE = 392 | OUTSQLDA.CI.SQLTYPE = 393 Then do
      OUTSQLDA.ci.SQLLEN =  26  /* TIMESTAMP  */
    End
   IF OUTSQLDA.CI.SQLTYPE = 484 | OUTSQLDA.CI.SQLTYPE = 485 Then do
      /*  DECIMAL  */
      OUTSQLDA.ci.SQLLEN = OUTSQLDA.ci.SQLLEN.SQLPRECISION + 1
    End
   IF Length(Strip(OUTSQLDA.CI.SQLNAME)) > OUTSQLDA.ci.SQLLEN Then Do
      OUTSQLDA.ci.SQLLEN = Length(Strip(OUTSQLDA.CI.SQLNAME))
    End
 END

If length(ddltext) < 6 Then Col_Start = 8
else Col_Start = 2

if datatype(OUTSQLDA.SQLD) = NUM THEN DO CI = 1 TO OUTSQLDA.SQLD
   IF Datatype(OUTSQLDA.ci.SQLLEN) = "NUM"  ,
    & OUTSQLDA.ci.SQLLEN < 0 THEN ITERATE  /* KEINE ANZEIGE */
   NI = CI + 1
   IF NI > OUTSQLDA.SQLD THEN NI = CI

   Test = Col_Start + OUTSQLDA.CI.SQLLEN + OUTSQLDA.NI.SQLLEN

   If Test >= ZSCREENW Then Do
      STest = ZSCREENW - Col_Start
      OUTSQLDA.CI.SQLLEN = OUTSQLDA.CI.SQLLEN + STest
      OUTSQLDA.CI.SQLLEN = STest
      Col_Start = 2 + OUTSQLDA.ci.SQLLEN
      Col_Start = 2
    End
   Else Do
      Col_Start = Col_Start + OUTSQLDA.ci.SQLLEN + 1
    End

 END

if datatype(OUTSQLDA.SQLD) = NUM THEN DO CI = 1 TO OUTSQLDA.SQLD
   IF Datatype(OUTSQLDA.ci.SQLLEN) = "NUM"  ,
    & OUTSQLDA.ci.SQLLEN < 0 THEN ITERATE  /* KEINE ANZEIGE */
   If pos(OUTSQLDA.CI.SQLTYPE, LOBVAL) > 0 ,
    & (OUTSQLDA.CI.SQLLEN = 0 | OUTSQLDA.CI.SQLLEN > 75 ) Then do
      OUTSQLDA.CI.SQLLEN = 75
    End
   coln = Strip(OUTSQLDA.CI.SQLNAME)
   If OUTSQLDA.ci.SQLLEN < length(coln) Then cl =  length(coln)
   Else                                      cl =  OUTSQLDA.ci.SQLLEN

   Schift = 'L'
   Fill   = ' '
   if Wordpos(OUTSQLDA.CI.SQLTYPE, FNumeric, 1) > 0 Then  Do
      Schift = 'R'
      Fill   = ' '
    End

   If CI = 1 Then
      DDLTEXT = DDLTEXT || ANZ_Daten(coln , '', Schift, cl, Fill)
   Else
      DDLTEXT = DDLTEXT ANZ_Daten(coln, '', Schift, cl, Fill)
 End
Return


Automatic_Data:
LOBVAL        = "404 405 408 409 412 413 988 989"
FNumeric      = "480 481 484 485 492 493 496 497 500 501 "
if datatype(OUTSQLDA.SQLD) = NUM THEN DO CI = 1 TO OUTSQLDA.SQLD
   IF OUTSQLDA.ci.SQLLEN < 0 THEN ITERATE /* KEINE ANZEIGE */
   If pos(OUTSQLDA.CI.SQLTYPE, LOBVAL) > 0 ,
    & (OUTSQLDA.CI.SQLLEN = 0 | OUTSQLDA.CI.SQLLEN > 75 ) Then do
      OUTSQLDA.CI.SQLLEN = 75
    End

   Schift = 'L'
   Fill   = ' '
   if Wordpos(OUTSQLDA.CI.SQLTYPE, FNumeric, 1) > 0 Then  Do
      Schift = 'R'
      Fill   = ' '
    End

   coln  = Strip(OUTSQLDA.CI.SQLNAME)
   If Datatype(Ausgabe.0) = "NUM" & Ausgabe.0 > 0 Then Do
      IVAL = "SData = AUSGABE.i." ||  COLN
      INTERPRET IVAL
    end
   else do
      SData = Value(OUTSQLDA.CI.SQLNAME)
    End
   If OUTSQLDA.ci.SQLLEN < length(coln)  Then cl =  length(coln)
   Else                                       cl =  OUTSQLDA.ci.SQLLEN

   If CI = 1 Then
      LZEILE  = LZEILE || ANZ_Daten('', SData, Schift, cl, Fill)
   Else
      LZEILE  = LZEILE ANZ_Daten(   '', SData, Schift, cl, Fill)
 End

Return

ANZ_Daten:

AUZeile = Arg(1)
ADaten  = Arg(2)
ASchift = Arg(3)
ALen    = Arg(4)
AFiller = Arg(5)

Select
  When Datatype(ALen) = "NUM" THEN NOP
  When Length(AUZeile) > Length(ADaten)  Then Alen = Length(AUZeile)
  When Length(ADaten)  > Length(AUZeile) Then Alen = Length(ADaten)
  Otherwise                                   Alen = Length(ADaten)
 End

If Length(Strip(Arg(1) )) > 0 Then do
   Select
     when ASchift = 'L'  Then RText = Left(AUZeile, ALen, AFiller)
     when ASchift = 'R'  Then RText = Right(AUZeile, ALen, AFiller )
     Otherwise                RText = Substr(Auzeile, 1, ALen)
    End
 End
Else Do
   Select
     when ASchift = 'L'  Then RText = Left(ADaten   , ALen, AFiller)
     when ASchift = 'R'  Then RText = Right(ADaten  , ALen, AFiller)
     Otherwise                RText = Substr(ADaten , 1, ALen)
    End
 End

Return RText


Translate_Unicode:
uctext = arg(1)
tablei = XRANGE('00'x,'FF'x)
/* 0 1 2 3 4 5 6 7 8 9 A B C D E F   */
 tableo = , /* conversion table for Unicode UTF-8 to EBCDIC */
 '00010203372D2E2F1605250B0C0D0E0F'x ||,   /*  0   */
 '101112133C3D322618193F271C1D1E1F'x ||,   /*  1   */
 '404F7F7B5B6C507D4D5D5C4E6B604B61'x ||,   /*  2   */
 'F0F1F2F3F4F5F6F7F8F97A5E4C7E6E6F'x ||,   /*  3   */
 '7CC1C2C3C4C5C6C7C8C9D1D2D3D4D5D6'x ||,   /*  4   */
 'D7D8D9E2E3E4E5E6E7E8E963ECFC5F6D'x ||,   /*  5   */
 '79818283848586878889919293949596'x ||,   /*  6   */
 '979899A2A3A4A5A6A7A8A943BBDCA107'x ||,   /*  7   */
 '202122232415061728292A2B2C090A1B'x ||,   /*  8   */
 '30311A333435360838393A3B04143EFF'x ||,   /*  9   */
 '41AAB0B19FB26AB5BDB49A8ABACAAFBC'x ||,   /*  A   */
 '908FEAFABEA0B6B39DDA9B8BB7B8B9AB'x ||,   /*  B   */
 '6465626663679E687471727378757677'x ||,   /*  C   */
 'AC69EDEEEBEFECBF80FDFEFBFCADAE59'x ||,   /*  D   */
 '4445424643479C485451525358555657'x ||,   /*  E   */
 '8C49CDCECBCFCCE170DDDEDBDC8D8EDF'x ||,   /*  F   */
 ''
 uctext = TRANSLATE(uctext,tableo,tablei) /* Unicode -> EBCDIC */

return uctext
