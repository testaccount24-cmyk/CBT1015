/* REXX */
/*******************************************************************/
/*                                                                 */
/* ProgramNAME      : LUWA1925                                     */
/* AUSRUF           : Procedure  x=LUWA1925(ssid,loc,ausw,obj)     */
/* AUTHER           : ULRICH BRAEUER                               */
/* FUNKTION         : Alter Object                                 */
/*                                                                 */
/*                                                                 */
/*******************************************************************/

SIGNAL ON FAILURE
SIGNAL ON ERROR
SIGNAL OFF FAILURE
SIGNAL OFF ERROR

PARSE SOURCE SRC.1  , /* ENVIRONMENT  (TSO)            */
             SRC.2  , /* AUFRUF ALS (COMMAND)          */
             SRC.3  , /* Program NAME (LUW97000)       */
             SRC.4  , /* SYS00186 (TEMP FILE)          */
             SRC.5  , /* AUFRUF AUS LIB (X.X.CLISTUDB) */
             SRC.6  , /* ?                             */
             SRC.7  , /* TSO                           */
             SRC.8  , /* ISPF                          */
             SRC.9  , /* ?                             */


ENV        = "TSO"
X          = MSG('OFF')
USER       = USERID()
SYSCATS    = "SYSCAT"
SYSIBMS    = "SYSIBM"
SYSIBMA    = "SYSIBMADM"
SYSPROCA   = "SYSPROC"
RECLEN     = 4096
TRACKS     = 60
DSNRECON   = "N"
ADDRESS ISPEXEC 'VGET (ALTERJOB) PROFILE'
ADDRESS ISPEXEC 'VGET (DSNRECON) PROFILE'
ADDRESS ISPEXEC 'VGET (TRACKS) PROFILE'
ADDRESS ISPEXEC 'VGET (RECLEN) PROFILE'
ADDRESS ISPEXEC 'VGET (SYSIBMS) PROFILE'
ADDRESS ISPEXEC 'VGET (SYSCATS) PROFILE'
ADDRESS ISPEXEC 'VGET (SYSIBMA) PROFILE'
ADDRESS ISPEXEC 'VGET (SYSPROCA) PROFILE'

ADDRESS ISPEXEC 'VGET (UDBTRACE) PROFILE'
IF UDBTRACE = 'ON' THEN TRACE I
ELSE                    TRACE

red   = '01'x                              /* Assign colors to       */
blue  = '02'x                              /*   Attribute bytes      */
green = '03'x                              /*   found in the data    */
white = '04'x
in1   = '05'x
in2   = '06'x
in3   = '07'x
endin = '3a'x
keyw  = '3b'x
maxlines = 0                               /* set max number of lines*/
dyndata  = ''                              /* initialize data        */
cmddata  = ''                              /* initialize data        */
curline = 1                                /* set current line #     */

stmt              = ""
ddltext           = ""

ssid        = arg(1)
location    = arg(2)
auswkz      = arg(3)
lnr         = arg(4)
tabnr       = arg(5)
Do_All      = arg(6)
eingabe     = arg(7)
eingabe2    = arg(8)
statement   = arg(9)
object1     = arg(10)
object2     = arg(11)
object3     = arg(12)
object4     = arg(13)
object5     = arg(14)
EDIT        = arg(15)
Object_list = arg(16)
DB2Vers     = arg(17)
proclib     = arg(18)
curnr       = arg(19)   /* Cursor Nummer der Zeile in ISPF-TAB */
obj         = ""
tablespace  = ""
DB2_SSID    = SSID

listtb = ListObject
crlf   = "0a0d"x
crlf   = '0a0d'x

drop al.
al.0  = 0
drop sl.
sl.0 = 0

CZeile  = ""
If Datatype(Curnr) = "NUM" Then do
   tabnr = tabnr -1  /* Aktuelle Table in LUWA1210 verwendet */
   LUWTABLE       = "LUWTB"tabnr
   COLTAB         = "COLTB"tabnr
   address ispexec 'TBOPEN  'COLTAB
   address ispexec 'TBTOP   'COLTAB
   address ispexec 'TBSKIP  'COLTAB' NUMBER('curnr')'
   address ispexec 'TBGET   'COLTAB
   address ispexec 'TBCLOSE 'COLTAB
 End


RXDB2_SSID        = SSID
RXDB2_GETSTEM     = 'EINGABE.'
RXDB2_PUTSTEM     = 'AUSGABE.'
ANZAHL_ROWS       = 0

ALTAB          = "ALTER" || tabnr
address ispexec  'TBERASE 'ALTAB
If RC > 12  Then do
   say "Error on TBERASE RC="RC "TABLE="ALTAB
 End
address ispexec  'TBOPEN 'ALTAB
if rc /= 0 then Do
   ADDRESS ISPEXEC "TBCREATE "ALTAB   ,
                   " KEYS(NAME)             ",
                   " NAMES(OVal, NVal) ",
                   " REPLACE"
 End


parse value DB2Vers with DBENV 4 DBVers 6 DBRel 8 DBMod
parse value Object1 with DB2_CREATOR1 '.' DB2_NAME1
parse value Object2 with DB2_CREATOR2 '.' DB2_NAME2
parse value Object3 with DB2_CREATOR3 '.' DB2_NAME3
parse value Object4 with DB2_CREATOR4 '.' DB2_NAME4
parse value Object5 with DB2_CREATOR5 '.' DB2_NAME5

eingabe3 = subword(eingabe2, 2)
eingabe2 = Word(eingabe2, 1)

Call Get_CFG_FILE

RLIB    = 'N'

IF Substr(ALTERJOB, 1, 1) = "S" THEN EDIT = "YES"
 Else                                EDIT = "NO"

select
  when auswkz = 'BP' & eingabe   = "ALTER" Then do
       CALL Alter_BP
   End
  when auswkz = 'TS' & eingabe   = "ALTER" Then do
       CALL Alter_Tablespace
   End
  when auswkz = 'TB' & eingabe   = "ALTER" Then do
       CALL Alter_Table
   End
  when auswkz = 'FN' & eingabe   = "ALTER" Then do
       CALL Alter_FN
   End
  when auswkz = 'IX' & eingabe   = "ALTER" Then do
       CALL Alter_IX
   End
  when auswkz = 'SE' & eingabe   = "ALTER" Then do
       CALL Alter_SE
   End
  when auswkz = 'CO'   & eingabe   = "ALTER" Then do
       CALL Alter_Column
   End
  Otherwise do
       anzcols = 0
   End
 End


If al.0 > 0 Then Call Build_Ausgabe
ADDRESS ISPEXEC "FTCLOSE NAME(" || MEM || ") LIBRARY(ISPFILE)"
If al.0 > 0 Then do
   ADDRESS ISPEXEC "EDIT DATASET('"CLMEM"') PANEL(ISREFR01)"
 End

if anzcols = 0 THEN RETURN 12
if EDIT = "YES" THEN Call Edit_Stmt  /* Anzeige Erwuenscht */


Return Stmt

Build_Ausgabe:

MEM     = "ALTEROBJ"
SKEL    = "SKALTS9"
JOB     = "Y"
STMT    = "N"
STOSTA  = "N"
OK    =  LISTDSI(ISPFILE "FILE")
CLMEM = Strip(sysdsname) || "(" || MEM || ")"

ADDRESS ISPEXEC 'FTOPEN'
If rc > 4 Then Do
  Say 'FTOPEN   RC='RC
  Say 'ZERRSM = 'ZERRSM
  Say 'ZERRLM = 'ZERRLM
 End

JOB  = "Y"
STMT = "N"
ADDRESS ISPEXEC 'FTINCL 'SKEL
If rc > 4 Then Do
  Say 'FTINCL   'SKEL 'RC='RC
  Say 'ZERRSM = 'ZERRSM
  Say 'ZERRLM = 'ZERRLM
 End

Do i = 1 to al.0
   JOB  = "N"
   STMT = "Y"
   SQLSTMT = al.i
   ADDRESS ISPEXEC 'FTINCL 'SKEL
   If rc > 4 Then Do
     Say 'FTINCL   'SKEL 'RC='RC
     Say 'ZERRSM = 'ZERRSM
     Say 'ZERRLM = 'ZERRLM
    End
 End

Return

Alter_Tablespace:

Parse value CZeile with TBSPACE                    value(crlf) ,
                        DEFINER                    value(crlf) ,
                        CREATE_TIME                value(crlf) ,
                        TBSPACEID                  value(crlf) ,
                        BUFFERPOOLID               value(crlf) ,
                        SGNAME                     value(crlf) ,
                        SGID                       value(crlf) ,
                        TBSPACETYPE                value(crlf) ,
                        DATATYPE                   value(crlf) ,
                        EXTENTSIZE                 value(crlf) ,
                        PREFETCHSIZE               value(crlf) ,
                        OVERHEAD                   value(crlf) ,
                        TRANSFERRATE               value(crlf) ,
                        PAGESIZE                   value(crlf) ,
                        NGNAME                     value(crlf) ,
                        DATATAG                    value(crlf) ,
                        EFFECTIVEPREFETCHSIZE      value(crlf) ,
                        DROP_RECOVERY              value(crlf) ,
                        REMARKS                    '0a0d'x     ,
                        BPNAME                     value(crlf) ,
                        TBSP_STATE                 value(crlf) ,
                        TBSP_UTILIZATION_PERCENT   value(crlf) ,
                        TBSP_USING_AUTO_STORAGE    value(crlf) ,
                        TBSP_AUTO_RESIZE_ENABLED   value(crlf) ,
                        TBSP_MAX_SIZE              value(crlf) ,
                        TBSP_INCREASE_SIZE         value(crlf) ,
                        TBSP_INCREASE_SIZE_PERCENT value(crlf) ,
                        FS_CACHING                 value(crlf) ,
                        .

INCG          = ""
MAXG          = ""
If TBSP_MAX_SIZE < 0 Then TBSP_MAX_SIZE = "NONE"
If TBSP_INCREASE_SIZE > 1024 Then Do
   TBSP_INCREASE_SIZE = TBSP_INCREASE_SIZE % 1024
   INCG               = "K"
 End
If TBSP_INCREASE_SIZE > 1024 Then Do
   TBSP_INCREASE_SIZE = TBSP_INCREASE_SIZE % 1024
   INCG               = "M"
 End
If TBSP_MAX_SIZE  > 1024 Then Do
   TBSP_MAX_SIZE = TBSP_MAX_SIZE % 1024
   MAXG          = "K"
 End
If TBSP_MAX_SIZE  > 1024 Then Do
   TBSP_MAX_SIZE = TBSP_MAX_SIZE % 1024
   MAXG          = "M"
 End
TBSP_MAX_SIZE      = TBSP_MAX_SIZE || MAXG
TBSP_INCREASE_SIZE = TBSP_INCREASE_SIZE || INCG
TBSPACE           = Left(TBSPACE     , 30, ' ')
REDUCE            = Left(' '         ,  1, ' ')
REBALANCE         = 'N'
SWONLINE          = 'N'
AUTORESIZE        = 'Y'
CONLARGE          = 'N'
IF DATATYPE       = 'L' THEN CONLARGE = 'Y'
LOWERHWM          = 'N'
BPNAME            = LEFT(BPNAME                    , 30, ' ')
IncSize           = LEFT(TBSP_INCREASE_SIZE        , 20, ' ')
IncPercent        = LEFT(TBSP_INCREASE_SIZE_PERCENT, 20, ' ')
Maxsize           = LEFT(TBSP_MAX_SIZE             , 20, ' ')
If FS_CACHING     = 0 THEN FS_CACHING = 'N'
 Else                      FS_CACHING = 'Y'
If DROP_RECOVERY  = 'Y' THEN DROPREC    = 'Y'
 Else                        DROPREC    = 'N'
BPNAME            = LEFT(BPNAME       , 30, ' ')
SGNAME            = LEFT(SGNAME       , 30, ' ')
If  TBSP_USING_AUTO_STORAGE = 0 Then AUTOSTOR = 'N'
 Else                                AUTOSTOR = 'Y'

area.0  = 22
area.1  = white"Alter TABLESPACE   "TBSPACE
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"                                             "
area.6  = white"       "keyw"REDUCE           " in1 || REDUCE    ||  ,
    endin "M-Max S-STOP"
area.7  = white"       "keyw"REBALANCE        " in1 || REBALANCE ||  ,
    endin "Y-YES       "
area.8  = white"       "keyw"CONVERT TO LARGE " in1 || CONLARGE  ||  ,
    endin "Y-Yes "
area.9  = white"       "keyw"LOWER HWM        " in1 || LOWERHWM  ||  ,
    endin "Y-Yes "
area.10 = white"       "keyw"SWITCHONLINE     " in1 ||SWONLINE   ||  ,
    endin "Y-Yes "
area.11 = white"       "keyw"DROP_RECOVERY    " in1 ||DROPREC    ||  ,
    endin "Y-ON, N-OFF "
area.12 = white"       "keyw"AutoStorage      " in1 ||AUTOSTOR   ||  ,
    endin "Y-Yes "
area.13 = white"       "keyw"AUTORESIZE       " in1 || AUTORESIZE||endin
area.14 = white"       "keyw"IncreaseSize     " in1 ||IncSize    ||  ,
    endin "   -1=AUTOMATIC"
area.15 = white"       "keyw"IncreasePercent  " in1 ||IncPercent ||  ,
    endin "   0=NOT USED "
area.16 = white"       "keyw"MaxSize          " in1 ||Maxsize    ||  ,
    endin "NONE=UNBEGRENZT "
area.17 = white"       "keyw"BPNAME           " in1 || BPNAME   ||endin
area.18 = white"       "keyw"STOGROUP         " in1 || SGNAME   ||endin
area.19 = white"       "keyw"FileSystemCaching" in1 ||FS_CACHING||endin
area.20 = white"       "keyw"NewName          " in1 ||TBSPACE||endin
area.21 = white" "
area.22 = white" "

Call Anzeige_Dyn_Panel

If Strip(REDUCE_Val) <> Strip(REDUCE) Then Do
   select
      When REDUCE_Val = "S" THEN RD = "STOP"
      When REDUCE_Val = "M" THEN RD = "MAX"
      Otherwise RD = ""
     End
   OK = Nexttab( "Alter TABLESPACE " TBSPACE, al. )
   OK = Nexttab( "      REDUCE    "RD       , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(REBALANCE_Val) <> Strip(REBALANCE) Then Do
   OK = Nexttab( "Alter TABLESPACE " TBSPACE, al. )
   OK = Nexttab( "      REBALANCE "         , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(BPNAME_Val) <> Strip(BPNAME)             ,
 & Strip(BPNAME_Val) <> ''            Then Do
   OK = Nexttab( "Alter TABLESPACE " TBSPACE, al. )
   OK = Nexttab( "      BUFFERPOOL " BPNAME_VAL , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(STOGROUP_Val) <> Strip(SGNAME)  Then Do
   OK = Nexttab( "Alter TABLESPACE " TBSPACE, al. )
   OK = Nexttab( "      USING STOGROUP " STOGROUP_Val,  al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(FileSystemCaching_Val) <> Strip(FS_CACHING) Then do
   FS = ""
   if FileSystemCaching_Val = 'N' THEN FS = "NO "
   OK = Nexttab( "Alter TABLESPACE " TBSPACE, al. )
   OK = Nexttab( "      "FS "File System Caching" , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(CONVERT_Val) <> Strip(CONLARGE) Then do
   OK = Nexttab( "Alter TABLESPACE " TBSPACE, al. )
   OK = Nexttab( "      CONVERT TO LARGE        " , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(LOWER_Val) <> Strip(LOWERHWM) Then do
   OK = Nexttab( "Alter TABLESPACE " TBSPACE, al. )
   OK = Nexttab( "      LOWER HIGH WATER MARK   " , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(AUTOSTORAGE_Val) <> Strip(AUTOSTOR) Then do
   OK = Nexttab( "Alter TABLESPACE " TBSPACE, al. )
   OK = Nexttab( "      MANAGED BY AUTOMATIC STORAGE " , al. )
   OK = Nexttab( "; "                       , al. )
   OK = Nexttab( "Alter TABLESPACE " TBSPACE, al. )
   OK = Nexttab( "      REBALANCE  "        , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(SWITCHONLINE_Val) <> Strip(SWONLINE) Then do
   OK = Nexttab( "Alter TABLESPACE " TBSPACE, al. )
   OK = Nexttab( "      SWITCH ONLINE                " , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(DROP_RECOVERY_Val) <> Strip(DROPREC) Then do
   If DROP_RECOVERY_Val = 'N' THEN DC = 'OFF'
    Else                           DC = 'ON '
   OK = Nexttab( "Alter TABLESPACE " TBSPACE, al. )
   OK = Nexttab( "      DROPPED TABLE RECOVERY " DC    , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(IncreaseSize_Val) <> Strip(IncSize) Then do
   OK = Nexttab( "Alter TABLESPACE " TBSPACE, al. )
   OK = Nexttab( "       INCREASESIZE "IncreaseSize_Val , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(IncreasePercent_val) <> Strip(IncPercent) Then do
   OK = Nexttab( "Alter TABLESPACE " TBSPACE, al. )
   OK = Nexttab( "       INCREASESIZE "Strip(IncreasePercent_val) || ,
                 " PERCENT", al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(Maxsize_Val) <> Strip(Maxsize) Then do
   OK = Nexttab( "Alter TABLESPACE " TBSPACE, al. )
   OK = Nexttab( "      MAXSIZE     " Maxsize_Val      , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(NewName_Val) <> Strip(TBSPACE) Then do
   OK = Nexttab( "RENAME TABLESPACE " TBSPACE, al. )
   OK = Nexttab( "       TO         " NewName_Val      , al. )
   OK = Nexttab( "; "                       , al. )
 End

Return

Alter_Table:

Parse value CZeile with CR                       value(crlf) ,
                        NM                       value(crlf) ,
                        TYPE                     value(crlf) ,
                        TBSPACE                  value(crlf) ,
                        INDEX_TBSPACE            value(crlf) ,
                        LONG_TBSPACE             value(crlf) ,
                        PARENTS                  value(crlf) ,
                        CHILDREN                 value(crlf) ,
                        SELFREFS                 value(crlf) ,
                        CARD                     value(crlf) ,
                        STATUS                   value(crlf) ,
                        CTIME                    value(crlf) ,
                        LASTUSED                 value(crlf) ,
                        COMPRESSION              value(crlf) ,
                        CLUSTERED                value(crlf) ,
                        LOCKSIZE                 value(crlf) ,
                        APPEND_MODE              value(crlf) ,
                        VOLATILE                 value(crlf) ,
                        DATACAPTURE              value(crlf) ,
                        DROPRULE                 value(crlf) ,
                        ACCESS_MODE              value(crlf) ,
                        ONCOMMIT                 value(crlf) ,
                        ONROLLBACK               value(crlf) ,
                        .


table    = space(CR "." NM, 0)
NM       = LEFT(NM,            50, ' ')
IF COMPRESSION = 'N' Then NOP
ELSE                      COMPRESSION = 'Y'
   Select
     when LOCKSIZE = 'R' THEN LSIZE = "LOCKSIZE ROW"
     when LOCKSIZE = 'T' THEN LSIZE = "LOCKSIZE TABLE"
     Otherwise                          LSIZE = ""
    End

   Select
     when VOLATILE = ' ' THEN VOLATILE = 'N'
     Otherwise                VOLATILE = 'Y'
    End

   Select
     when APPEND_MODE = 'Y' THEN APPEND = "Y"
     Otherwise                   APPEND = "N"
    End

   Select
     when DATACAPTURE = 'N' THEN NOP
     when DATACAPTURE = 'Y' THEN DATACAPTURE = "C"
     when DATACAPTURE = 'L' THEN NOP
     Otherwise                   NOP
    End

area.0  = 14
area.1  = white"Alter TABLE        "TABLE
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"                                             "
area.6  = white"       "keyw"COMPRESSION      " in1 ||COMPRESSION||  ,
    endin "Y-YES N-NO  "
area.7  = white"       "keyw"LOCKSIZE         " in1 ||LOCKSIZE   ||  ,
    endin "R-ROW T-Table"
area.8  = white"       "keyw"VOLATILE         " in1 ||VOLATILE   ||  ,
    endin "Y-YES N-NO   "
area.9  = white"       "keyw"APPEND           " in1 ||APPEND     ||  ,
    endin "Y-YES N-NO   "
area.10 = white"       "keyw"DATACAPTURE      " in1 ||DATACAPTURE||  ,
    endin "N-NONE C-CHANGES L-CHANGES INCL. LONGVAR "
area.11 = white" "
area.12 = white"       "keyw"NewName          " in1 || NM    ||endin
area.13 = white" "
area.14 = white" "

Call Anzeige_Dyn_Panel


If Strip(COMPRESSION_Val) <> Strip(COMPRESSION) Then Do
   IF COMPRESSION_VAL = "Y" THEN VALUE = "YES"
   ELSE                          VALUE = "NO"
   OK = Nexttab( "ALTER  TABLE       " Table  , al. )
   OK = Nexttab( "       COMPRESS    " VALUE            , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(LOCKSIZE_Val) <> Strip(LOCKSIZE) Then do
   IF LOCKSIZE_Val    = "R" THEN VALUE = "ROW"
   ELSE                          VALUE = "TABLE"
   OK = Nexttab( "ALTER  TABLE       " Table  , al. )
   OK = Nexttab( "       LOCKSIZE    " VALUE            , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(VOLATILE_Val) <> Strip(VOLATILE) Then do
   IF VOLATILE_Val    = "Y" THEN VALUE = ""
   ELSE                          VALUE = "NOT"
   OK = Nexttab( "ALTER  TABLE       " Table  , al. )
   OK = Nexttab( "  "VALUE" VOLATILE    "                  , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(APPEND_Val) <> Strip(APPEND ) Then do
   IF APPEND_Val      = "Y" THEN VALUE = "ON"
   ELSE                          VALUE = "OFF"
   OK = Nexttab( "ALTER  TABLE       " Table  , al. )
   OK = Nexttab( "       APPEND      " VALUE            , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(DATACAPTURE_Val) <> Strip(DATACAPTURE) Then do
   select
     when DATACAPTURE_Val = "N" THEN VALUE = "NONE"
     when DATACAPTURE_Val = "C" THEN VALUE = "CHANGES"
     when DATACAPTURE_Val = "L" THEN VALUE = "CHANGES  INCLUDE ",
                                             "LONGVAR COLUMNS "
     Otherwise                       VALUE = "NONE"
    End
   OK = Nexttab( "ALTER  TABLE       " Table  , al. )
   OK = Nexttab( "       DATA CAPTURE" VALUE            , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(NewName_Val) <> Strip(NM     ) Then do
   OK = Nexttab( "RENAME TABLE       " Table  , al. )
   OK = Nexttab( "       TO          " NewName_Val      , al. )
   OK = Nexttab( "; "                       , al. )
 End

Return

Alter_BP:

Parse value CZeile with BPNAME                   value(crlf) ,
                        BUFFERPOOLID             value(crlf) ,
                        NGNAME                   value(crlf) ,
                        NPAGES                   value(crlf) ,
                        PAGESIZE                 value(crlf) ,
                        ESTORE                   value(crlf) ,
                        NUMBLOCKPAGES            value(crlf) ,
                        BLOCKSIZE                value(crlf) ,
                        .

BPNAME            = Left(BPNAME      , 30, ' ')
IF NPAGES < 0 Then NPAGES = "AUTOMATIC"
 Else              NPAGES = NPAGES
NPAGES            = LEFT(NPAGES       , 30, ' ')
BLOCKSIZE         = LEFT(BLOCKSIZE    , 30, ' ')
NUMBLOCKPAGES     = LEFT(NUMBLOCKPAGES, 30, ' ')

area.0  =  10
area.1  = white"Alter BUFFERPOOL   "BPNAME
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"                                             "
area.6  = white"       "keyw"NPAGES        " in1 ||NPAGES       ||endin
area.7  = white"       "keyw"BLOCKSIZE     " in1 ||BLOCKSIZE    ||endin
area.8  = white"       "keyw"NUMBLOCKPAGES " in1 ||NUMBLOCKPAGES||endin
area.9  = white" "
area.10 = white" "

Call Anzeige_Dyn_Panel

If Strip(NPAGES_Val) <> Strip(NPAGES) Then Do
   OK = Nexttab( "Alter BUFFERPOOL " BPNAME , al. )
   OK = Nexttab( "      SIZE      "NPAGES_VAL   , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(BLOCKSIZE_Val) <> Strip(BLOCKSIZE) Then do
   OK = Nexttab( "Alter BUFFERPOOL " BPNAME , al. )
   OK = Nexttab( "      BLOCKSIZE "BLOCKSIZE_Val,  al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(NUMBLOCKPAGES_Val) <> Strip(NUMBLOCKPAGES) Then Do
   OK = Nexttab( "Alter BUFFERPOOL " BPNAME , al. )
   OK = Nexttab( "      NUMBLOCKPAGES "NUMBLOCKPAGES_Val, al.)
   OK = Nexttab( "; "                       , al. )
 End

Return

Alter_FN:

parse value CZeile with cr                       value(crlf) ,
                        nm                       value(crlf) ,
                        sp                       value(crlf) ,
                         .

FENCED            = Left(' '         ,  1, ' ')
SECURED           = Left(' '         ,  1, ' ')
THREADSAFE        = Left(' '         ,  1, ' ')

area.0  =  10
area.1  = white"Alter FUCTION      "Space(cr "." nm, 0)
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"                                             "
area.6  = white"       "keyw"FENCED        " in1 ||FENCED       || ,
    endin "Y-Yes N-NOT "
area.7  = white"       "keyw"SECURED       " in1 ||SECURED      || ,
    endin "Y-Yes N-NOT "
area.8  = white"       "keyw"THREADSAFE    " in1 ||THREADSAFE   || ,
    endin "Y-Yes N-NOT "
area.9  = white" "
area.10 = white" "

Call Anzeige_Dyn_Panel

If Strip(FENCED_Val) <> Strip(FENCED) Then Do
   NOT = ""
   If Strip(FENCED_Val)         = "N" THEN NOT = "NOT "
   OK = Nexttab( "Alter FUNCTION   " Space(cr "." nm, 0) , al.)
   OK = Nexttab( "  "NOT"FENCED    "             , al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(SECURED_Val) <> Strip(SECURED) Then do
   NOT = ""
   If Strip(SECURED_Val)        = "N" THEN NOT = "NOT "
   OK = Nexttab( "Alter FUNCTION   " Space(cr "." nm, 0) , al.)
   OK = Nexttab( "  "NOT"SECURED   "             ,  al. )
   OK = Nexttab( "; "                       , al. )
 End

If Strip(THREADSAFE_Val) <> Strip(THREADSAFE) Then Do
   NOT = ""
   If Strip(THREADSAFE_Val)     = "N" THEN NOT = "NOT "
   OK = Nexttab( "Alter FUNCTION   " Space(cr "." nm, 0) , al.)
   OK = Nexttab( "  "NOT"THREADSAFE    "                 , al.)
   OK = Nexttab( "; "                       , al. )
 End

Return

Alter_IX:

parse value CZeile with INDSCHEMA                value(crlf) ,
                        INDNAME                  value(crlf) ,
                        TABSCHEMA                value(crlf) ,
                        TABNAME                  value(crlf) ,
                        TBSPACEID                value(crlf) ,
                        COLNAMES                 value(crlf) ,
                        UNIQUERULE               value(crlf) ,
                        MADE_UNIQUE              value(crlf) ,
                        COLCOUNT                 value(crlf) ,
                        INDEXTYPE                value(crlf) ,
                        COMPRESSION              value(crlf) ,
                         .

COMPRESS          = Left(COMPRESSION ,  1, ' ')

area.0  =  7
area.1  = white"Alter FUCTION      "Space(INDSCHEMA"." INDNAME, 0)
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"                                             "
area.6  = white"       "keyw"COMPRESSION   " in1 ||COMPRESS     || ,
    endin "Y-Yes N-NO  "
area.7  = white" "

Call Anzeige_Dyn_Panel

If Strip(COMPRESSION_Val) <> Strip(COMPRESS) Then Do
   If Strip(COMPRESSION_Val)    = "N" THEN NOT = "NO "
    Else                                   NOT = "YES"
   OK = Nexttab( "Alter INDEX      "Space(INDSCHEMA"." INDNAME, 0), al.)
   OK = Nexttab( "  COMPRESS "NOT                , al. )
   OK = Nexttab( "; "                       , al. )
 End


Return

Alter_SE:

parse value CZeile with SCHEMA                   value(crlf) ,
                        NAME                     value(crlf) ,
                        SEQID                    value(crlf) ,
                        SEQTYPE                  value(crlf) ,
                        INCREMENT                value(crlf) ,
                        START                    value(crlf) ,
                        MAXVALUE                 value(crlf) ,
                        MINVALUE                 value(crlf) ,
                        NEXTCACHEFIRSTVALUE      value(crlf) ,
                        CYCLE                    value(crlf) ,
                        CACHE                    value(crlf) ,
                        ORDER                    value(crlf) ,
                        DATATYPEID               value(crlf) ,
                        SOURCETYPEID             value(crlf) ,
                        CREATE_TIME              value(crlf) ,
                        ALTER_TIME               value(crlf) ,
                        PRECISION                value(crlf) ,
                        ORIGIN                   value(crlf) ,
                        DCREATOR                 value(crlf) ,
                        DNAME                    value(crlf) ,
                        DCOLNAME                 value(crlf) ,
                        REMARKS                  value(crlf) ,
                        .

RESTARTWITH         = Left(' '                  , 19, ' ')
INCREMENT           = Left(INCREMENT            , 19, ' ')
START               = Left(START                , 19, ' ')
MAXVALUE            = Left(MAXVALUE             , 19, ' ')
MINVALUE            = Left(MINVALUE             , 19, ' ')
MAXASSIGNEDVAL      = Left(NEXTCACHEFIRSTVALUE  , 19, ' ')
CYCLE               = Left(CYCLE                , 19, ' ')
CACHE               = Left(CACHE                , 19, ' ')
ORDER               = Left(ORDER                , 19, ' ')
Remarks             = Left(Remarks              , 19, ' ')

area.0 = 20
area.1  = white"Alter Sequence "Space(Schema '.' Name, 0) ,
               " ID="SEQID "Type="SEQTYPE
area.2  = white"                                               "
area.3  = white"                                               "
area.4  = white"                                               "
area.5  = white"                                               "
area.6  = white"     "keyw"RESTARTWITH   "in1 || RESTARTWITH   || endin
area.7  = white"     "keyw"INCREMENT     "in1 || INCREMENT     || endin
area.8  = white"     "keyw"START         "in1 || START         || endin
area.9  = white"     "keyw"MAXVALUE      "in1 || MAXVALUE      || endin
area.10 = white"     "keyw"MINVALUE      "in1 || MINVALUE      || endin
area.11 = white"     "keyw"CYCLE         "in1 || CYCLE         || endin
area.12 = white"     "keyw"CACHE         "in1 || CACHE         || endin
area.13 = white"     "keyw"ORDER         "in1 || ORDER         || endin
area.14 = white"      MAXASSIGNEDVAL"white||MAXASSIGNEDVAL
area.15 = white" "
area.16 = white"     "keyw"Remarks       "in1 || Remarks
area.17 = " "
area.18 = " "
area.19 = " "endin
area.20 = white" "

Call Anzeige_Dyn_Panel

If SEQTYPE = "S" Then Call Build_Alter_Sequence
Else                  Call Build_Alter_Identity

Return

Build_Alter_Sequence:

If Restartwith_Val <> RESTARTWITH Then Do
   OK = Nexttab( "Alter Sequence " Space(Schema '.' Name, 0) , al. )
   If RESTARTWITH_Val = "" Then Do
      OK = Nexttab( "      Restart    ; "                 , al.)
    End
   Else do
      OK = Nexttab( "      Restart WITH " RESTARTWITH_Val " ;" , al.)
    End
 End

If INCREMENT_Val <> INCREMENT   Then Do
   OK = Nexttab( "Alter Sequence " Space(Schema '.' Name, 0) , al. )
   OK = Nexttab( "      INCREMENT BY " INCREMENT_Val " ;"    , al. )
 End

If MINVALUE_Val <> MINVALUE    Then Do
   OK = Nexttab( "Alter Sequence " Space(Schema '.' Name, 0) , al. )
   If MINVALUE_Val = "" Then Do
      OK = Nexttab( "   NO MINVALUE  "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      MINVALUE  " MINVALUE_Val " ;"    , al. )
    End
 End

If MAXVALUE_Val <> MAXVALUE    Then Do
   OK = Nexttab( "Alter Sequence " Space(Schema '.' Name, 0) , al. )
   If MAXVALUE_Val = "" Then Do
      OK = Nexttab( "      MAXVALUE  "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      MAXVALUE  " MAXVALUE_Val " ;"    , al. )
    End
 End

If CACHE_Val <> CACHE       Then Do
   OK = Nexttab( "Alter Sequence " Space(Schema '.' Name, 0) , al. )
   If CACHE_Val    = "" ,
    | CACHE_Val    = 0  ,
    | SUBSTR(STRIP(CACHE_Val), 1, 1)    = "N" Then Do
      OK = Nexttab( "   NO CACHE     "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      CACHE     " CACHE_Val " ;"    , al. )
    End
 End

If CYCLE_Val <> CYCLE    Then Do
   OK = Nexttab( "Alter Sequence " Space(Schema '.' Name, 0) , al. )
   If SUBSTR(STRIP(CYCLE_Val), 1, 1)    = "N" Then Do
      OK = Nexttab( "   NO CYCLE   "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      CYCLE   "              " ;"    , al. )
    End
 End


If ORDER_Val <> ORDER    Then Do
   OK = Nexttab( "Alter Sequence " Space(Schema '.' Name, 0) , al. )
   If SUBSTR(STRIP(ORDER_Val), 1, 1)    = "N" Then Do
      OK = Nexttab( "   NO ORDER   "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      ORDER   "              " ;"    , al. )
    End
 End

Return

Build_Alter_Identity:

If Restartwith_Val <> RESTARTWITH Then Do
   RESTARTWITH_Val = Strip(RESTARTWITH_Val)
   OK = Nexttab( "Alter Table " Space(DCreator'.' DName, 0) , al. )
   OK = Nexttab( "      Alter Column "Space(DCOLNAME, 0)    , al. )
   OK = Nexttab( "      Restart WITH " RESTARTWITH_Val " ;" , al.)
 End

If INCREMENT_Val <> INCREMENT   Then Do
   OK = Nexttab( "Alter Table " Space(DCreator'.' DName, 0) , al. )
   OK = Nexttab( "      Alter Column "Space(DCOLNAME, 0)    , al. )
   OK = Nexttab( "      INCREMENT BY " INCREMENT_Val " ;"    , al. )
 End

If MINVALUE_Val <> MINVALUE    Then Do
   OK = Nexttab( "Alter Table " Space(DCreator'.' DName, 0) , al. )
   OK = Nexttab( "      Alter Column "Space(DCOLNAME, 0)    , al. )
   If MINVALUE_Val = "" Then Do
      OK = Nexttab( "   NO MINVALUE  "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      MINVALUE  " MINVALUE_Val " ;"    , al. )
    End
 End

If MAXVALUE_Val <> MAXVALUE    Then Do
   OK = Nexttab( "Alter Table " Space(DCreator'.' DName, 0) , al. )
   OK = Nexttab( "      Alter Column "Space(DCOLNAME, 0)    , al. )
   If MAXVALUE_Val = "" Then Do
      OK = Nexttab( "      MAXVALUE  "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      MAXVALUE  " MAXVALUE_Val " ;"    , al. )
    End
 End

If CACHE_Val <> CACHE       Then Do
   OK = Nexttab( "Alter Table " Space(DCreator'.' DName, 0) , al. )
   OK = Nexttab( "      Alter Column "Space(DCOLNAME, 0)    , al. )
   If CACHE_Val    = "" ,
    | CACHE_Val    = 0  ,
    | SUBSTR(STRIP(CACHE_Val), 1, 1)    = "N" Then Do
      OK = Nexttab( "   NO CACHE     "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      CACHE     " CACHE_Val " ;"    , al. )
    End
 End

If CYCLE_Val <> CYCLE    Then Do
   OK = Nexttab( "Alter Table " Space(DCreator'.' DName, 0) , al. )
   OK = Nexttab( "      Alter Column "Space(DCOLNAME, 0)    , al. )
   If SUBSTR(STRIP(CYCLE_Val), 1, 1)    = "N" Then Do
      OK = Nexttab( "   NO CYCLE   "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      CYCLE   "              " ;"    , al. )
    End
 End


If ORDER_Val <> ORDER    Then Do
   OK = Nexttab( "Alter Table " Space(DCreator'.' DName, 0) , al. )
   OK = Nexttab( "      Alter Column "Space(DCOLNAME, 0)    , al. )
   If SUBSTR(STRIP(ORDER_Val), 1, 1)    = "N" Then Do
      OK = Nexttab( "   NO ORDER   "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      ORDER   "              " ;"    , al. )
    End
 End

Return

Alter_Column:

parse value CZeile with TBCREATOR             value(crlf) ,
                        TBNAME                value(crlf) ,
                        COLNO                 value(crlf) ,
                        NAME                  value(crlf) ,
                        COLTYPE               value(crlf) ,
                        LENGTH                value(crlf) ,
                        SCALE                 value(crlf) ,
                        NULLS                 value(crlf) ,
                        DEFAULT               value(crlf) ,
                        LOGGED                value(crlf) ,
                        COMPACT               value(crlf) ,
                        HIDDEN                value(crlf) ,
                        GENERATED_ATTR        value(crlf) ,
                        IDENTITY              value(crlf) ,
                        COMPRESS              value(crlf) ,
                        .


GENERATED         = " "
GENERATED_Val     = " "
NewName           = Left(' '         , 50, ' ')
Coltype           = Left(Coltype     , 15, ' ')
Colstr            = Alter_coltypes(COLTYPE)
select
    When  COLTYPE  = "CLOB"         Then ColLength = LENGTH2
    When  COLTYPE  = "BLOB"         Then ColLength = LENGTH2
    When  COLTYPE  = "DECIMAL"      Then ColLength = LENGTH","Scale
    When  COLTYPE  = "CHAR"         Then ColLength = LENGTH
    When  COLTYPE  = "CHARACTER"    Then ColLength = LENGTH
    When  COLTYPE  = "VARCHAR"      Then ColLength = LENGTH
    Otherwise                            ColLength = ""
 End

if length(ColLength) > 0 then ColLength = left(ColLength, 11, ' ')
DropCol           = "N"


area.0  = 11
area.1  = white"Alter "Alter_Type"  " Space(TBCreator '.' TBNAME, 0) ,
               "Column : " Strip(Name)
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"                                             "
area.6  = white"    GENERATED         A=ALWAYS D=DEFAULT"
area.7  = white"   "keyw"RenameColumn  "in1 || NewName  || endin
area.8  = white"   "keyw"ColType       "in1 ||ColType|| endin || Colstr
area.9  = white"   "keyw"ColLength     "in1 ||ColLength|| endin
area.10 = white"   "
area.11 = white"   "keyw"DropColumn    "in1 ||DropCol  || endin "Y/N"

If GENERATED_ATTR = "A" ,
 | GENERATED_ATTR = "D" Then Do
   area.6  = white"   "keyw"GENERATED     "In1 ||GENERATED_ATTR || ,
             endin"  A=ALWAYS D=DEFAULT "
 End

Call Anzeige_Dyn_Panel

OK = Nexttab( "--     ", al.)
If GENERATED_Val <> GENERATED_ATTR ,
 & GENERATED_Val <> " "            Then Do
   OK = Nexttab( "Alter Table "Space(TBCreator '.' TBNAME, 0) , al. )
   Select
     When GENERATED_Val = "D"               Then do
          OK = Nexttab( "      ALTER COLUMN "NAME || ,
                        " SET GENERATED BY DEFAULT ", al.)
          OK = Nexttab( " ;                        ", al.)
      end
     When GENERATED_Val = "A"               Then do
          OK = Nexttab( "      ALTER COLUMN "NAME || ,
                        " SET GENERATED ALWAYS     ", al.)
          OK = Nexttab( " ;                        ", al.)
      end
     Otherwise Do
          OK = Nexttab( " --   ALTER COLUMN "NAME || ,
                        " SET GENERATED BY DEFAULT ", al.)
          OK = Nexttab( " --   ALTER COLUMN "NAME || ,
                        " SET GENERATED ALWAYS     ", al.)
          OK = Nexttab( " ;                        ", al.)
      end
     End
 End

If Strip(RenameColumn_val)<> Name     ,
 & Strip(RenameColumn_val)<> ""       Then Do
   OK = Nexttab( "Alter TABLE   " Space(TBCreator "." TBname, 0), al.)
   OK = Nexttab( "      RENAME COLUMN "Strip(Name)          , al.)
   OK = Nexttab( "       TO      " Strip(RenameColumn_val)    , al.)
   OK = Nexttab( "; "                               , al. )
 End

ColType_val = Strip(ColType_val)
If (Strip(ColType_val)<> Coltype & Pos(ColType_val, Colstr ) > 0 ) ,
 | ColLength_val <> ColLength Then Do
   Select
    when ColType_val = "VARCHAR"  Then Len = "(" || ColLength_val || ")"
    when ColType_val = "CHAR"     Then Len = "(" || ColLength_Val || ")"
    when ColType_val = "CHARACTER"Then Len = "(" || ColLength_Val || ")"
    when ColType_val = "DECIMAL"  Then Len = "(" || ColLength_Val || ")"
    otherwise                          Len = ""
   End
   OK = Nexttab( "Alter TABLE   " Space(TBCreator "." TBname, 0), al.)
   OK = Nexttab( "      Alter  COLUMN "Strip(Name)       , al.)
   OK = Nexttab( "      SET DATA TYPE " ColType_val || len , al.)
   OK = Nexttab( "; "                               , al. )
 End

If (DropColumn_val) = "Y" Then do
   OK = Nexttab( "Alter TABLE   " Space(TBCreator "." TBname, 0), al.)
   OK = Nexttab( "      DROP   COLUMN "Strip(Name)       , al.)
   OK = Nexttab( "; "                               , al. )
 End
Return

Alter_coltypes:
AT.0    = 14
AT.1    = "SMALLINT"
AT.1.1  = "INTEGER BIGINT DECIMAL REAL DOUBLE DECFLOAT"
AT.2    = "INTEGER"
AT.2.1  = "BIGINT DECIMAL DOUBLE DECFLOAT"
AT.3    = "BIGINT"
AT.3.1  = "DECFLOAT"
AT.4    = "DECIMAL"
AT.4.1  = "SMALLINT INTEGER BIGINT REAL DOUBLE DECFLOAT"
AT.5    = "DECFLOAT"
AT.5.1  = "DECFLOAT"
AT.6    = "FLOAT"
AT.6.1  = "REAL DOUBLE DECFLOAT"
AT.7    = "CHAR"
AT.7.1  = "VARCHAR"
AT.8    = "VARCHAR"
AT.8.1  = "CHAR"
AT.9    = "LONG VARCHAR"
AT.9.1  = "VARCHAR"
AT.10   = "LONG VARCHAR"
AT.10.1 = "VARCHAR"
AT.11   = "GRAPHIC"
AT.11.1 = "VARGRAPHIC"
AT.12   = "VARGRAPHIC"
AT.12.1 = "GRAPHIC"
AT.13   = "LONG VARGRAPHIC"
AT.13.1 = "VARGRAPHIC"
AT.14   = "CHARACTER"
AT.14.1 = "VARCHAR"

do ati = 1 to at.0
 If at.ati = Arg(1) Then return AT.ati.1
 End
return ""


Edit_Stmt:

DSNAME = LUWA1900("LUWA1","DSNAME", "STMT", LNR)
LRECL   = RECLEN

IF LISTDSI(DSNAME) = 0 THEN do
    ADDRESS "TSO" "ALLOC F(SELDD) DA("DSNAME") SHR"
 end
else do
    ADDRESS "TSO" "ALLOC F(SELDD) DA("DSNAME") NEW CATALOG ,
          SPACE("TRACKS","TRACKS") TRACKS REUSE,
          LRECL("RECLEN") UNIT(SYSDA)"
 end


ADDRESS "TSO" "EXECIO * DISKW SELDD ( STEM SL. FINIS"
ADDRESS "TSO" "FREE FI(SELDD)"

ok   = LUWA1911(SSID,     ,
                LOCATION,  ,
                EINGABE,   ,
                OBJ,       ,
                DSNAME,    ,
                LNR   )

return

Get_CFG_FILE:
PARSE SOURCE SRC.1  , /* ENVIRONMENT  (TSO)            */
             SRC.2  , /* AUFRUF ALS (COMMAND)          */
             SRC.3  , /* Program NAME (LUW97000)       */
             SRC.4  , /* SYS00186 (TEMP FILE)          */
             SRC.5  , /* AUFRUF AUS LIB (X.X.CLISTUDB) */
             SRC.6  , /* ?                             */
             SRC.7  , /* TSO                           */
             SRC.8  , /* ISPF                          */
             SRC.9  , /* ?                             */
/*  CFG FILE                            */
mem     = "#SSIDINF"
CFGFILE = Strip(sysdsname) || "(" || mem || ")"
CFGFILE = Strip(proclib) || "(" || mem || ")"
ADDRESS TSO "FREE FILE(CFGF) NOHOLD"
ADDRESS TSO "ALLOC F(CFGF) DATASET('"CFGFILE"') SHR"
ADDRESS TSO "EXECIO * DISKR CFGF (STEM CONFIG. FINIS"
ADDRESS TSO "EXECIO 0 DISKR CFGF ( FINIS"
ADDRESS TSO "FREE FILE(CFGF) NOHOLD"

Do I = 1 TO CONFIG.0
   If Translate(Word(Config.i, 1))     = 'AG' ,
    | TRANSLATE(Word(Config.i, 1))     = SSID Then do
       CMDLINE =  Subword(CONFIG.i, 2)
       INTERPRET  CMDLINE
    End
 End

return 0



Anzeige_Dyn_Panel:

Zeile = 0
MaxLines = area.0
curline = 1                                /* set current line #     */
dyndata  = ""
ADDRESS ISPEXEC  "VGET (ZSCREENW,ZSCREEND)"
Do ai = 1 to area.0
   dyndata = dyndata || Left(area.ai, ZSCREENW, ' ')
 end
dyndata = dyndata || endin
dynarea = substr(dyndata,1+(curline-1)*ZSCREENW) /*set dyn var  */
dynarea = dyndata

MaxScreenLines = ZSCREEND-5
dyndata_len = Length(dyndata)
trenner = in1
DYNPOS  = POS(in1, dynarea, 1)
DYNPOS  = DYNPOS + 1
znr     = 1
save_eingabe = eingabe

Do Until disprc > 0


  start   = 1+(curline-1)*ZSCREENW
  dynarea = substr(dyndata, Start)
  size = length(dynarea)                   /* Set a scalar variable  */
  ADDRESS ISPEXEC "DISPLAY PANEL(PDYNPNL1)"
  MaxScreenLines = DYNDPTH
  DynArea_len = MaxScreenLines*ZSCREENW
  dyndata1= Substr(dyndata, 1,  1+(curline-1)*ZSCREENW-1)
  start   = Length(dyndata1) + Length(dynarea) + 1
  Dyndata = Dyndata1 || dynarea || Substr(Dyndata, start)
  Eingabe = dynarea

  disprc = rc                              /* save return code       */
  ADDRESS ISPEXEC "VGET (ZVERB,ZSCROLLA,ZSCROLLN, ZSCROLLD) "
  ADDRESS ISPEXEC "VGET (ZXSMAX, ZXSMIN) "
  dynrc = rc
  SELECT                                   /* Process scrolling      */
    When(zverb  = 'UP')   Then Do          /* Scroll up              */
     If zscrolla = 'MAX' Then Do           /*  if scroll was max     */
        curline = 1                       /*    scroll to top       */
      End
     Else Do                               /*  else a number is known*/
      curline = curline - MaxScreenLines        /* (max is bottom)   */
      if curline < 1 then Curline = 1
      End
     End
    When(zverb  = 'DOWN') Then Do          /* Scroll down            */
     If zscrolla = 'MAX' Then Do           /*  if scroll was max     */
      curline = maxlines                   /*    scroll to bottom    */
     end
     Else do                               /*  else a number is known*/
      curline = curline + MaxScreenLines        /* (max is bottom)   */
      If curline > maxlines Then Curline = maxlines
      if DynArea_len >= dyndata_len Then Do  /* NUR EINE SEITE */
         curline = 1
       End
      end
     end
    Otherwise;                      /* could use left & right too    */
  End
  if dynrc > 8 then Do
     say "Display RC="RC
     say "ZEDSMSG="ZEDSMSG
     say "ZERRLM="ZERRLM
     say "ZERRMSG="ZERRMSG
     say "ZERRSM="ZERRSM
     say rc object1
   End

  DO While Length(eingabe) > 0
     Zeile = zeile + 1

     /*    Keyword Finden   */
     epos     = Pos(keyw, eingabe, 1)
     xpos     = Pos(Trenner, eingabe, epos+1)
     elen     = xpos - epos -1
     If    elen < 0 Then Leave
     Keyword  =  Substr(eingabe, epos+1, elen  )
     Keyword  =  Word(Keyword, 1)

     /*    EINGABE Finden   */
     epos     = Pos(Trenner, eingabe, 1)
     if epos  < 1 then leave
     xpos     = Pos(endin, eingabe, epos+1)
     elen     = xpos - epos -1
     evalue   = Substr(eingabe, epos+1, elen  )
     eingabe  = Substr(eingabe, xpos+ 1)

     Interpret Strip(Keyword) || "_VAL" "= evalue"
   End
   If PF = 'PF03'               THEN LEAVE
   If PF = 'PF04'               THEN EXIT 4
End                                        /* End of display loop    */
eingabe = save_eingabe

Return

NextTab:
text = arg(1)
tab  = arg(2)
If EDIT = "YES" then tab = sl.  /* WENN EDIT DANN SQL */

ind  = Value(tab || 0)
ind  = ind + 1
interpret tab || "0 = ind"
interpret tab || "ind = arg(1) "
return 0

error: failure: syntax: novalue:
return
