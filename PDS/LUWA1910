/* REXX */
/*******************************************************************/
/*                                                                 */
/* ProgramNAME      : LUWA1910  (fuer UDB V10 Nr 910)              */
/* AUSRUF           : Procedure  x=LUWA1910(ssid,loc,ausw,obj)     */
/* AUTHER           : ULRICH BRAEUER                               */
/* FUNKTION         : AG : Build Select Statement for TB/VW        */
/*                                                                 */
/*                                                                 */
/*******************************************************************/

ENV        = "TSO"
X          = MSG('OFF')
USER       = USERID()
ADDRESS ISPEXEC 'VGET (UDBTRACE) PROFILE'
IF UDBTRACE = 'ON' THEN TRACE I
ELSE                    TRACE
SYSCATS    = "SYSCAT"
SYSIBMS    = "SYSIBM"
SYSIBMA    = "SYSIBMADM"
SYSPROCA   = "SYSPROC"
RECLEN     = 4096
TRACKS     = 60
DSNRECON   = "N"
SYSUID  = ""
SYSPWD  = ""
MAXRows = 0

ADDRESS ISPEXEC 'VGET (DSNRECON) PROFILE'
ADDRESS ISPEXEC 'VGET (TRACKS) PROFILE'
ADDRESS ISPEXEC 'VGET (RECLEN) PROFILE'
ADDRESS ISPEXEC 'VGET (SYSIBMS) PROFILE'
ADDRESS ISPEXEC 'VGET (SYSCATS) PROFILE'
ADDRESS ISPEXEC 'VGET (SYSIBMA) PROFILE'
ADDRESS ISPEXEC 'VGET (SYSPROCA) PROFILE'
ADDRESS ISPEXEC 'VGET (SYSUID)   PROFILE'
ADDRESS ISPEXEC 'VGET (SYSPWD)   PROFILE'
ADDRESS ISPEXEC 'VGET (MAXROWS)  PROFILE'
IF MAXROWS = 0 THEN MAXROWS = 1000

Fnumeric   = "BIGINT INTEGER SMALLINT DECIMAL DECFLOAT FLOAT"
stmt       = ''
ddltext    = ""

ssid       = arg(1)
location   = arg(2)
auswahl    = arg(3)
object     = arg(4)
EDIT       = arg(5)
LNR        = arg(6)
object1    = ""
tablespace = ""
DB2_SSID   = SSID
If DSNRECON = "Y" Then Do
   Call Load_DSNREXX
 End

fromlist = ''
wherel   = 'WHERE'
komma    = ''
anzcols  = 0
drop sl.
drop vl.
vl.0 = 0
sl.0 = 0

parse value object with DB2_CREATOR1 '.' DB2_NAME1

If object =  "" Then Do
   SL.0 = 3
   SL.1 = "--SQLTERM=;"
   SL.2 = "--SPROCPARSER=,"
   SL.3 = " "
   if EDIT = "YES" THEN Call Edit_Stmt  /* Anzeige Erwuenscht */
   Return Stmt
 End


IF LENGTH(STRIP(loc)) > 0 THEN Do
   OK = CONNECT_LOCATION(location)
 End

select
    when auswahl = "COUNT" Then do
         OK = NEXTSL("SELECT COUNT(*)            ")
         OK = NEXTSL("FROM " DB2_CREATOR1 || '.' || DB2_NAME1)
         OK = NEXTSL("FOR FETCH ONLY")
         OK = NEXTSL("WITH UR")
     End
    when auswahl = "SELECT" Then CALL LESEN_DATEN
    WHEN AUSWAHL = "INSERT" THEN CALL LESEN_DATEN
    WHEN AUSWAHL = "UPDATE" THEN CALL LESEN_DATEN
    WHEN AUSWAHL = "DELETE" THEN CALL LESEN_DATEN
    Otherwise  Do
         OK = NEXTSL("Falsche Auswahl : <"auswahl">")
         OK = NEXTSL("                : COUNT    ")
         OK = NEXTSL("                : SELECT   ")
         OK = NEXTSL("                : INSERT   ")
         OK = NEXTSL("                : UPDATE   ")
         OK = NEXTSL("                : DELETE   ")
     End
 End

IF LENGTH(STRIP(loc)) > 0 THEN OK = DISCONNECT_LOCATION(location)
If DSNRECON = "Y" Then Do
   Call UNLoad_DSNREXX
 End

/* If anzcols = 0 THEN RETURN 12 */

OK = NEXTSL("; ")
if EDIT = "YES" THEN Call Edit_Stmt  /* Anzeige Erwuenscht */


Return Stmt


Lesen_daten:

stmt     = translate(auswahl)
CNR   = 1           /*  CURSOR NUMMER FUER TABLESPACE   */
SNR   = CNR

WHERELIST = ""
CALL MAKE_WHERELIST "TBCREATOR", DB2_CREATOR1
CALL MAKE_WHERELIST "TBNAME", DB2_NAME1

SQLSTMT    = "SELECT TBCREATOR, TBNAME, COLNO, NAME, " ,
             "       COLTYPE, LENGTH, SCALE, NULLS   " ,
             "FROM  "SYSIBMS".SYSCOLUMNS     " ,
             WHERELIST ,
             "ORDER BY TBCREATOR, TBNAME, COLNO" ,
             ""

CALL OPEN_CURSOR

DO WHILE SQLCODE = 0
    ADDRESS DSNREXX   "EXECSQL FETCH C"CNR" INTO         ",
             "       :TBCREATOR, :TBNAME, :COLNO, :NAME  ",
             "      ,:COLTYPE, :LENGTH, :SCALE, :NULLS   ",
             ""

    Select
        When SQLCODE = 100 THEN DO
             CALL CLOSE_CURSOR    /* CLOSE CURSOR */
             LEAVE
          End
        When SQLCODE /= 0  THEN DO
             SAY "ERROR ON FETCH C"CNR", RC="RC ,
                 "SQLCODE="SQLCODE         ,
                 "SQLERRMC="SQLERRMC       ,
                 ""
             Exit 8
          End
        Otherwise NOP
     End
   anzcols  = anzcols + 1


   select
     when auswahl = "SELECT" Then do
          call Build_select
      End
     when auswahl = "UPDATE" Then do
          call Build_Update
      End
     when auswahl = "DELETE" Then do
          call Build_delete
      End
     when auswahl = "INSERT" Then do
          call Build_insert
      End
      Otherwise Nop
     end

   komma = ", "
 END

CALL CLOSE_CURSOR
if Auswahl  = "INSERT" Then do
   ok = NextSl("       )")
   ok = NextVal("       )")

   do ins = 1 to vl.0
      ok = NextSl(vl.ins)
    end
 end

stmt     = stmt fromlist
ok       = Nextsl(FromList)

If Auswahl = "SELECT" Then do
   OK = NEXTSL("--WHERE ")
   OK = NEXTSL("--ORDER BY ")
   OK = NEXTSL("FETCH FIRST  "MAXROWS" ROWS ONLY")
   OK = NEXTSL("FOR FETCH ONLY")
   OK = NEXTSL("WITH UR")
 End

return

BUILD_SELECT:
  IF LENGTH(FROMLIST)  = 0 THEN
     FROMLIST = "FROM "Strip(TBCREATOR) || '.' || Strip(TBName)
  COLNAME = NAME
  STMT  = STMT || KOMMA NAME
  NEXTTAB = ''
  If POS("LOB", COLTYPE, 1) > 0 Then do
     colname = "Varchar(" || COLNAME || ", 100) AS " COLNAME
   End
  IF SL.0 = 0 THEN NEXTTAB = AUSWAHL ,
                             LEFT(COLNAME, 40) ,
                             ' -- ' ,
                             COLTYPE  LENGTH
  ELSE             NEXTTAB = "   " KOMMA ,
                             LEFT(COLNAME, 40) ,
                             ' -- ' ,
                            COLTYPE  LENGTH
  OK = NEXTSL(NEXTTAB)
 RETURN

BUILD_UPDATE:
  FROMLIST = ""
  COLNAME = NAME
  IF STMT = 'UPDATE' THEN
     STMT = STMT Strip(TBCREATOR) || '.' || Strip(TBName) " SET "
  STMT  = STMT || KOMMA COLNAME  "="
  NEXTTAB = ''
  IF SL.0 = 0 THEN DO
     NEXTTAB = AUSWAHL Strip(TBCREATOR) || '.' || Strip(TBName) " SET "
     OK = NEXTSL(NEXTTAB)
   END
  if Wordpos(coltype, FNumeric, 1) > 0 Then colval = " "
  else                                      colval = "' '"
  NEXTTAB = "   " KOMMA ,
                  LEFT(COLNAME, 40) ,
                  LEFT(" = " colval, 10) ,
                  ' -- ' COLTYPE  LENGTH "NULLS="NULLS
  OK = NEXTSL(NEXTTAB)
 RETURN

BUILD_DELETE:
  FROMLIST = ""
  COLNAME = NAME
  IF STMT = 'DELETE' THEN
     STMT = STMT "FROM" Strip(TBCREATOR) || '.' || Strip(TBName)

  NEXTTAB = ''
  IF SL.0 = 0 THEN DO
     NEXTTAB = AUSWAHL "FROM" Strip(TBCREATOR) || '.' || Strip(TBName)
     OK = NEXTSL(NEXTTAB)
   END
  NEXTTAB = "   " WHEREL,
                  LEFT(COLNAME, 40) ,
                  ' =                    ' ,
                  ' -- ' ,
                  COLTYPE ,
                  LENGTH
  OK = NEXTSL(NEXTTAB)
  WHEREL  = "AND  "
 RETURN

BUILD_INSERT:
  FROMLIST = ""
  COLNAME = NAME
  IF STMT = 'INSERT' THEN
     STMT = STMT "INTO "Strip(TBCREATOR) || '.' || Strip(TBName) "("

  NEXTTAB = ''
  IF SL.0 = 0 THEN DO
     NEXTTAB = AUSWAHL "INTO "Strip(TBCREATOR) || '.' || Strip(TBName),
               "("
     OK = NEXTSL(NEXTTAB)
     NEXTVAL = "VALUES " "("
     OK = NEXTVAL(NEXTVAL)
   END
  NEXTTAB = "   " || Komma Left(colname, 18)
  ftype = Word(Lzeile, 4)
  if Wordpos(COLTYPE, FNumeric, 1) > 0 Then colval = " "
  else                                    colval = "' '"

  NEXTVAL = "   " || KOMMA LEFT(COLVAL, 40) ,
                  ' -- ' ,
                  COLTYPE  ,
                  LENGTH
  OK = NEXTSL(NEXTTAB)
  OK = NEXTVAl(NEXTVAL)
  WHEREL  = "AND  "
 RETURN

NextSl: Procedure Expose sl.
 sl.0   = sl.0 + 1
 sli    = sl.0
 sl.sli = Arg(1)
return 0

Nextval: Procedure Expose vl.
 vl.0   = vl.0 + 1
 vli    = vl.0
 vl.vli = Arg(1)
return 0

Edit_Stmt:

DSNAME = LUWA1900("LUWA1","DSNAME", "STMT", LNR)
LRECL   = RECLEN

IF LISTDSI(DSNAME) = 0 THEN do
    ADDRESS "TSO" "ALLOC F(SELDD) DA("DSNAME") SHR"
 end
else do
    ADDRESS "TSO" "ALLOC F(SELDD) DA("DSNAME") NEW CATALOG ,
          SPACE("TRACKS","TRACKS") TRACKS REUSE,
          LRECL("RECLEN") UNIT(SYSDA)"
 end
If RC /= 0 Then do
   say "Error on Alloc "DSNAME" RC="RC
 End

ADDRESS "TSO" "EXECIO * DISKW SELDD ( STEM SL. FINIS"
If RC /= 0 Then do
   say "Error on Write "DSNAME" RC="RC
 End
ADDRESS "TSO" "FREE FI(SELDD)"

ok   = LUWA1911(SSID,     ,
                LOCATION,  ,
                EINGABE,   ,
                OBJECT1,   ,
                DSNAME,    ,
                LNR   )

return

OPEN_CURSOR:

    IF DATATYPE(CNR) /= 'NUM' THEN CNR = 1
    IF DATATYPE(SNR) /= 'NUM' THEN SNR = 1
    ADDRESS DSNREXX   "EXECSQL CLOSE C"CNR
    ADDRESS DSNREXX   "EXECSQL DECLARE C"CNR" CURSOR FOR S"SNR
    IF SQLCODE /= 0 THEN DO
       SAY "ERROR ON DECLARE, RC="RC ,
           "SQLCODE="SQLCODE         ,
           "SQLERRMC="SQLERRMC       ,
           ""
    END
    ADDRESS DSNREXX   "EXECSQL PREPARE S"SNR" FROM :SQLSTMT"
    IF SQLCODE /= 0 THEN DO
       SAY "ERROR ON PREPARE S"SNR"RC="RC ,
           "SQLCODE="SQLCODE         ,
           "SQLERRMC="SQLERRMC       ,
           ""
    END

   ADDRESS DSNREXX "EXECSQL DESCRIBE S"SNR" INTO :OUTSQLDA"
   COLS   = ""
   RXCOLS = ""
   if datatype(OUTSQLDA.SQLD) = NUM THEN DO CI = 1 TO OUTSQLDA.SQLD
      cols   = cols OUTSQLDA.CI.SQLNAME
      rxcols = cols OUTSQLDA.CI.SQLNAME
    End

    ADDRESS DSNREXX   "EXECSQL OPEN C"CNR
    IF SQLCODE /= 0 THEN DO
       SAY "ERROR ON OPEN C"CNR" , RC="RC ,
           "SQLCODE="SQLCODE         ,
           "SQLERRMC="SQLERRMC       ,
           ""
    END

RETURN

CLOSE_CURSOR:

    IF DATATYPE(CNR) /= 'NUM' THEN CNR = 1
    ADDRESS DSNREXX   "EXECSQL CLOSE C"CNR

RETURN

CONNECT_LOCATION:
   If Length(SYSUID) > 0 & Length(SYSPWD) > 0 Then do
      ADDRESS DSNREXX "EXECSQL CONNECT TO "ARG(1) ,
                      "USER :SYSUID USING :SYSPWD "
    End
   ELSE Do
       ADDRESS DSNREXX "EXECSQL CONNECT TO "ARG(1)
    End
   DB2L   =  SUBSTR(SQLERRP,1,3)
   DB2V   =  SUBSTR(SQLERRP,4,2)
   DB2R   =  SUBSTR(SQLERRP,6,2)

   If DB2L  = "DSN" then do
      REMOTE_LOC = 'N'
    End
   Else Do
      REMOTE_LOC = 'Y'
    End
RETURN 0

DISCONNECT_LOCATION:
ADDRESS DSNREXX "EXECSQL RELEASE " arg(1)
ADDRESS DSNREXX "EXECSQL COMMIT  "
ADDRESS DSNREXX "EXECSQL CONNECT RESET"
RETURN 0

MAKE_WHERELIST: PROCEDURE EXPOSE WHERELIST

COLUMNNAME = ARG(1)
ARGUMENT   = ARG(2)
ARGUMENT   = TRANSLATE(ARGUMENT, '%', '*')
IF LENGTH(STRIP(ARGUMENT)) = 0 ,
 & LENGTH(STRIP(COLUMNNAME)) = 0 THEN RETURN

IF TRANSLATE(WORD(WHERELIST, 1) ) = "WHERE" THEN ANDKZ = "AND"
 ELSE ANDKZ = "WHERE"

IF LENGTH(STRIP(COLUMNNAME)) = 0 ,
 & LENGTH(STRIP(ARGUMENT)) > 0 THEN DO
   WHERELIST = WHERELIST ANDKZ ARGUMENT
   RETURN
 END

IF LENGTH(STRIP(ARGUMENT)) = 0 THEN RETURN


IF POS('%', ARGUMENT) > 0 ,
 | POS('_', ARGUMENT) > 0 THEN DO
   WHERELIST = WHERELIST ANDKZ COLUMNNAME "LIKE '"ARGUMENT"'"
   RETURN
 END

WHERELIST = WHERELIST ANDKZ COLUMNNAME "= '"ARGUMENT"'"

RETURN

Load_DSNREXX:
ADDRESS TSO "SUBCOM DSNREXX"
IF RC THEN   S_RC = RXSUBCOM('ADD','DSNREXX','DSNREXX')

ADDRESS DSNREXX "CONNECT "DB2_SSID
IF SQLCODE <  0 THEN SAY "CONNECT     SQLCODE="SQLCODE "<"DB2_SSID">"

Return

UNLoad_DSNREXX:

ADDRESS DSNREXX "DISCONNECT"
S_RC = RXSUBCOM('DELETE','DSNREXX','DSNREXX')

Return
