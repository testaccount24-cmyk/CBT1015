/* REXX */
/*******************************************************************/
/*                                                                 */
/* ProgramNAME      : ZOSC1925                                     */
/* AUSRUF           : Procedure  x=ZOSC1925(ssid,loc,ausw,obj)     */
/* AUTHER           : ULRICH BRAEUER                               */
/* FUNKTION         : Alter Object                                 */
/*                                                                 */
/*                                                                 */
/*******************************************************************/

SIGNAL ON FAILURE
SIGNAL ON ERROR
SIGNAL OFF FAILURE
SIGNAL OFF ERROR

PARSE SOURCE SRC.1  , /* ENVIRONMENT  (TSO)            */
             SRC.2  , /* AUFRUF ALS (COMMAND)          */
             SRC.3  , /* Program NAME (LUW97000)       */
             SRC.4  , /* SYS00186 (TEMP FILE)          */
             SRC.5  , /* AUFRUF AUS LIB (X.X.CLISTUDB) */
             SRC.6  , /* ?                             */
             SRC.7  , /* TSO                           */
             SRC.8  , /* ISPF                          */
             SRC.9  , /* ?                             */


ENV        = "TSO"
X          = MSG('OFF')
USER       = USERID()
SYSCATS    = "SYSCAT"
SYSIBMS    = "SYSIBM"
SYSIBMA    = "SYSIBMADM"
SYSPROCA   = "SYSPROC"
RECLEN     = 4096
STMTLEN    = 4096
TRACKS     = 60
DSNRECON   = "N"
SYSUID  = ""
SYSPWD  = ""
ADDRESS ISPEXEC 'VGET (ALTERJOB) PROFILE'
ADDRESS ISPEXEC 'VGET (DSNRECON) PROFILE'
ADDRESS ISPEXEC 'VGET (TRACKS)   PROFILE'
ADDRESS ISPEXEC 'VGET (RECLEN)   PROFILE'
ADDRESS ISPEXEC 'VGET (STMTLEN)  PROFILE'
ADDRESS ISPEXEC 'VGET (SYSIBMS)  PROFILE'
ADDRESS ISPEXEC 'VGET (SYSCATS)  PROFILE'
ADDRESS ISPEXEC 'VGET (SYSIBMA)  PROFILE'
ADDRESS ISPEXEC 'VGET (SYSPROCA) PROFILE'
ADDRESS ISPEXEC 'VGET (SYSUID)   PROFILE'
ADDRESS ISPEXEC 'VGET (SYSPWD)   PROFILE'
ADDRESS ISPEXEC 'VGET (CURSQLID) PROFILE'
If CURSQLID = "" Then CURSQLID = USER

ADDRESS ISPEXEC 'VGET (UDBTRACE) PROFILE'
IF UDBTRACE = 'ON' THEN TRACE R
ELSE                    TRACE

red   = '01'x                              /* Assign colors to       */
blue  = '02'x                              /*   Attribute bytes      */
green = '03'x                              /*   found in the data    */
white = '04'x
in1   = '05'x
in2   = '06'x
in3   = '07'x
uid   = '08'x
pwd   = '09'x
endin = '3a'x
keyw  = '3b'x
maxlines = 0                               /* set max number of lines*/
dyndata  = ''                              /* initialize data        */
cmddata  = ''                              /* initialize data        */
curline  = 1                               /* set current line #     */

MAX_AUTO_PARSE = 0                         /* Autoparse Max Anzahl   */
Drop  Auto_Parse_Cols.                     /* Autoparse Max Anzahl   */

keytab.0 = 5
keytab.1 = in1
keytab.2 = in2
keytab.3 = in3
keytab.4 = uid
keytab.5 = pwd

stmt              = ""
ddltext           = ""

ssid        = arg(1)
location    = arg(2)
auswkz      = arg(3)
lnr         = arg(4)
tabnr       = arg(5)
ISPFILE     = arg(6)
eingabe     = arg(7)
eingabe2    = arg(8)
object1     = arg(9)
object2     = arg(10)
object3     = arg(11)
object4     = arg(12)
object5     = arg(13)
EDIT        = arg(14)
DB2Vers     = arg(15)
DB2CatL     = arg(16)   /* db2 catalog Level                   */
proclib     = arg(17)
curnr       = arg(18)   /* Cursor Nummer der Zeile in ISPF-TAB */
obj         = ""
tablespace  = ""
DB2_SSID    = SSID
listtb = ListObject

crlf   = "0a0d"x
crlf   = '0a0d'x

drop al.
al.0  = 0
drop sl.
sl.0 = 0

APPLCOMPAT = "V" || SUBSTR(DB2Vers, 4, 2) || ,
             "R" || SUBSTR(DB2Vers, 6, 1) || ,
             "M" || SUBSTR(DB2Vers, 7, 3) || ,
             ""

SL.0 = 6
SL.1 = "--SQLTERM=;         "
SL.2 = "--SPROCPARSER=,     "
SL.3 = "  "
SL.4 = "SET CURRENT SQLID = '" || CURSQLID || "' ;"
SL.5 = "SET CURRENT APPLICATION COMPATIBILITY = '"APPLCOMPAT"';"
SL.6 = "  "

CZEILE  = ""
If Datatype(Curnr) = "NUM" Then do
   tabnr = tabnr -1  /* Aktuelle Table in ZOSC1210 verwendet */
   LUWTABLE       = "LUWTB"tabnr
   COLTAB         = "COLTB"tabnr
   TBCOL          = "TBCOL"tabnr
   address ispexec 'TBOPEN  'COLTAB
   address ispexec 'TBTOP   'COLTAB
   address ispexec 'TBSKIP  'COLTAB' NUMBER('curnr')'
   address ispexec 'TBGET   'COLTAB
   address ispexec 'TBCLOSE 'COLTAB
 End


RXDB2_SSID        = SSID
RXDB2_GETSTEM     = 'EINGABE.'
RXDB2_PUTSTEM     = 'AUSGABE.'
ANZAHL_ROWS       = 0

SELTAB         = "SELTB" || tabnr
ALTAB          = "ALTER" || tabnr
address ispexec  'TBERASE 'ALTAB
If RC > 12  Then do
   say "Error on TBERASE RC="RC "TABLE="ALTAB
 End
address ispexec  'TBOPEN 'ALTAB
if rc /= 0 then Do
   ADDRESS ISPEXEC "TBCREATE "ALTAB   ,
                   " KEYS(NAME)             ",
                   " NAMES(OVal, NVal, NVTEXT) ",
                   " REPLACE"
 End


DB_env   = Substr(DB2Vers, 1, 3)
DB_Vers  = Substr(DB2Vers, 4, 2)
DB_Rel   = Substr(Db2Vers, 6, 1)
DB_Mod   = Substr(DB2Vers, 7, 3)
DBC_env  = Substr(DB2CatL, 1, 3)
DBC_Vers = Substr(DB2CatL, 4, 2)
DBC_Rel  = Substr(DB2CatL, 6, 1)
DBC_Mod  = Substr(DB2CatL, 7, 3)
parse value Object1 with DB2_CREATOR1 '.' DB2_NAME1
parse value Object2 with DB2_CREATOR2 '.' DB2_NAME2
parse value Object3 with DB2_CREATOR3 '.' DB2_NAME3
parse value Object4 with DB2_CREATOR4 '.' DB2_NAME4
parse value Object5 with DB2_CREATOR5 '.' DB2_NAME5

eingabe3 = subword(eingabe2, 2)
eingabe2 = Word(eingabe2, 1)

Call Get_CFG_FILE

RLIB    = 'N'

IF Substr(ALTERJOB, 1, 1) = "S" THEN EDIT = "YES"
 Else                                EDIT = "NO"


select
  when auswkz = 'SG' & eingabe   = "ALTER" Then do
       CALL Alter_Stogroup
   End
  when auswkz = 'DB' & eingabe   = "ALTER" Then do
       CALL Alter_Database
   End
  when auswkz = 'TS' & eingabe   = "ALTER" Then do
       CALL Alter_Tablespace
   End
  when auswkz = 'SE' & eingabe   = "ALTER" Then do
       CALL Alter_Sequence
   End
  when auswkz = 'TG' & eingabe   = "ALTER" Then do
       CALL Alter_Trigger
   End
  when auswkz = 'VW' & eingabe   = "ALTER" Then do
       CALL Alter_View
   End
  when auswkz = 'BP' & eingabe   = "ALTER" Then do
       EDIT   = "NO"
       CALL Alter_BufferPool
       db2cmd = "Y"
   End
  when auswkz = 'TB' & eingabe   = "ALTER" Then do
       CALL Alter_Table
   End
  when auswkz = 'IX' & eingabe   = "ALTER" Then do
       CALL Alter_Index
   End
  when auswkz = 'CO' & eingabe   = "ALTER" Then do
       CALL Alter_Column
   End
  when auswkz = 'RT' & eingabe   = "ALTER" Then Do
       CALL Alter_Routine
   End
  when auswkz = 'PERM' & eingabe   = "ALTER" Then do
       CALL Alter_Permission
   End
  when EINGABE = 'CM'                        Then do
       CALL COMMENT_On_Object
   End
  when EINGABE = 'LAB'                       Then do
       CALL COMMENT_On_Object
   End
  when EINGABE = 'CALL'                      Then do
       CALL Call_Sored_Procedure
   End
  when eingabe   = "TOS" Then do
       CALL Transfer_OwnerShip
   End
  when eingabe   = "RENAME"  Then do
       CALL RENAME_OBJECT
   End
  when auswkz = 'CO' & eingabe   = "DROP" Then do
       CALL Alter_DROP_Column
   End
  when auswkz = 'MQT' & eingabe   = "REFRESH"  Then do
       CALL REFRESH_MQT
   End
  when auswkz = 'TB'  & eingabe   = "REFRESH"  Then do
       CALL REFRESH_MQT
   End
  when auswkz = 'TB' & eingabe   = "MOVE" Then do
       CALL Alter_Table_MOVE
   End
  Otherwise do
       anzcols = 0
   End
 End

If al.0 > 0 Then Do
   If  db2cmd = "Y" Then  Call Build_Ausgabe2
    Else                  Call Build_Ausgabe
 End

ADDRESS ISPEXEC "FTCLOSE NAME(" || MEM || ") LIBRARY(ISPFILE)"
If al.0 > 0 Then do
   ADDRESS ISPEXEC "EDIT DATASET('"CLMEM"') PANEL(ISREFR01)"
 End

if anzcols = 0 THEN RETURN 12
if EDIT = "YES" THEN Call Edit_Stmt  /* Anzeige Erwuenscht */


Return Stmt

Build_Ausgabe:

MEM     = "ALTEROBJ"
SKEL    = "SKALTS9"
JOB     = "Y"
STMT    = "N"
STOSTA  = "N"
OK    =  LISTDSI(ISPFILE "FILE")
If SYSDSNAME = "" Then do
   ADDRESS "TSO" "ALLOC F(ISPFILE) DA('"ISPFILE"') SHR"
 End
CLMEM = Strip(ISPFILE) || "(" || MEM || ")"

ADDRESS ISPEXEC 'FTOPEN'
If rc > 4 Then Do
  Say 'FTOPEN   RC='RC
  Say 'ZERRSM = 'ZERRSM
  Say 'ZERRLM = 'ZERRLM
 End

JOB  = "Y"
STMT = "N"
ADDRESS ISPEXEC 'FTINCL 'SKEL
If rc > 4 Then Do
  Say 'FTINCL   'SKEL 'RC='RC
  Say 'ZERRSM = 'ZERRSM
  Say 'ZERRLM = 'ZERRLM
 End

Do i = 1 to al.0
   JOB  = "N"
   STMT = "Y"
   SQLSTMT = al.i
   ADDRESS ISPEXEC 'FTINCL 'SKEL
   If rc > 4 Then Do
     Say 'FTINCL   'SKEL 'RC='RC
     Say 'ZERRSM = 'ZERRSM
     Say 'ZERRLM = 'ZERRLM
    End
 End

Return

Build_Ausgabe2:

MEM     = "ALTEROBJ"
SKEL    = "SKALTS1"
JOB     = "Y"
STMT    = "N"
END     = "N"
OK    =  LISTDSI(ISPFILE "FILE")
If SYSDSNAME = "" Then do
   ADDRESS "TSO" "ALLOC F(ISPFILE) DA('"ISPFILE"') SHR"
 End
CLMEM = Strip(ISPFILE) || "(" || MEM || ")"

ADDRESS ISPEXEC 'FTOPEN'
If rc > 4 Then Do
  Say 'FTOPEN   RC='RC
  Say 'ZERRSM = 'ZERRSM
  Say 'ZERRLM = 'ZERRLM
 End

JOB  = "Y"
STMT = "N"
END  = "N"
ADDRESS ISPEXEC 'FTINCL 'SKEL
If rc > 4 Then Do
  Say 'FTINCL   'SKEL 'RC='RC
  Say 'ZERRSM = 'ZERRSM
  Say 'ZERRLM = 'ZERRLM
 End

Do i = 1 to al.0
   JOB  = "N"
   STMT = "Y"
   SQLSTMT = al.i
   ADDRESS ISPEXEC 'FTINCL 'SKEL
   If rc > 4 Then Do
     Say 'FTINCL   'SKEL 'RC='RC
     Say 'ZERRSM = 'ZERRSM
     Say 'ZERRLM = 'ZERRLM
    End
 End

JOB     = "N"
STMT    = "N"
END     = "Y"
ADDRESS ISPEXEC 'FTINCL 'SKEL
If rc > 4 Then Do
   Say 'FTINCL   'SKEL 'RC='RC
   Say 'ZERRSM = 'ZERRSM
   Say 'ZERRLM = 'ZERRLM
 End

Return

Alter_Tablespace:
DB      = DB2_CREATOR1
TS      = DB2_NAME1

MEM     = "ALTERTS1"
SKEL    = "SKALTS9"

SQLSTMT   = "SELECT TS.DBNAME                      ",
            "   ,   TS.NAME                                ",
            "   ,   TS.BPOOL                               ",
            "   ,   TS.SBCS_CCSID                          ",
            "   ,   CASE WHEN TS.ERASERULE = 'Y' THEN 'YES'",
            "            ELSE 'NO'                         ",
            "        END AS       ERASERULE                ",
            "   ,   CASE WHEN TS.CLOSERULE = 'Y' Then 'YES' ",
            "            ELSE 'NO'                         ",
            "        END AS    CLOSERULE                   ",
            "   ,   CASE WHEN TS.LOG       = 'Y' Then 'YES' ",
            "            ELSE 'NO'                         ",
            "        END AS    LOG                         ",
            "   ,   CASE WHEN TS.LOCKRULE  = 'R' Then 'ROW' ",
            "            WHEN TS.LOCKRULE  = 'A' Then 'ANY' ",
            "            WHEN TS.LOCKRULE  = 'L' Then 'LARGE'",
            "            WHEN TS.LOCKRULE  = 'P' Then 'PAGE' ",
            "        WHEN TS.LOCKRULE  = 'S' Then 'TABLESPACE'",
            "                    ELSE 'TABLE'                      ",
            "        END AS    LOCKSIZE                    ",
            "   ,   TP.PARTITION                           ",
            "   ,   TP.COMPRESS                            ",
            "   ,   CASE WHEN TP.TRACKMOD = 'Y' Then 'YES' ",
            "            ELSE 'NO'                         ",
            "        END AS TRACKMOD                       ",
            "   ,   CASE WHEN TP.PQTY < 0 THEN TP.PQTY     ",
            "            ELSE TP.PQTY * 4                  ",
            "        END AS PQTY                           ",
            "   ,   CASE WHEN SQTY < 0 THEN TP.SQTY        ",
            "            ELSE TP.SQTY * 4                  ",
            "        END AS SQTY                           ",
            "   ,    TP.FREEPAGE                           ",
            "   ,    TP.PCTFREE                            ",
            "   ,    TP.GBPCACHE                           ",
            "   ,    TP.STORNAME                           ",
            "   ,    TS.TYPE                               ",
            "   ,    TS.MAXPARTITIONS                      ",
            "   ,    TS.MAXROWS                            ",
            "   ,    TS.DSSIZE/1024/1024 AS DSSIZE         ",
            "   ,    TS.SEGSIZE                            ",
            "   ,    TS.LOCKMAX                            ",
            "   ,    TS.MEMBER_CLUSTER                     ",
            "   ,    TS.PAGENUM                            ",
            "   ,    TS.INSERTALG                          ",
            "FROM "SYSIBMS".SYSTABLESPACE     TS           ",
            "INNER JOIN "SYSIBMS".SYSTABLEPART TP          ",
            "ON  TS.DBNAME = TP.DBNAME                     ",
            "AND TS.NAME   = TP.TSNAME                     ",
            "where TS.DBNAME = '"DB2_CREATOR1"'            ",
            "And   TS.NAME   = '"DB2_NAME1"'               ",
            "ORDER BY TS.DBNAME, TS.NAME, TP.PARTITION     ",
            ""

ADDRESS ISPEXEC  'TBCLOSE 'SELTAB
OAUSWKZ = AUSWKZ
oobject = object
AUSWKZ  = "SQLEX"
object  = sqlstmt
call LESEN_DATEN
AUSWKZ  = oAUSWKZ
object  = oobject

ADDRESS ISPEXEC  'TBOPEN  'SELTAB
ADDRESS ISPEXEC  'TBTOP   'SELTAB
ADDRESS ISPEXEC  'TBSKIP  'SELTAB
If RC     <> 0 Then return

DB      = DB2_CREATOR1
TS      = DB2_NAME1
Drop Ausgabe.0
Ausgabe.0 = 0

do while rc = 0
   ausgabe.0 = Ausgabe.0 + 1
   ai        = Ausgabe.0
   Ausgabe.ai.DBNAME              =  col1
   Ausgabe.ai.NAME                =  col2
   Ausgabe.ai.BPOOL               =  col3
   Ausgabe.ai.SBCS_CCSID          =  col4
   Ausgabe.ai.ERASERULE           =  col5
   Ausgabe.ai.CLOSERULE           =  col6
   Ausgabe.ai.LOG                 =  col7
   Ausgabe.ai.LOCKSIZE            =  col8
   Ausgabe.ai.PARTITION           =  col9
   Ausgabe.ai.COMPRESS            =  col10
   Ausgabe.ai.TRACKMOD            =  col11
   Ausgabe.ai.PQTY                =  col12
   Ausgabe.ai.SQTY                =  col13
   Ausgabe.ai.FREEPAGE            =  col14
   Ausgabe.ai.PCTFREE             =  col15
   Ausgabe.ai.GBPCACHE            =  col16
   Ausgabe.ai.STORNAME            =  col17
   Ausgabe.ai.TYPE                =  col18
   Ausgabe.ai.MAXPARTITIONS       =  col19
   Ausgabe.ai.MAXROWS             =  col20
   Ausgabe.ai.DSSIZE              =  col21
   Ausgabe.ai.SEGSIZE             =  col22
   Ausgabe.ai.LOCKMAX             =  col23
   Ausgabe.ai.MEMBER_CLUSTER      =  Col24
   Ausgabe.ai.PAGENUM             =  col25
   Ausgabe.ai.INSERTALG           =  col26

   SELECT
      WHEN Ausgabe.ai.PAGENUM  = "A" Then DO
           Ausgabe.ai.PAGENUM  = "ABSOLUTE"
       End
      WHEN Ausgabe.ai.PAGENUM  = "R" Then DO
           Ausgabe.ai.PAGENUM  = "RELATIVE"
       End
      OTHERWISE NOP
   END

   SELECT
      WHEN Ausgabe.ai.MEMBER_CLUSTER = 'Y' Then DO
           Ausgabe.ai.MEMBER_CLUSTER = 'YES'
       End
      OTHERWISE Do
           Ausgabe.ai.MEMBER_CLUSTER = 'NO '
       End
   END

   SELECT
      WHEN Ausgabe.ai.GBPCACHE       = 'A' Then
           Ausgabe.ai.GBPCACHE       = 'ALL'
      WHEN Ausgabe.ai.GBPCACHE       = 'S' Then
           Ausgabe.ai.GBPCACHE       = 'SYSTEM'
      WHEN Ausgabe.ai.GBPCACHE       = 'N' Then
           Ausgabe.ai.GBPCACHE       = 'NONE'
      OTHERWISE Do
           Ausgabe.ai.GBPCACHE       = 'CHANGED'
       End
   END

   SELECT
      WHEN Ausgabe.ai.COMPRESS       = 'Y' Then
           Ausgabe.ai.COMPRESS       = 'YES'
      WHEN Ausgabe.ai.COMPRESS       = 'F' Then
           Ausgabe.ai.COMPRESS       = 'FIXEDLENGTH'
      WHEN Ausgabe.ai.COMPRESS       = 'H' Then
           Ausgabe.ai.COMPRESS       = 'HUFFMAN'
      OTHERWISE Do
           Ausgabe.ai.COMPRESS       = 'NO'
       End
   END


   ADDRESS ISPEXEC  'TBSKIP  'SELTAB

 End
ADDRESS ISPEXEC  'TBCLOSE 'SELTAB

If AUSGABE.1.TYPE =  "G" Then Do   /* partition by growth */
   AUSGABE.0              =  1
   AUSGABE.1.PARTITIONS   =  0
 End

TSNAME = AUSGABE.1.NAME
DBNAME = AUSGABE.1.DBNAME

NVAL   = ''
NVTEXT = ''
address ISPEXEC 'TBCLOSE 'ALTAB
address ISPEXEC 'TBOPEN  'ALTAB


NAME   ='BUFFERPOOL'
OVal   = Ausgabe.1.BPOOL
NVal   = Ausgabe.1.BPOOL
NVal   = Ausgabe.1.BPOOL
NVTEXT = 'BUFFERPOOL NAME '
ADDRESS ISPEXEC 'TBADD 'ALTAB


NAME   ='CCSID     '
OVal   = Ausgabe.1.SBCS_CCSID
NVal   = Ausgabe.1.SBCS_CCSID
NVTEXT = 'CCSID (NUM) 367 '
ADDRESS ISPEXEC 'TBADD 'ALTAB

NAME   ='CLOSE     '
OVal   = Ausgabe.1.CLOSERULE
NVal   = Ausgabe.1.CLOSERULE
NVTEXT = 'YES/NO '
ADDRESS ISPEXEC 'TBADD 'ALTAB

NAME   ='LOGGED    '
OVal   = Ausgabe.1.LOG
NVal   = Ausgabe.1.LOG
NVTEXT = 'YES/NO '
ADDRESS ISPEXEC 'TBADD 'ALTAB

NAME   ='LOCKSIZE  '
OVal   = Ausgabe.1.LOCKSIZE
NVal   = Ausgabe.1.LOCKSIZE
NVTEXT = 'ROW/PAGE/ANY/LOB... '
ADDRESS ISPEXEC 'TBADD 'ALTAB

NAME   ='MAXROWS   '
OVal   = Ausgabe.1.MAXROWS
NVal   = Ausgabe.1.MAXROWS
NVTEXT = '1-255       '
ADDRESS ISPEXEC 'TBADD 'ALTAB

NAME   ='MAXPARTITIONS '
OVal   = Ausgabe.1.MAXPARTITIONS
NVal   = Ausgabe.1.MAXPARTITIONS
NVTEXT = '1-4096 PB-growth'
ADDRESS ISPEXEC 'TBADD 'ALTAB

NAME   ='DSSIZE    '
OVal   = Ausgabe.1.DSSIZE || "G"
NVal   = Ausgabe.1.DSSIZE || "G"
NVTEXT = 'SIZE IN G   '
ADDRESS ISPEXEC 'TBADD 'ALTAB

NAME   ='SEGSIZE       '
OVal   = Ausgabe.1.SEGSIZE
NVal   = Ausgabe.1.SEGSIZE
NVTEXT = 'SIZE IN K   '
ADDRESS ISPEXEC 'TBADD 'ALTAB

If     Ausgabe.1.LOCKMAX    = -1 Then Ausgabe.1.LOCKMAX   = "SYSTEM"
NAME   ='LOCKMAX       '
OVal   = Ausgabe.1.LOCKMAX
NVal   = Ausgabe.1.LOCKMAX
NVTEXT = 'SYSTEM, ANZAHL '
ADDRESS ISPEXEC 'TBADD 'ALTAB

NAME   ='STOGROUP         '
OVal   = Ausgabe.1.STORNAME
NVal   = Ausgabe.1.STORNAME
NVTEXT = 'STORGROUP    L '
ADDRESS ISPEXEC 'TBADD 'ALTAB

NAME   ='MEMBER CLUSTER '
OVal   = Ausgabe.1.MEMBER_CLUSTER
NVal   = Ausgabe.1.MEMBER_CLUSTER
NVTEXT = 'YES/NO         '
ADDRESS ISPEXEC 'TBADD 'ALTAB

NAME   ='PAGENUM          '
OVal   = Ausgabe.1.PAGENUM
NVal   = Ausgabe.1.PAGENUM
NVTEXT = 'RELATIVE/ABSOLUTE'
ADDRESS ISPEXEC 'TBADD 'ALTAB

NAME   ='INSERT ALGORITHM '
OVal   = Ausgabe.1.INSERTALG
NVal   = Ausgabe.1.INSERTALG
NVTEXT = '0.1.2          '
ADDRESS ISPEXEC 'TBADD 'ALTAB

If If Ausgabe.1.MAXPARTITIONS  > 0 THEN Ausgabe.0   = 1
Do TPI    = 1 to Ausgabe.0
   NAME   ='P ' || Ausgabe.TPI.PARTITION || '  PRIQTY'
   OVal   = Ausgabe.TPI.PQTY
   NVal   = Ausgabe.TPI.PQTY
   NVTEXT = 'PRIM SPACE ALLOC '
   ADDRESS ISPEXEC 'TBADD 'ALTAB

   NAME   ='P ' || Ausgabe.TPI.PARTITION || '  SECQTY'
   OVal   = Ausgabe.TPI.SQTY
   NVal   = Ausgabe.TPI.SQTY
   NVTEXT = 'SEQ  SPACE ALLOC'
   ADDRESS ISPEXEC 'TBADD 'ALTAB

   NAME   ='P ' || Ausgabe.TPI.PARTITION || '  COMPRESS'
   OVal   = Ausgabe.TPI.COMPRESS
   NVal   = Ausgabe.TPI.COMPRESS
   NVTEXT = 'Y/N/H/F  '
   ADDRESS ISPEXEC 'TBADD 'ALTAB

   NAME   ='P ' || Ausgabe.TPI.PARTITION || '  TRACKMOD'
   OVal   = Ausgabe.TPI.TRACKMOD
   NVal   = Ausgabe.TPI.TRACKMOD
   NVTEXT = 'YES/NO       '
   ADDRESS ISPEXEC 'TBADD 'ALTAB

   NAME   ='P ' || Ausgabe.TPI.PARTITION || '  FREEPAGE'
   OVal   = Ausgabe.TPI.FREEPAGE
   NVal   = Ausgabe.TPI.FREEPAGE
   NVTEXT = 'NUM EINGABE  '
   ADDRESS ISPEXEC 'TBADD 'ALTAB

   NAME   ='P ' || Ausgabe.TPI.PARTITION || '  PCTFREE'
   OVal   = Ausgabe.TPI.PCTFREE
   NVal   = Ausgabe.TPI.PCTFREE
   NVTEXT = '% ANGABE     '
   ADDRESS ISPEXEC 'TBADD 'ALTAB

   NAME   ='P ' || Ausgabe.TPI.PARTITION || '  GBPCACHE'
   OVal   = Ausgabe.TPI.GBPCACHE
   NVal   = Ausgabe.TPI.GBPCACHE
   NVTEXT = 'CHANGED/ALL/SYSTEM/NONE'
   ADDRESS ISPEXEC 'TBADD 'ALTAB

   NAME   ='P ' || Ausgabe.TPI.PARTITION || '  STOGROUP'
   OVal   = Ausgabe.TPI.STORNAME
   NVal   = Ausgabe.TPI.STORNAME
   NVTEXT = 'STORAGE GROUP'
   ADDRESS ISPEXEC 'TBADD 'ALTAB
 End


address ispexec  'TBCLOSE 'ALTAB
address ispexec  'TBOPEN 'ALTAB
CURSOR   = 'CURSOR(ZCMD)'
CSRROW  = 'CSRROW(1)'
RETCODE = RC
MESSAGE = 'MSG( )'
ZTDSELS = 0
ZTDTOP  = 0
LNR     = 1
address ISPEXEC 'TBCLOSE 'ALTAB
DO FOREVER
   address ISPEXEC 'TBOPEN 'ALTAB
   address ISPEXEC 'TBTOP  'ALTAB
   address ISPEXEC 'TBSKIP 'ALTAB' NUMBER('ZTDTOP')'
   address ispexec 'TBDISPL 'ALTAB' PANEL(PALTERTS)',
                   MESSAGE CURSOR 'CSRROW('LNR')' ,
                   'AUTOSEL(NO) POSITION(CRP)'
   If rc > 4 then do
      Say "*** Error on Display Alter RC="rc
      Say " ZERRSM =" ZERRSM
      Say " ZERRLM =" ZERRLM
      retuen
    End
   COMMAND = ZCMD

      /* PF Tasten Pruefen  */
   Select
      WHEN SUBSTR(COMMAND,1,3) = "CAN"  THEN DO
           address ispexec 'TBCLOSE 'ALTAB
           address ispexec 'TBERASE 'ALTAB
           Return
       end
      WHEN WORD(ZCMD,1) = "TRACE" then do
           IF WORD(ZCMD, 2) = "ON"     Then trace('R')
           IF WORD(ZCMD, 2) = "OFF" Then trace('O')
           UDBTRACE = word(ZCMD, 2)
           ADDRESS ISPEXEC 'VPUT (UDBTRACE) PROFILE'
           ZCMD = ''
       end
      When PF                  = 'PF03' THEN DO
           address ispexec 'TBCLOSE 'ALTAB
           address ispexec 'TBERASE 'ALTAB
           Return
       end
      When PF                  = 'PF04' THEN DO
           address ispexec 'TBCLOSE 'ALTAB
           address ispexec 'TBERASE 'ALTAB
           Return
       end
      Otherwise NOP
    End

   if ZTDSELS > 0 Then    LAUFNR = crp
   do cnt = 1 to  ZTDSELS            /* process ZeilenCommand */
      ADDRESS ISPEXEC 'TBMOD   'ALTAB
      address ispexec 'TBDISPL 'ALTAB' AUTOSEL(NO) POSITION(CRP)'
      If cnt = ZTDSELS Then Iterate
    end
   Address ispexec 'TBCLOSE 'ALTAB
   Leave
 End

address ispexec 'TBCLOSE 'ALTAB
address ispexec 'TBOPEN  'ALTAB
address ispexec 'TBTOP   'ALTAB

Do while RC = 0
   If NVal = '' Then do
      address ispexec 'TBSKIP   'ALTAB
      Iterate
    End
   If NVal <> Oval Then do
      JOB  = "N"
      STMT = "Y"
      PART = ""
      Select
        When Name = "LOGGED" Then Do
             If NVal = "NO"  Then Do
                NAME = "NOT LOGGED"
                NVal = ""
              End
             Else Do
                NAME = "LOGGED"
                NVal = ""
              End
         End
        When Name = "STOGROUP" Then Name = "USING STOGROUP  "
        Otherwise NOP
       End
      If Substr(Name, 1, 2) = "P " Then Do
         Part = "PART " Word(Name, 2)
         If Word(Name, 2)            = 0 Then Part = ""
         If Ausgabe.1.MAXPARTITIONS  > 0 THEN PART = ""
         Name = Word(Name, 3)
         Select
           When Name = "STOGROUP" Then Name = "USING STOGROUP  "
           When Name = "COMPRESS" Then Do
                Select
                  When Substr(NVal, 1, 1)  = "Y" Then Do
                       NVAL = "YES"
                   End
                  When Substr(NVal, 1, 1)  = "F" Then Do
                       NVAL = "YES FIXEDLENGTH"
                   End
                  When Substr(NVal, 1, 1)  = "H" Then Do
                       NVAL = "YES HUFFMAN"
                   End
                  Otherwise Do
                       NVAL = "NO"
                   End
                 End
            End
           When Name = "TRACKMOD" Then Do
                Select
                  When Substr(NVal, 1, 1)  = "Y" Then Do
                       NVAL = "YES"
                   End
                  Otherwise Do
                       NVAL = "NO"
                   End
                 End
            END
           When Name = "GBPCACHE" Then Do
                Select
                  When Substr(NVal, 1, 1)  = "C" Then Do
                       NVAL = "CHANGED "
                   End
                  When Substr(NVal, 1, 1)  = "A" Then Do
                       NVAL = "ALL "
                   End
                  When Substr(NVal, 1, 1)  = "S" Then Do
                       NVAL = "SYSTEM "
                   End
                  When Substr(NVal, 1, 1)  = "N" Then Do
                       NVAL = "NONE "
                   End
                  Otherwise Do
                       NVAL = "NO"
                   End
                 End
            END
           Otherwise NOP
          End
       End


      SQLSTMT = "ALTER TABLESPACE  " Strip(DB2_CREATOR1) || '.' || ,
                                     Strip(DB2_NAME1) PART
      OK = Nexttab( SQLSTMT , al.)
      OK = Nexttab("      " NAME NVal ";", al.)
    End
   address ispexec 'TBSKIP   'ALTAB
 End

Return

Alter_Stogroup:


Call Auto_Parse

NAME              = Left(NAME      ,   30, ' ')
VCATNAME          = Left(VCATNAME  ,    8, ' ')
DATACLAS          = Left(DATACLAS  ,   24, ' ')
MGMTCLAS          = Left(MGMTCLAS  ,   24, ' ')
STORCLAS          = Left(STORCLAS  ,   24, ' ')

area.0  = 9
area.1  = white"Alter Storagegroup "NAME
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"                                             "
area.6  = white"       "keyw"DATACLAS   "in1 || DATACLAS  || endin
area.7  = white"       "keyw"MGMTCLAS   "in1 || MGMTCLAS  || endin
area.8  = white"       "keyw"STORCLAS   "in1 || STORCLAS  || endin
area.9  = white" "

Call Anzeige_Dyn_Panel

If Strip(DATACLAS_Val) <> Strip(DATACLAS) Then Do
   OK = Nexttab( "Alter STOGROUP " Name  , al. )
   OK = Nexttab( "      DATACLAS      "DATACLAS_Val , al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(MGMTCLAS_val)  <> Strip(MGMTCLAS)  Then Do
   OK = Nexttab( "Alter STOGROUP " Name  , al. )
   OK = Nexttab( "      MGMTCLAS      "MGMTCLAS_Val, al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(STORCLAS_Val)  <> Strip(STORCLAS) Then Do
   OK = Nexttab( "Alter STOGROUP " Name  , al. )
   OK = Nexttab( "      STORCLAS      "STORCLAS_Val, al.)
   OK = Nexttab( "; "                               , al. )
 End


Return

Alter_Database:


Call Auto_Parse

DBName  = Left(NAME, 8, ' ')
STOGRP  = Left(STGROUP, 8, ' ')
BP      = Left(BPOOL,   8, ' ')
IBP     = Left(INDEXBP, 8, ' ')



area.0  = 9
area.1  = white"Alter Database "DBNAME
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"                                             "
area.6  = white"       "keyw"STOGROUP   "in1 || STOGRP || endin
area.7  = white"       "keyw"BPool      "in1 || BP     || endin
area.8  = white"       "keyw"BPool_IX   "in1 || IBP    || endin
area.9  = white" "

Call Anzeige_Dyn_Panel

If STOGROUP_Val <> STOGRP Then Do
   OK = Nexttab( "Alter Database " DBName  , al. )
   OK = Nexttab( "      STOGROUP      "STOGROUP_Val, al. )
 End

If Strip(BPool_Val)     <> Strip(BP)     Then Do
   OK = Nexttab( "Alter Database " DBName  , al. )
   OK = Nexttab( "      BUFFERPOOL    "BPool_Val, al. )
 End

If Strip(BPool_IX_Val)  <> Strip(IBP)    Then Do
   OK = Nexttab( "Alter Database " DBName  , al. )
   OK = Nexttab( "      INDEXBP       "BPool_IX_Val, al.)
 End


Return

Alter_Permission:
/*Noch ungetestet */


Call Auto_Parse

Select
 When CONTROL_TYPE  = 'R' Then Do
      Alter_Type = "PERMISSION "
  End
 When CONTROL_TYPE  = 'M' Then Do
      Alter_Type = "MASK "
  End
 otherwise  NOP
 End

ENABLE  = " "
TBENAB  = " "


area.0  = 12
area.1  = white"Alter "Alter_Type"  " Space(SCHEMA '.' NAME, 0)
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"                                             "
area.6  = white"       "keyw"ENABLE   "in1 || ENABLE || endin" " ,
               "   E ENABLE    "
area.7  = white"                         D DISABLE        "
area.8  = white"                         R REGENERATE     "
area.9  = white" "
area.10 = white"       "keyw"TBCOLACC "in1 || TBENAB || endin" " ,
               "   A ACTIVATE  COLUMN ACCESS CONTROL"
area.11 = white"                         D DEACTIVATE     "
area.12 = white" "

Call Anzeige_Dyn_Panel

If ENABLE_Val <> ENABLE Then Do
   OK = Nexttab( "Alter "Alter_Type Space(Schema '.' Name, 0) , al. )
   Select
     When Translate(Substr(ENABLE_Val, 1)) = "E" then do
          OK = Nexttab( "      ENABLE      ;", al. )
      end
     When Translate(Substr(ENABLE_Val, 1)) = "D" then do
          OK = Nexttab( "      DISABLE     ;", al. )
      end
     When Translate(Substr(ENABLE_Val, 1)) = "R" then do
          OK = Nexttab( "      REGENERATE  ;", al. )
      end
     Otherwise Do
          OK = Nexttab( "      ENABLE      ;", al. )
      end
     End
 End

If TBCOLACC_Val <> TBENAB Then Do
   OK = Nexttab( "Alter TABLE "Space(TBSchema '.' TBName, 0) , al. )
   Select
     When Translate(Substr(TBCOLACC_Val, 1)) = "D" then do
          OK = Nexttab( "    DEACTIVATE ROW ACCESS CONTROL ;", al.)
      end
     Otherwise Do
          OK = Nexttab( "      ACTIVATE ROW ACCESS CONTROL ;", al.)
      end
     End
 End


Return

Alter_Routine:

Call Auto_Parse

select
  When  ROUTINETYPE = "P" Then Do
        select
          When  ORIGIN = "E"                              Then do
                Alter_Type  = "PROCEDURE SQL EXTERNAL"
                Call Alter_Procedure_SQL_EXTERNAL
           End
          When  ORIGIN = "N"                              Then do
                Alter_Type  = "PROCEDURE SQL NATIVE  "
                Call Alter_Procedure_SQL_NATIVE
           End
           Otherwise Do
                Alter_Type  = "PROCEDURE EXTERNAL    "
                Call Alter_Procedure_EXTERNAL
           End
         End
   End
  When  ROUTINETYPE = "F" Then Do
        select
          When  ORIGIN = "E"                            Then do
                Alter_Type  = "FUNCTION EXTERNAL    "
                Call Alter_Function_EXTERNAL
           End
          When  ORIGIN = "U"                            Then do
                Alter_Type  = "FUNCTION COMPILED SQL SCALAR "
                Call Alter_Function_Compiled_SQL_Scalar
           End
          When  ORIGIN = "Q" & FUNCTION_TYPE = "S"      Then do
                Alter_Type  = "FUNCTION INLINED SQL SCALAR  "
                Call Alter_Function_Inlined_SQL_Scalar
           End
          When  ORIGIN = "S" & FUNCTION_TYPE = "S"      Then do
                Alter_Type  = "System-generated function"
                Call Alter_Function_System_Generated
           End
          When  FUNCTION_TYPE = "T"                     Then do
                Alter_Type  = "SQL TABLE   "
                Call Alter_Function_SQL_Table
           End
          Otherwise NOP
         End
   End
    Otherwise NOP
 End

Return

Alter_Procedure_EXTERNAL:


WLMENV            = Left(WLM_ENVIRONMENT           , 50, ' ')
extname           = LEFT(EXTERNAL_NAME             , 50, ' ')
LANGUAGE          = LEFT(LANGUAGE                  , 10, ' ')
PARMSTYLE         = LEFT(PARAMETER_STYLE           ,  1, ' ')
DETERMINISTIC     = LEFT(DETERMINISTIC             ,  1, ' ')
COMMITRETURN      = LEFT(COMMIT_ON_RETURN          ,  1, ' ')
EXTACTION         = LEFT(EXTERNAL_ACTION           ,  1, ' ')
SCRATCHPAD        = LEFT(SCRATCHPAD                ,  1, ' ')
SQL_DATA_ACCESS   = LEFT(SQL_DATA_ACCESS           ,  1, ' ')
FINALCALL         = LEFT(FINAL_CALL                ,  1, ' ')
PARALLEL          = LEFT(PARALLEL                  ,  1, ' ')
DBINFO            = LEFT(DBINFO                    ,  1, ' ')
COLLID            = LEFT(COLLID                    , 50, ' ')
ASUTIME           = LEFT(ASUTIME                   ,  6, ' ')
STAYRESIDENT      = LEFT(STAYRESIDENT              ,  1, ' ')
PROGRAM_TYPE      = LEFT(PROGRAM_TYPE              ,  1, ' ')
EXT_SECURITY      = LEFT(EXTERNAL_SECURITY         ,  7, ' ')
SECURE            = LEFT(SECURE                    ,  1, ' ')
MAX_FAILURE       = LEFT(MAX_FAILURE               ,  5, ' ')
ASUTIME           = LEFT(ASUTIME                   ,  6, ' ')
SQLDATA           = 1
RUNOPTS           = LEFT(RUNOPTS                   , 50, ' ')
SPECIAL_REGS      = LEFT(SPECIAL_REGS              ,  1, ' ')


AUSWKZ    = "PG"
tabnr     = tabnr     + 1
object    = Space(COLLID '.' SPECIFICNAME, 0)
call Lesen_daten
CZEILE  = ""
COLTAB = "COLTB"tabnr
TBCOL  = "TBCOL"tabnr

address ispexec 'TBOPEN  'COLTAB
address ispexec 'TBTOP   'COLTAB
address ispexec 'TBSKIP  'COLTAB
address ispexec 'TBGET   'COLTAB

DROP Auto_Parse_Cols.
Call Auto_Parse


Select
 WHEN SQL_DATA_ACCESS   = "R" THEN SQLDATA  = "1"
 WHEN SQL_DATA_ACCESS   = "M" THEN SQLDATA  = "2"
 WHEN SQL_DATA_ACCESS   = "C" THEN SQLDATA  = "3"
 WHEN SQL_DATA_ACCESS   = "N" THEN SQLDATA  = "4"
 OTHERWISE                         SQLDATA  = ""
 End

area.0  = 33
area.1  = white"Alter "Alter_Type"  " Space(Schema '.' NAME, 0)
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"   "keyw"WLM_ENVIRONMENT "in1 || WLMENV       || endin
area.6  = white"   "keyw"EXTERNAL_NAME   "in1 || extname      || endin,
               "  path/module/function that Db2 should load "
area.7  = white"        LANGUAGE : ASSEMBLE,C,COBOL,JAVA,PLI,REXX   ",
area.8  = white"   "keyw"LANGUAGE        "in1 || LANGUAGE     || endin
area.9  = white"        STYLE : SQL,GENERAL,GENERAL WITH NULLS,JAVA ",
          endin
area.10 = white"   "keyw"PARAMETER_STYLE "in1 || PARMSTYLE    || endin,
               "  D=DB2SQL, G=GENERAL, J=JAVA, N=GENERAL WITH NULLS"
area.11 = white"   "keyw"COMMIT_ON_RETURN"in1 || COMMITRETURN || endin,
               "  Y/N "                                       || endin
area.12 = white"   "keyw"DETERMINISTIC   "in1 || DETERMINISTIC|| endin,
               "  Y/N "                                       || endin
area.13 = white"   "keyw"SQLDATA         "in1 || SQLDATA      || endin
area.14 = white"           1 READS SQL DATA    "              || endin
area.15 = white"           2 MODIFIES SQL DATA "              || endin
area.16 = white"           3 CONTAINS SQL "                   || endin
area.17 = white"           4 NOSQL        "                   || endin
area.18 = white"   "keyw"EXTERNAL_ACTION "in1 || EXTACTION    || endin,
               "  N=NO, E=HAS EXTERNAL ACTION   "               endin
area.19 = white"   "keyw"SCRATCHPAD      "in1 || SCRATCHPAD   || endin,
               "  Y/N          "
area.20 = white"   "keyw"FINAL_CALL      "in1 || FINALCALL    || endin,
               "  Y/N          "
area.21 = white"   "keyw"PARALLEL        "in1 || PARALLEL     || endin,
               "  A=PARALLEL, D=NOT PARALLEL "
area.22 = white"   "keyw"DBINFO          "in1 || DBINFO       || endin,
               "  Y/N          "
area.23 = white"   "keyw"COLLID          "in1 || COLLID       || endin,
               "  PACKAGE COLLECTION "
area.24 = white"   "keyw"ASUTIME         "in1 || ASUTIME      || endin,
               "  0=NO LIMIT > 0 LIMIT "                      || endin
area.25 = white"   "keyw"STAYRESIDENT    "in1 || STAYRESIDENT || endin,
               "  Y/N "                                       || endin
area.26 = white"   "keyw"PROGRAM_TYPE    "in1 || PROGRAM_TYPE || endin,
               "  M=MAIN, S=SUB"                              || endin
area.27 = white"   "keyw"EXT_SECURITY    "in1 || EXT_SECURITY || endin,
               "  DB2,USER,DEFINER " ||                          endin
area.28 = white"   "keyw"SECURE          "in1 || SECURE       || endin,
               "  Y/N "                                       || endin
area.29 = white"   "keyw"MAX_FAILURE     "in1 || MAX_FAILURE  || endin,
               "-1=DEFAULT 0=NO LIMIT > 0 LIMIT (MAX=32000)"  || endin
area.30 = white"   "keyw"RUNOPTS         "in1 || RUNOPTS      || endin,
               "  Run time options to be used "               || endin
area.31 = white"   "
area.32 = white"   "
area.33 = white"   "

Call Anzeige_Dyn_Panel

OK = Nexttab( "--     ", al.)
If WLM_ENVIRONMENT_Val <> WLMENV   Then do
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "      WLM ENVIRONMENT " WLM_ENVIRONMENT_Val, al.)
   OK = Nexttab( " ;                        ", al.)
 End


If EXTERNAL_NAME_val  <>        EXTNAME       Then Do
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "      EXTERNAM NAME   " EXTERNAL_NAME_val  , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If LANGUAGE_val  <>             LANGUAGE      Then Do
   Select
     When Substr(LANGUAGE_val, 1, 1) = "A"    THEN  do
       LANGUAGE_val = "ASSEMBLE"
      End
     When Substr(LANGUAGE_val, 1, 3) = "COB"  THEN  do
       LANGUAGE_val = COBOL
      End
     When Substr(LANGUAGE_val, 1, 3) = "COM"  THEN  do
       LANGUAGE_val = COMPJAVA
      End
     When Substr(LANGUAGE_val, 1, 1) = "C"    THEN  do
       LANGUAGE_val = "C"
      End
     When Substr(LANGUAGE_val, 1, 1) = "J"    THEN  do
       LANGUAGE_val = "JAVA"
      End
     When Substr(LANGUAGE_val, 1, 1) = "P"    THEN  do
       LANGUAGE_val = "PLI"
      End
     When Substr(LANGUAGE_val, 1, 1) = "R"    THEN  do
       LANGUAGE_val = "REXX"
      End
     When Substr(LANGUAGE_val, 1, 1) = "S"    THEN  do
       LANGUAGE_val = "SQL"
      End
     Otherwise Do
       LANGUAGE_val = "SQL"
      End
    End
   ALTER_TYPE  = "LANGUAGE "Strip(LANGUAGE_val)
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE              , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PARAMETER_STYLE_val  <>      PARMSTYLE     Then Do
   Select
     When Substr(PARAMETER_STYLE_val, 1, 1) = "G" THEN do
       PARAMETER_STYLE_val = "GENERAL"
      End
     When Substr(PARAMETER_STYLE_val, 1, 1) = "N" THEN do
       PARAMETER_STYLE_val = "GENERAL WITH NULLS"
      End
     When Substr(PARAMETER_STYLE_val, 1, 1) = "J" THEN do
       PARAMETER_STYLE_val = "JAVA"
      End
     When Substr(PARAMETER_STYLE_val, 1, 1) = "S" THEN do
       PARAMETER_STYLE_val = "SQL"
      End
     Otherwise Do
       PARAMETER_STYLE_val = "SQL"
      End
    End
   ALTER_TYPE  = "PARAMETER STYLE " PARAMETER_STYLE_val
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE              , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If COMMIT_ON_RETURN_val  <>     COMMITRETURN  Then Do
   Select
     WHEN COMMIT_ON_RETURN_val = "N" Then Do
          Alter_type  =   "COMMIT ON RETURN NO  "
      END
     WHEN COMMIT_ON_RETURN_val = "Y" Then Do
          Alter_type  =   "COMMIT ON RETURN YES "
      END
     OTHERWISE Do
          Alter_type  =   "COMMIT ON RETURN YES "
      END
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If DETERMINISTIC_val  <>        DETERMINISTIC Then Do
   Select
     WHEN DETERMINISTIC_Val  = "N" Then Do
          Alter_type  =   "NOT DETERMINISTIC "
      END
     WHEN DETERMINISTIC_Val  = "Y" Then Do
          Alter_type  =   "DETERMINISTIC "
      END
     OTHERWISE Do
          Alter_type  =   "DETERMINISTIC "
      END
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If SQLDATA_val  <>              SQLDATA       Then Do
   Select
     WHEN SQLDATA_val        = "1" Then Do
          Alter_type  =   "READS SQL DATA    "
      END
     WHEN SQLDATA_val        = "2" Then Do
          Alter_type  =   "MODIFIES SQL DATA "
      END
     WHEN SQLDATA_val        = "3" Then Do
          Alter_type  =   "CONTAINS SQL      "
      END
     WHEN SQLDATA_val        = "4" Then Do
          Alter_type  =   "NOSQL             "
      END
     OTHERWISE Do
          Alter_type  =   "CONTAINS SQL      "
      END
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If EXTERNAL_ACTION_val  <>      EXTACTION     Then Do
   Select
     When EXTERNAL_ACTION_Val = "N" THEN DO
          ALTER_TYPE = "NO EXTERNAL ACTION"
      End
     When EXTERNAL_ACTION_Val = "E" THEN DO
          ALTER_TYPE = "EXTERNAL ACTION"
      End
     OTHERWISE  Do
          ALTER_TYPE = "NO EXTERNAL ACTION"
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If SCRATCHPAD_val  <>           SCRATCHPAD    Then Do
   select
     WHEN SCRATCHPAD_val     = "N" Then Do
          Alter_type    = "NO SCRATCHPAD    "
      End
     OTHERWISE  DO
          Alter_type    = "SCRATCHPAD "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If FINAL_CALL_val  <>           FINALCALL     Then Do
   select
     WHEN FINAL_CALL_val     = "N" Then Do
          Alter_type    = "NO FINAL CALL    "
      End
     OTHERWISE  DO
          Alter_type    = "FINAL CALL    "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PARALLEL_val  <>             PARALLEL      Then Do
   select
     WHEN PARALLEL_val       = "D" Then Do
          Alter_type    = "DISALLOW PARALLEL"
      End
     OTHERWISE  DO
          Alter_type    = "   ALLOW PARALLEL"
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If DBINFO_val  <>               DBINFO        Then Do
   select
     WHEN DBINFO_val         = "N" Then Do
          Alter_type    = "NO DBINFO        "
      End
     OTHERWISE  DO
          Alter_type    = "DBINFO           "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If COLLID_val  <>               COLLID        Then Do
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "      COLLIDCOLLID "COLLID_val             , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If ASUTIME_val  <>              ASUTIME       Then Do
   select
     WHEN Datatype(ASUTIME_val    )     <> "NUM" Then Do
          Alter_type    = "ASUTIME NO LIMIT "
      End
     WHEN ASUTIME_val                    < "1"  THEN Do
          Alter_type    = "ASUTIME NO LIMIT "
      End
     OTHERWISE  DO
          Alter_type    = "ASUTIME LIMIT " ASUTIME_val
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If STAYRESIDENT_val  <>         STAYRESIDENT  Then Do
   Select
     WHEN STAYRESIDENT_val   = "Y" Then Do
          Alter_type  =   "STAY RESIDENT YES "
      END
     WHEN STAYRESIDENT_val   = "N" Then Do
          Alter_type  =   "STAY RESIDENT NO  "
      END
     OTHERWISE Do
          Alter_type  =   "STAY RESIDENT YES "
      END
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PROGRAM_TYPE_val  <>         PROGRAM_TYPE  Then Do
   Select
     WHEN PROGRAM_TYPE_val   = "M" Then Do
          Alter_type  =   "PROGRAM TYPE MAIN "
      END
     WHEN PROGRAM_TYPE_val   = "S" Then Do
          Alter_type  =   "PROGRAM TYPE SUB  "
      END
     OTHERWISE Do
          Alter_type  =   "PROGRAM TYPE MAIN "
      END
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If EXT_SECURITY_val  <>         EXT_SECURITY  Then Do
   select
     WHEN SUBSTR(EXT_SECURITY_val, 1, 2) = "DB"  THEN Do
          Alter_type    = "SECURITY DB2"
      End
     WHEN SUBSTR(EXT_SECURITY_Val, 1, 1) = "U"  THEN Do
          Alter_type    = "SECURITY USER"
      End
     WHEN SUBSTR(EXT_SECURITY_Val, 1, 2) = "DE"  THEN Do
          Alter_type    = "SECURITY DEFINER"
      End
     OTHERWISE  DO
          Alter_type    = "SECURITY DB2"
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If SECURE_val  <>               SECURE        Then Do
   Select
     When SECURE_val   = "Y" THEN ALTER_TYPE = "SECURED      "
     When SECURE_val   = "N" THEN ALTER_TYPE = "NOT SECURED  "
     OTHERWISE                    ALTER_TYPE = "SECURED      "
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If MAX_FAILURE_val  <>          MAX_FAILURE   Then Do
   select
     WHEN Datatype(MAX_FAILURE_val)     <> "NUM" Then Do
          Alter_type    = "STOP AFTER SYSTEM DEFAULT FAILURES "
      End
     WHEN MAX_FAILURE_val                < 0     THEN Do
          Alter_type    = "STOP AFTER SYSTEM DEFAULT FAILURES "
      End
     WHEN MAX_FAILURE_val                = "0"  THEN Do
          Alter_type    = "STOP AFTER SYSTEM DEFAULT FAILURES "
      End
     WHEN MAX_FAILURE_val                > "32000" THEN Do
          Alter_type    = "FAILURESSTOP AFTER     30 "
      End
     OTHERWISE  DO
          Alter_type  = "FAILURESSTOP AFTER "MAX_FAILURE_val "FAILURES"
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If ASUTIME_val  <>              ASUTIME       Then Do
   select
     WHEN Datatype(ASUTIME_val    )     <> "NUM" Then Do
          Alter_type    = "ASUTIME NO LIMIT "
      End
     WHEN ASUTIME_val                    < "1"  THEN Do
          Alter_type    = "ASUTIME NO LIMIT "
      End
     OTHERWISE  DO
          Alter_type    = "ASUTIME LIMIT " ASUTIME_val
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If RUNOPTS_val  <>              RUNOPTS       Then Do
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "      RUN OPTIONS "RUNOPTS_val             , al.)
   OK = Nexttab( " ;                        ", al.)
 END

Return

Alter_Procedure_SQL_EXTERNAL:

WLMENV            = Left(WLM_ENVIRONMENT           , 50, ' ')
extname           = LEFT(EXTERNAL_NAME             , 50, ' ')
LANGUAGE          = LEFT(LANGUAGE                  , 10, ' ')
PARMSTYLE         = LEFT(PARAMETER_STYLE           ,  1, ' ')
PARALLEL          = LEFT(PARALLEL                  ,  1, ' ')
DETERMINISTIC     = LEFT(DETERMINISTIC             ,  1, ' ')
COMMITRETURN      = LEFT(COMMIT_ON_RETURN          ,  1, ' ')
EXTACTION         = LEFT(EXTERNAL_ACTION           ,  1, ' ')
SCRATCHPAD        = LEFT(SCRATCHPAD                ,  1, ' ')
SQL_DATA_ACCESS   = LEFT(SQL_DATA_ACCESS           ,  1, ' ')
FINALCALL         = LEFT(FINAL_CALL                ,  1, ' ')
DBINFO            = LEFT(DBINFO                    ,  1, ' ')
COLLID            = LEFT(COLLID                    , 50, ' ')
STAYRESIDENT      = LEFT(STAYRESIDENT              ,  1, ' ')
PROGRAM_TYPE      = LEFT(PROGRAM_TYPE              ,  1, ' ')
EXT_SECURITY      = LEFT(EXTERNAL_SECURITY         ,  7, ' ')
SECURE            = LEFT(SECURE                    ,  1, ' ')
MAX_FAILURE       = LEFT(MAX_FAILURE               ,  5, ' ')
ASUTIME           = LEFT(ASUTIME                   ,  6, ' ')
DEBUG_MODE        = LEFT(DEBUG_MODE                ,  1, ' ')
RESULT_SETS       = LEFT(RESULT_SETS               ,  5, ' ')
RUNOPTS           = LEFT(RUNOPTS                   , 50, ' ')
SQLDATA           = 1
SPECIAL_REGS      = LEFT(SPECIAL_REGS              ,  1, ' ')

Select
 WHEN SQL_DATA_ACCESS   = "R" THEN SQLDATA  = "1"
 WHEN SQL_DATA_ACCESS   = "M" THEN SQLDATA  = "2"
 WHEN SQL_DATA_ACCESS   = "C" THEN SQLDATA  = "3"
 WHEN SQL_DATA_ACCESS   = "N" THEN SQLDATA  = "4"
 OTHERWISE                         SQLDATA  = ""
 End

Select
 WHEN EXT_SECURITY      = "D" THEN EXT_SECURITY  = "DB2    "
 WHEN EXT_SECURITY      = "U" THEN EXT_SECURITY  = "USER   "
 WHEN EXT_SECURITY      = "C" THEN EXT_SECURITY  = "DEFINER"
 OTHERWISE                         EXT_SECURITY  = ""
 End

area.0  = 31
area.1  = white"Alter "Alter_Type"  " Space(Schema '.' NAME, 0)
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"   "keyw"WLM_ENVIRONMENT "in1 || WLMENV       || endin
area.6  = white"   "keyw"EXTERNAL_NAME   "in1 || extname      || endin,
               "  path/module/function that Db2 should load "
area.7  = white"        LANGUAGE : ASSEMBLE,C,COBOL,JAVA,PLI,REXX   "
area.8  = white"   "keyw"LANGUAGE        "in1 || LANGUAGE     || endin
area.9  = white"   "keyw"PARAMETER_STYLE "in1 || PARMSTYLE    || endin,
               "  D=DB2SQL, G=GENERAL, J=JAVA, N=GENERAL WITH NULLS"
area.10 = white"   "keyw"COMMIT_ON_RETURN"in1 || COMMITRETURN || endin,
               "  Y/N "                                       || endin
area.11 = white"   "keyw"DETERMINISTIC   "in1 || DETERMINISTIC|| endin,
               "  Y/N "                                       || endin
area.12 = white"   "keyw"SQLDATA         "in1 || SQLDATA      || endin
area.13 = white"           1 READS SQL DATA    "              || endin
area.14 = white"           2 MODIFIES SQL DATA "              || endin
area.15 = white"           3 CONTAINS SQL "                   || endin
area.16 = white"           4 NOSQL        "                   || endin
area.17 = white"   "keyw"DBINFO          "in1 || DBINFO       || endin,
               "  Y/N "                                       || endin
area.18 = white"   "keyw"FINAL_CALL      "in1 || FINALCALL    || endin,
               "  Y/N          "
area.19 = white"   "keyw"COLLID          "in1 || COLLID       || endin,
               "  PACKAGE COLLECTION "
area.20 = white"   "keyw"STAYRESIDENT    "in1 || STAYRESIDENT || endin,
               "  Y/N "                                       || endin
area.21 = white"   "keyw"PROGRAM_TYPE    "in1 || PROGRAM_TYPE || endin,
               "  M=MAIN, S=SUB"                              || endin
area.22 = white"   "keyw"EXT_SECURITY    "in1 || EXT_SECURITY || endin,
               "  DB2,USER,DEFINER " ||                         endin
area.23 = white"   "keyw"SECURE          "in1 || SECURE       || endin,
               "  Y/N "                                       || endin
area.24 = white"   "keyw"MAX_FAILURE     "in1 || MAX_FAILURE  || endin,
               "-1=DEFAULT 0=NO LIMIT > 0 LIMIT (MAX=32000)"  || endin
area.25 = white"   "keyw"ASUTIME         "in1 || ASUTIME      || endin,
               "0=NO LIMIT > 0 LIMIT "             || endin
area.26 = white"   "keyw"RESULT_SETS     "in1 || RESULT_SETS  || endin,
               "ANZAHL RESULT SETS   "             || endin
area.27 = white"   "keyw"SPECIAL_REGS    "in1 || SPECIAL_REGS || endin,
               "I=INHERIT, D=DEFAULT "             || endin
area.28 = white"   "keyw"DEBUG_MODE      "in1 || DEBUG_MODE   || endin,
               "     (JAVA) 1=ALLOW, 0=DISALLOW, N=DISABLE "  || endin
area.29 = white"   "keyw"RUNOPTS         "in1 || RUNOPTS      || endin,
               "  Run time options to be used "               || endin
area.30 = white"   "
area.31 = white"   "


Call Anzeige_Dyn_Panel

OK = Nexttab( "--     ", al.)

If WLM_ENVIRONMENT_Val <> WLMENV   Then do
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "      WLM ENVIRONMENT " WLM_ENVIRONMENT_Val, al.)
   OK = Nexttab( " ;                        ", al.)
 End

If EXTERNAL_NAME_val    <>   extname          Then Do
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "      EXTERNAM NAME   " EXTERNAL_NAME_val  , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If LANGUAGE_val         <>   LANGUAGE         Then Do
   Select
     When Substr(LANGUAGE_val, 1, 1) = "A"    THEN  do
       LANGUAGE_val = "ASSEMBLE"
      End
     When Substr(LANGUAGE_val, 1, 3) = "COB"  THEN  do
       LANGUAGE_val = COBOL
      End
     When Substr(LANGUAGE_val, 1, 3) = "COM"  THEN  do
       LANGUAGE_val = COMPJAVA
      End
     When Substr(LANGUAGE_val, 1, 1) = "C"    THEN  do
       LANGUAGE_val = "C"
      End
     When Substr(LANGUAGE_val, 1, 1) = "J"    THEN  do
       LANGUAGE_val = "JAVA"
      End
     When Substr(LANGUAGE_val, 1, 1) = "P"    THEN  do
       LANGUAGE_val = "PLI"
      End
     When Substr(LANGUAGE_val, 1, 1) = "R"    THEN  do
       LANGUAGE_val = "REXX"
      End
     When Substr(LANGUAGE_val, 1, 1) = "S"    THEN  do
       LANGUAGE_val = "SQL"
      End
     Otherwise Do
       LANGUAGE_val = "SQL"
      End
    End
   ALTER_TYPE  = "LANGUAGE "Strip(LANGUAGE_val)
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE              , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If PARAMETER_STYLE_val  <>   PARMSTYLE        Then Do
   Select
     When Substr(PARAMETER_STYLE_val, 1, 1) = "G" THEN do
       PARAMETER_STYLE_val = "GENERAL"
      End
     When Substr(PARAMETER_STYLE_val, 1, 1) = "N" THEN do
       PARAMETER_STYLE_val = "GENERAL WITH NULLS"
      End
     When Substr(PARAMETER_STYLE_val, 1, 1) = "J" THEN do
       PARAMETER_STYLE_val = "JAVA"
      End
     When Substr(PARAMETER_STYLE_val, 1, 1) = "S" THEN do
       PARAMETER_STYLE_val = "SQL"
      End
     Otherwise Do
       PARAMETER_STYLE_val = "SQL"
      End
    End
   ALTER_TYPE  = "PARAMETER STYLE " PARAMETER_STYLE_val
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE              , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If COMMIT_ON_RETURN_val <>   COMMITRETURN     Then Do
   Select
     WHEN COMMIT_ON_RETURN_val = "N" Then Do
          Alter_type  =   "COMMIT ON RETURN NO  "
      END
     WHEN COMMIT_ON_RETURN_val = "Y" Then Do
          Alter_type  =   "COMMIT ON RETURN YES "
      END
     OTHERWISE Do
          Alter_type  =   "COMMIT ON RETURN YES "
      END
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 end


If DETERMINISTIC_val    <>   DETERMINISTIC    Then Do
   Select
     WHEN DETERMINISTIC_Val  = "N" Then Do
          Alter_type  =   "NOT DETERMINISTIC "
      END
     WHEN DETERMINISTIC_Val  = "Y" Then Do
          Alter_type  =   "DETERMINISTIC "
      END
     OTHERWISE Do
          Alter_type  =   "DETERMINISTIC "
      END
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If SQLDATA_val          <>   SQLDATA          Then Do
   Select
     WHEN SQLDATA_val        = "1" Then Do
          Alter_type  =   "READS SQL DATA    "
      END
     WHEN SQLDATA_val        = "2" Then Do
          Alter_type  =   "MODIFIES SQL DATA "
      END
     WHEN SQLDATA_val        = "3" Then Do
          Alter_type  =   "CONTAINS SQL      "
      END
     WHEN SQLDATA_val        = "4" Then Do
          Alter_type  =   "NOSQL             "
      END
     OTHERWISE Do
          Alter_type  =   "CONTAINS SQL      "
      END
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If DBINFO_val           <>   DBINFO           Then Do
   select
     WHEN DBINFO_val         = "N" Then Do
          Alter_type    = "NO DBINFO        "
      End
     OTHERWISE  DO
          Alter_type    = "DBINFO           "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If FINAL_CALL_val       <>   FINALCALL        Then Do
   select
     WHEN FINAL_CALL_val     = "N" Then Do
          Alter_type    = "NO FINAL CALL    "
      End
     OTHERWISE  DO
          Alter_type    = "FINAL CALL    "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If COLLID_val           <>   COLLID           Then Do
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "      COLLIDCOLLID "COLLID_val             , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If STAYRESIDENT_val     <>   STAYRESIDENT     Then Do
   Select
     WHEN STAYRESIDENT_val   = "Y" Then Do
          Alter_type  =   "STAY RESIDENT YES "
      END
     WHEN STAYRESIDENT_val   = "N" Then Do
          Alter_type  =   "STAY RESIDENT NO  "
      END
     OTHERWISE Do
          Alter_type  =   "STAY RESIDENT YES "
      END
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If PROGRAM_TYPE_val     <>   PROGRAM_TYPE     Then Do
   Select
     WHEN PROGRAM_TYPE_val   = "M" Then Do
          Alter_type  =   "PROGRAM TYPE MAIN "
      END
     WHEN PROGRAM_TYPE_val   = "S" Then Do
          Alter_type  =   "PROGRAM TYPE SUB  "
      END
     OTHERWISE Do
          Alter_type  =   "PROGRAM TYPE MAIN "
      END
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If EXT_SECURITY_val     <>   EXT_SECURITY     Then Do
   select
     WHEN SUBSTR(EXT_SECURITY_val, 1, 2) = "DB"  THEN Do
          Alter_type    = "SECURITY DB2"
      End
     WHEN SUBSTR(EXT_SECURITY_Val, 1, 1) = "U"  THEN Do
          Alter_type    = "SECURITY USER"
      End
     WHEN SUBSTR(EXT_SECURITY_Val, 1, 2) = "DE"  THEN Do
          Alter_type    = "SECURITY DEFINER"
      End
     OTHERWISE  DO
          Alter_type    = "SECURITY DB2"
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If MAX_FAILURE_val      <>   MAX_FAILURE      Then Do
   select
     WHEN Datatype(MAX_FAILURE_val)     <> "NUM" Then Do
          Alter_type    = "STOP AFTER SYSTEM DEFAULT FAILURES "
      End
     WHEN MAX_FAILURE_val                < 0     THEN Do
          Alter_type    = "STOP AFTER SYSTEM DEFAULT FAILURES "
      End
     WHEN MAX_FAILURE_val                = "0"  THEN Do
          Alter_type    = "STOP AFTER SYSTEM DEFAULT FAILURES "
      End
     WHEN MAX_FAILURE_val                > "32000" THEN Do
          Alter_type    = "FAILURESSTOP AFTER     30 "
      End
     OTHERWISE  DO
          Alter_type  = "FAILURESSTOP AFTER "MAX_FAILURE_val "FAILURES"
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If ASUTIME_val          <>   ASUTIME          Then Do
   select
     WHEN Datatype(ASUTIME_val    )     <> "NUM" Then Do
          Alter_type    = "ASUTIME NO LIMIT "
      End
     WHEN ASUTIME_val                    < "1"  THEN Do
          Alter_type    = "ASUTIME NO LIMIT "
      End
     OTHERWISE  DO
          Alter_type    = "ASUTIME LIMIT " ASUTIME_val
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If RESULT_SETS_Val      <>   RESULT_SETS      ,
 & RESULT_SETS_Val      <>   "RESULT_SETS_VAL"  Then Do
   select
     WHEN Datatype(RESULT_SETS_Val)     <> "NUM" Then Do
          Alter_type    = "DYNAMIC RESULT SETS 0 "
      End
     WHEN RESULT_SETS_Val                < "1"  THEN Do
          Alter_type    = "DYNAMIC RESULT SETS 0 "
      End
     OTHERWISE  DO
          Alter_type    = "DYNAMIC RESULT SETS "RESULT_SETS_Val
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If SPECIAL_REGS_Val     <>   SPECIAL_REGS     Then Do
   select
     WHEN SPECIAL_REGS_Val               = "D"  THEN Do
          Alter_type    = "DEFAULT SPECIAL REGISTERS "
      End
     WHEN SPECIAL_REGS_Val               = "I"  THEN Do
          Alter_type    = "INHERIT SPECIAL REGISTERS "
      End
     OTHERWISE  DO
          Alter_type    = "DEFAULT SPECIAL REGISTERS "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If DEBUG_MODE_val       <>   DEBUG_MODE       Then Do
   select
     WHEN DEBUG_MODE_val                 = "0"  THEN Do
          Alter_type    = "DISALLOW DEBUG MODE       "
      End
     WHEN DEBUG_MODE_val                 = "1"  THEN Do
          Alter_type    = "   ALLOW DEBUG MODE       "
      End
     WHEN DEBUG_MODE_val                 = "N"  THEN Do
          Alter_type    = "DISABLE DEBUG MODE        "
      End
     OTHERWISE  DO
          Alter_type    = "DISALLOW DEBUG MODE       "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If RUNOPTS_val  <>              RUNOPTS       Then Do
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "      RUN OPTIONS "RUNOPTS_val             , al.)
   OK = Nexttab( " ;                        ", al.)
 END

Return

Alter_Procedure_SQL_NATIVE:

WLMENV            = Left(WLM_ENVIRONMENT           , 50, ' ')
extname           = LEFT(EXTERNAL_NAME             , 50, ' ')
LANGUAGE          = LEFT(LANGUAGE                  , 10, ' ')
PARMSTYLE         = LEFT(PARAMETER_STYLE           ,  1, ' ')
DETERMINISTIC     = LEFT(DETERMINISTIC             ,  1, ' ')
COMMITRETURN      = LEFT(COMMIT_ON_RETURN          ,  1, ' ')
EXTACTION         = LEFT(EXTERNAL_ACTION           ,  1, ' ')
SCRATCHPAD        = LEFT(SCRATCHPAD                ,  1, ' ')
SQL_DATA_ACCESS   = LEFT(SQL_DATA_ACCESS           ,  1, ' ')
FINALCALL         = LEFT(FINAL_CALL                ,  1, ' ')
PARALLEL          = LEFT(PARALLEL                  ,  1, ' ')
DBINFO            = LEFT(DBINFO                    ,  1, ' ')
COLLID            = LEFT(COLLID                    , 50, ' ')
ASUTIME           = LEFT(ASUTIME                   ,  4, ' ')
STAYRESIDENT      = LEFT(STAYRESIDENT              ,  1, ' ')
PROGRAM_TYPE      = LEFT(PROGRAM_TYPE              ,  1, ' ')
EXT_SECURITY      = LEFT(EXTERNAL_SECURITY         ,  7, ' ')
SECURE            = LEFT(SECURE                    ,  1, ' ')
MAX_FAILURE       = LEFT(MAX_FAILURE               ,  5, ' ')
SQLDATA           = LEFT(1                         ,  1, ' ')
PARAMETER_CCSID   = LEFT(PARAMETER_CCSID           ,  8, ' ')
RESULT_SETS       = LEFT(RESULT_SETS               ,  4, ' ')
DATE_FORMAT       = LEFT(DATE_FORMAT               ,  5, ' ')
TIME_FORMAT       = LEFT(TIME_FORMAT               ,  5, ' ')
Anzeige   = Space(Schema '.' NAME, 0)

AUSWKZ    = "PG"
tabnr     = tabnr     + 1
LUWTABLE  = "LUWTB"tabnr
COLTAB    = "COLTB"tabnr
TBCOL     = "TBCOL"tabnr
object    = Space(COLLID '.' SPECIFICNAME, 0)
Object2   = ""
Object3   = ""
Object4   = ""
Object5   = ""
Tablespace= ""
DATABASE  = ""
STGROUP   = ""
ListObject= ""
CZEILE  = ""
call Lesen_daten

address ispexec 'TBOPEN  'COLTAB
address ispexec 'TBTOP   'COLTAB
address ispexec 'TBSKIP  'COLTAB
address ispexec 'TBGET   'COLTAB

DROP Auto_Parse_Cols.
Call Auto_Parse

tabnr     = tabnr     - 1
LUWTABLE  = "LUWTB"tabnr
COLTAB    = "COLTB"tabnr
TBCOL     = "TBCOL"tabnr

Select
 WHEN SQL_DATA_ACCESS   = "R" THEN SQLDATA  = "1"
 WHEN SQL_DATA_ACCESS   = "M" THEN SQLDATA  = "2"
 WHEN SQL_DATA_ACCESS   = "C" THEN SQLDATA  = "3"
 WHEN SQL_DATA_ACCESS   = "N" THEN SQLDATA  = "4"
 OTHERWISE                         SQLDATA  = ""
 End

PGOWNER              = LEFT(OWNER                     ,  8, ' ')
PGQUALIFIER          = LEFT(QUALIFIER                 ,  8, ' ')
PGDEFERPREP          = LEFT(DEFERPREP                 ,  1, ' ')
PGDEGREE             = LEFT(DEGREE                    ,  1, ' ')
PGDYNAMICRULES       = LEFT(DYNAMICRULES              ,  1, ' ')
PGENCODING_CCSID     = LEFT(ENCODING_CCSID            ,  5, ' ')
PGEXPLAIN            = LEFT(EXPLAIN                   ,  1, ' ')
PGIMMEDWRITE         = LEFT(IMMEDWRITE                ,  1, ' ')
PGISOLATION          = LEFT(ISOLATION                 ,  2, ' ')
PGKEEPDYNAMIC        = LEFT(KEEPDYNAMIC               ,  1, ' ')
PGOPTHINT            = LEFT(OPTHINT                   , 10, ' ')
PGRELEASE            = LEFT(RELEASE                   ,  1, ' ')
PGREOPTVAR           = LEFT(REOPTVAR                  ,  1, ' ')
PGVALIDATE           = LEFT(VALIDATE                  ,  1, ' ')
PGCONC_STMT          = LEFT(CONC_STMT                 ,  1, ' ')
PGAPPLCOMPAT         = LEFT(APPLCOMPAT                , 10, ' ')
PGDEC31              = LEFT(DEC31                     ,  1, ' ')
CONCUR_ACC_RES       = LEFT(CONCUR_ACC_RES            ,  1, ' ')
PGSYSTIMESENSITIVE   = LEFT(SYSTIMESENSITIVE          ,  1, ' ')
PGBUSTIMESENSITIVE   = LEFT(BUSTIMESENSITIVE          ,  1, ' ')
PGARCHIVESENSITIVE   = LEFT(ARCHIVESENSITIVE          ,  1, ' ')
PGRECORDTEMPORALHIST = LEFT(RECORDTEMPORALHIST        ,  1, ' ')

select
  When PGISOLATION  = "R"  THEN   PGISOLATION = "RR"
  When PGISOLATION  = "S"  THEN   PGISOLATION = "CS"
  When PGISOLATION  = "T"  THEN   PGISOLATION = "RS"
  When PGISOLATION  = "U"  THEN   PGISOLATION = "UR"
  OTHERWISE                       PGISOLATION = "CS"
 End

select
  When PGDEFERPREP  = "B"  THEN   PGDEFERPREP = "NO "
  When PGDEFERPREP  = "A"  THEN   PGDEFERPREP = "YES"
  When PGDEFERPREP  = "C"  THEN   PGDEFERPREP = "YES"
  OTHERWISE                       PGDEFERPREP = "NO "
 End

area.0  = 44
area.1  = white"Alter "Alter_Type"  "Anzeige
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"   "keyw"WLM_ENVIRONMENT "in1 || WLMENV        || endin
area.6  = white"   "keyw"PARAMETER_CCSID "in1 ||PARAMETER_CCSID|| endin,
               "A=ASCII, E=EBCDIC, U=UNICODE "     || endin
area.7  = white"   "keyw"RESULT_SETS     "in1 || RESULT_SETS  || endin,
               "    ANZAHL RESULT SETS   "             || endin
area.8  = white"   "keyw"COMMIT_ON_RETURN"in1 || COMMITRETURN || endin,
               "       Y/N "                 || endin
area.9  = white"   "keyw"DETERMINISTIC   "in1 || DETERMINISTIC ||endin,
               "       Y/N "           || endin
area.10 = white"   "keyw"SPECIAL_REGS    "in1 || SPECIAL_REGS || endin,
               "       I=INHERIT, D=DEFAULT "             || endin
area.11 = white"   "keyw"ASUTIME         "in1 || ASUTIME      || endin,
               "    0=NO LIMIT > 0 LIMIT "             || endin
area.12 = white"   "keyw"SQLDATA         "in1 || SQLDATA       || endin
area.13 = white"           1 READS SQL DATA    "               || endin
area.14 = white"           2 MODIFIES SQL DATA "               || endin
area.15 = white"           3 CONTAINS SQL "                    || endin
area.16 = white"           4 NOSQL        "                    || endin
area.17 = white"   "
area.18 = white"   "keyw"DATE_FORMAT      "in1|| DATE_FORMAT   || endin,
               "ISO, EUR, USA, JIS, Local        "
area.19 = white"   "keyw"TIME_FORMAT      "in1|| TIME_FORMAT   || endin,
               "ISO, EUR, USA, JIS, Local        "
area.20 = white"   "keyw"PGOWNER          "in1 ||PGOWNER       || endin,
               "PACKAGE OWNER        "             || endin
area.21 = white"   "keyw"PGQUALIFIER      "in1 || PGQUALIFIER  || endin,
               "PACKAGE QUALIFIER    "             || endin
area.22 = white"   "keyw"PGENCODING_CCSID " || in1 ,
                    PGENCODING_CCSID|| endin,
               "  A=ASCII, E=EBCDIC, U=UNICODE "   || endin
area.23 = white"   "keyw"PGDEFERPREP      "in1|| PGDEFERPREP   || endin,
               "N=NODEFER, Y=DEFER I=PACKAGE   "
area.24 = white"   "keyw"PGDEGREE         "in1|| PGDEGREE      || endin,
               "  1, ANY                       "   || endin
area.25 = white"   "keyw"PGDYNAMICRULES   "in1|| PGDYNAMICRULES|| endin,
               "  B=BIND        R=RUN                     "
area.26 = white || COPIES(' ',27) || "D=DEFINEBIND, E=DEFINERUN "
area.27 = white || COPIES(' ',27) || "H=INVOKEBIND, E=INVOKERUN "
area.28 = white"   "keyw"PGEXPLAIN        "in1|| PGEXPLAIN     || endin,
               "  N=NO, Y=YES                      "
area.29 = white"   "keyw"PGIMMEDWRITE     "in1|| PGIMMEDWRITE  || endin,
               "  N=NO, Y=YES, 1=PH1               "
area.30 = white"   "keyw"PGISOLATION      "in1|| PGISOLATION   || endin,
               " CS,RR, RS, UR                    "
area.31 = white"   "keyw"PGKEEPDYNAMIC    "in1|| PGKEEPDYNAMIC || endin,
               "  N=NO, Y=YES                      "
area.32 = white"   "keyw"PGOPTHINT        "in1|| PGOPTHINT     || endin,
               "  OPTHINT IN PLANTABLE             "
area.33 = white"   "keyw"PGRELEASE        "in1|| PGRELEASE     || endin,
               "  C=COMMIT, D=DEALLOCATE, I=PACKAGE "
area.34 = white"   "keyw"PGREOPTVAR       "in1|| PGREOPTVAR    || endin,
               "  A=AUTO, N=NONE, Y=ALWAYS, 1=ONCE "
area.35 = white"   "keyw"PGVALIDATE       "in1|| PGVALIDATE    || endin,
               "  B=BIND, R=RUN                    "
area.36 = white"   "keyw"PGCONC_STMT      "in1|| PGCONC_STMT   || endin,
               "  N=NO, Y=YES                      "
area.37 = white"   "keyw"PGAPPLCOMPAT     "in1|| PGAPPLCOMPAT  || endin,
               "  APPLICATION COMPATIBILITY        "
area.38 = white"   "keyw"PGDEC31          "in1|| PGDEC31       || endin,
               "  N=NO, Y=YES                      "
area.39 = white"   "keyw"CONCUR_ACC_RES   "in1|| ,
                   CONCUR_ACC_RES || endin ,
               "  U=USECURRENTLYCOMMITTED, W=WAITFOROUTCOME "
area.40 = white"   "keyw"SYSTIMESENSITIVE "in1 || ,
                   PGSYSTIMESENSITIVE|| endin ,
               "  N=NO, Y=YES                      "
area.41 = white"   "keyw"BUSTIMESENSITIVE "in1 || ,
                   PGBUSTIMESENSITIVE|| endin ,
               "  N=NO, Y=YES                      "
area.42 = white"   "keyw"ARCHIVESENSITIVE "in1 || ,
                   PGARCHIVESENSITIVE|| endin ,
               "  N=NO, Y=YES                      "

area.43 = white"   "
area.44 = white"   "

Call Anzeige_Dyn_Panel

OK = Nexttab( "--     ", al.)

If PARAMETER_CCSID_val  <>     PARAMETER_CCSID   ,
 & PARAMETER_CCSID_val  <> "PARAMETER_CCSID_VAL" Then Do
   select
     WHEN Substr(PARAMETER_CCSID_val, 1, 1) = "A"  Then Do
          Alter_type    = "CCSID ASCII           "
      End
     WHEN Substr(PARAMETER_CCSID_val, 1, 1) = "E"  Then Do
          Alter_type    = "CCSID EBCDIC          "
      End
     OTHERWISE  DO
          Alter_type    = "CCSID UNICODE         "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If RESULT_SETS_val  <>          RESULT_SETS  ,
 & RESULT_SETS_val  <> "RESULT_SETS_VAL "     Then Do
   select
     WHEN Datatype(RESULT_SETS_Val)     <> "NUM" Then Do
          Alter_type    = "DYNAMIC RESULT SETS 0 "
      End
     WHEN RESULT_SETS_Val                < "1"  THEN Do
          Alter_type    = "DYNAMIC RESULT SETS 0 "
      End
     OTHERWISE  DO
          Alter_type    = "DYNAMIC RESULT SETS "RESULT_SETS_Val
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If COMMIT_ON_RETURN_val  <>     COMMITRETURN  ,
 & COMMIT_ON_RETURN_val  <>  "COMMIT_ON_RETURN_VAL" Then Do
   Select
     WHEN COMMIT_ON_RETURN_val = "N" Then Do
          Alter_type  =   "COMMIT ON RETURN NO  "
      END
     WHEN COMMIT_ON_RETURN_val = "Y" Then Do
          Alter_type  =   "COMMIT ON RETURN YES "
      END
     OTHERWISE Do
          Alter_type  =   "COMMIT ON RETURN YES "
      END
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If DETERMINISTIC_val  <>        DETERMINISTIC  ,
 & DETERMINISTIC_val  <>  "DETERMINISTIC_VAL"  Then Do
   Select
     WHEN DETERMINISTIC_Val  = "N" Then Do
          Alter_type  =   "NOT DETERMINISTIC "
      END
     WHEN DETERMINISTIC_Val  = "Y" Then Do
          Alter_type  =   "DETERMINISTIC "
      END
     OTHERWISE Do
          Alter_type  =   "DETERMINISTIC "
      END
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If SPECIAL_REGS_val  <>         SPECIAL_REGS  ,
 & SPECIAL_REGS_val  <>   "SPECIAL_REGS_VAL"  Then Do
   select
     WHEN SPECIAL_REGS_Val               = "D"  THEN Do
          Alter_type    = "DEFAULT SPECIAL REGISTERS "
      End
     WHEN SPECIAL_REGS_Val               = "I"  THEN Do
          Alter_type    = "INHERIT SPECIAL REGISTERS "
      End
     OTHERWISE  DO
          Alter_type    = "DEFAULT SPECIAL REGISTERS "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If ASUTIME_val  <>              ASUTIME       ,
 & ASUTIME_val  <>  "ASUTIME_VAL"             Then Do
   select
     WHEN Datatype(ASUTIME_val    )     <> "NUM" Then Do
          Alter_type    = "ASUTIME NO LIMIT "
      End
     WHEN ASUTIME_val                    < "1"  THEN Do
          Alter_type    = "ASUTIME NO LIMIT "
      End
     OTHERWISE  DO
          Alter_type    = "ASUTIME LIMIT " ASUTIME_val
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If SQLDATA_val  <>              SQLDATA        ,
 & SQLDATA_val  <>     "SQLDATA_VAL"           Then Do
   Select
     WHEN SQLDATA_val        = "1" Then Do
          Alter_type  =   "READS SQL DATA    "
      END
     WHEN SQLDATA_val        = "2" Then Do
          Alter_type  =   "MODIFIES SQL DATA "
      END
     WHEN SQLDATA_val        = "3" Then Do
          Alter_type  =   "CONTAINS SQL      "
      END
     WHEN SQLDATA_val        = "4" Then Do
          Alter_type  =   "NOSQL             "
      END
     OTHERWISE Do
          Alter_type  =   "CONTAINS SQL      "
      END
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PGOWNER_val  <>             PGOWNER  ,
 & PGOWNER_val  <>  "PGOWNER_VAL"             Then Do
   Alter_Type = "PACKAGE OWNER"PGOWNER_val
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PGQUALIFIER_val  <>          PGQUALIFIER  ,
 & PGQUALIFIER_val  <>  "PGQUALIFIER_VAL"     Then Do
   Alter_Type = "QUALIFIER "PGQUALIFIER_val
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PGENCODING_CCSID_val  <> PGENCODING_CCSID       ,
 & PGENCODING_CCSID_val  <> "PGENCODING_CCSID_VAL" Then Do
   select
     WHEN Substr(PGENCODING_CCSID_val, 1, 1) = "A"  Then Do
          Alter_type    = "PARAMETER CCSID  ASCII"
      End
     WHEN Substr(PGENCODING_CCSID_val, 1, 1) = "E"  Then Do
          Alter_type    = "PARAMETER CCSID  EBCDIC "
      End
     OTHERWISE  DO
          Alter_type    = "PARAMETER CCSID  UNICODE "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PGDEFERPREP_val  <>          PGDEFERPREP   ,
 & PGDEFERPREP_val  <>  "PGDEFERPREP_VAL"      Then Do
   select
     WHEN Substr(PGDEFERPREP_val     , 1, 1) = "N"  Then Do
          Alter_type    = "NODEFER PREPARE  "
      End
     WHEN Substr(PGDEFERPREP_val     , 1, 1) = "Y"  Then Do
          Alter_type    = "  DEFER PREPARE  "
      End
     OTHERWISE  DO
          Alter_type    = "  DEFER PREPARE  "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PGDEGREE_val  <>             PGDEGREE   ,
 & PGDEGREE_val  <>  "PGDEGREE_VAL"            Then Do
   select
     WHEN Substr(PGDEGREE_val        , 1, 1) = "A"  Then Do
          Alter_type    = "DEGREE ANY       "
      End
     WHEN Substr(PGDEGREE_val        , 1, 1) = "Y"  Then Do
          Alter_type    = "DEGREE 1         "
      End
     OTHERWISE  DO
          Alter_type    = "DEGREE 1         "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PGDYNAMICRULES_val  <>       PGDYNAMICRULES ,
 & PGDYNAMICRULES_val  <>  "PGDYNAMICRULES_VAL" Then Do
   select
     WHEN Substr(PGDYNAMICRULES_val  , 1, 1) = "R"  Then Do
          Alter_type    = "DYNAMICRULES RUN "
      End
     WHEN Substr(PGDYNAMICRULES_val  , 1, 1) = "B"  Then Do
          Alter_type    = "DYNAMICRULES BIND"
      End
     WHEN Substr(PGDYNAMICRULES_val  , 1, 2) = "DB"  Then Do
          Alter_type    = "DYNAMICRULES DEFINEBIND "
      End
     WHEN Substr(PGDYNAMICRULES_val  , 1, 2) = "DB"  Then Do
          Alter_type    = "DYNAMICRULES DEFINERUN  "
      End
     WHEN Substr(PGDYNAMICRULES_val  , 1, 2) = "IB"  Then Do
          Alter_type    = "DYNAMICRULES INVOKEBIND "
      End
     WHEN Substr(PGDYNAMICRULES_val  , 1, 2) = "IR"  Then Do
          Alter_type    = "DYNAMICRULES INVOKERUN "
      End
     OTHERWISE  DO
          Alter_type    = "DYNAMICRULES RUN "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END


If PGEXPLAIN_val  <>            PGEXPLAIN  ,
 & PGEXPLAIN_val  <>  "PGEXPLAIN_VAL"          Then Do
   select
     WHEN Substr(PGEXPLAIN_val       , 1, 1) = "N"  Then Do
          Alter_type    = "WITHOUT EXPLAIN  "
      End
     WHEN Substr(PGEXPLAIN_val       , 1, 1) = "N"  Then Do
          Alter_type    = "WITH    EXPLAIN  "
      End
     OTHERWISE  DO
          Alter_type    = "WITH    EXPLAIN  "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PGIMMEDWRITE_val  <>         PGIMMEDWRITE  ,
 & PGIMMEDWRITE_val  <>    "PGIMMEDWRITE_VAL"  Then Do
   select
     WHEN Substr(PGIMMEDWRITE_val    , 1, 1) = "N"  Then Do
          Alter_type    = "WITHOUT IMMEDIATE WRITE "
      End
     WHEN Substr(PGIMMEDWRITE_val    , 1, 1) = "N"  Then Do
          Alter_type    = "WITH    IMMEDIATE WRITE "
      End
     OTHERWISE  DO
          Alter_type    = "WITH    IMMEDIATE WRITE "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PGISOLATION_val  <>          PGISOLATION   ,
 & PGISOLATION_val  <> "PGISOLATION_VAL"       Then Do
   select
     WHEN Substr(PGISOLATION_val     , 1, 2) = "RR" Then Do
          Alter_type    = "ISOLATION LEVEL RR      "
      End
     WHEN Substr(PGISOLATION_val     , 1, 2) = "RS" Then Do
          Alter_type    = "ISOLATION LEVEL RS      "
      End
     WHEN Substr(PGISOLATION_val     , 1, 2) = "CS" Then Do
          Alter_type    = "ISOLATION LEVEL CS      "
      End
     WHEN Substr(PGISOLATION_val     , 1, 2) = "UR" Then Do
          Alter_type    = "ISOLATION LEVEL UR      "
      End
     OTHERWISE  DO
          Alter_type    = "ISOLATION LEVEL CS      "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PGKEEPDYNAMIC_val  <>        PGKEEPDYNAMIC ,
 & PGKEEPDYNAMIC_val  <> "PGKEEPDYNAMIC_VAL"   Then Do
   select
     WHEN Substr(PGKEEPDYNAMIC_val   , 1, 1) = "N"  Then Do
          Alter_type    = "WITHOUT KEEP DYNAMIC    "
      End
     WHEN Substr(PGKEEPDYNAMIC_val   , 1, 1) = "Y"  Then Do
          Alter_type    = "WITH    KEEP DYNAMIC    "
      End
     OTHERWISE  DO
          Alter_type    = "WITH    KEEP DYNAMIC    "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PGOPTHINT_val  <>            PGOPTHINT ,
 & PGOPTHINT_val  <>   "PGOPTHINT_VAL"         Then Do
   select
     WHEN PGOPTHINT_val                      = ""   Then Do
          Alter_type    = "OPTHINT ''     "
      End
     OTHERWISE  DO
          Alter_type    = "OPTHINT "PGOPTHINT_val
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PGRELEASE_val  <>            PGRELEASE  ,
 & PGRELEASE_val  <>      "PGRELEASE_VAL"      Then Do
   select
     WHEN Substr(PGRELEASE_val       , 1, 1) = "D"  Then Do
          Alter_type    = "RELEASE AT DEALLOCATE "
      End
     OTHERWISE  DO
          Alter_type    = "RELEASE AT COMMIT "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PGREOPTVAR_val  <>           PGREOPTVAR   ,
 & PGREOPTVAR_val  <>   "PGREOPTVAR_VAL"       Then Do
   select
     WHEN Substr(PGREOPTVAR_val      , 1, 1) = "N"  Then Do
          Alter_type    = "REOPT NONE              "
      End
     WHEN Substr(PGKEEPDYNAMIC_val   , 1, 1) = "A"  Then Do
          Alter_type    = "REOPT ALWAYS            "
      End
     WHEN Substr(PGKEEPDYNAMIC_val   , 1, 1) = "O"  Then Do
          Alter_type    = "REOPT ONCE              "
      End
     OTHERWISE  DO
          Alter_type    = "REOPT ALWAYS            "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PGVALIDATE_val  <>           PGVALIDATE  ,
 & PGVALIDATE_val  <>   "PGVALIDATE_VAL"       Then Do
   select
     WHEN Substr(PGRELEASE_val       , 1, 1) = "B"  Then Do
          Alter_type    = "VALIDATE BIND         "
      End
     OTHERWISE  DO
          Alter_type    = "VALIDATE RUN      "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PGCONC_STMT_val  <>          PGCONC_STMT ,
 & PGCONC_STMT_val  <>    "PGCONC_STMT_VAL"    Then Do
   select
     WHEN Substr(PGRELEASE_val       , 1, 1) = "N"  Then Do
          Alter_type    = "CONCENTRATE STATEMENTS  OFF "
      End
     OTHERWISE  DO
          Alter_type    = "CONCENTRATE STATEMENTS  WITH LITERALS"
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PGAPPLCOMPAT_val  <>         PGAPPLCOMPAT  ,
 & PGAPPLCOMPAT_val  <> "PGAPPLCOMPAT_VAL"     Then Do
   Alter_type    = "APPLCOMPAT "PGAPPLCOMPAT_val
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PGDEC31_val  <>              PGDEC31   ,
 & PGDEC31_val  <> "PGDEC31_VAL"               Then Do
   select
     WHEN PGDEC31_val  <> "NUM"           Then Do
          Alter_type    = "DECIMAL(31) "
      End
     WHEN PGDEC31_val                 = "31" Then Do
          Alter_type    = "DECIMAL(31) "
      End
     WHEN PGDEC31_val                 = "15" Then Do
          Alter_type    = "DECIMAL(15) "
      End
     OTHERWISE  DO
          Alter_type    = "DECIMAL(31) "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If CONCUR_ACC_RES_val  <>  CONCUR_ACC_RES       ,
 & CONCUR_ACC_RES_val  <>  "CONCUR_ACC_RES_VAL" Then Do
   select
     WHEN Substr(CONCUR_ACC_RES_val , 1, 1) =  "U" Then Do
          Alter_type    = "CONCURRENT ACCESS RESOLUTION " || ,
                          "USE CURRENTLY COMMITTED "
      End
     WHEN Substr(CONCUR_ACC_RES_val , 1, 1) =  "W" Then Do
          Alter_type    = "CONCURRENT ACCESS RESOLUTION " || ,
                          "WAIT FOR OUTCOME        "
      End
     OTHERWISE  DO
          Alter_type    = "CONCURRENT ACCESS RESOLUTION " || ,
                          "USE CURRENTLY COMMITTED "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If SYSTIMESENSITIVE_val  <> PGSYSTIMESENSITIVE     ,
 & SYSTIMESENSITIVE_val  <> "SYSTIMESENSITIVE_VAL" Then Do
   select
     WHEN Substr(SYSTIMESENSITIVE_val,  1, 1) =  "Y" Then Do
          Alter_type    = "SYSTEM_TIME SENSITIVE YES    "
      End
     WHEN Substr(SYSTIMESENSITIVE_val,  1, 1) =  "N" Then Do
          Alter_type    = "SYSTEM_TIME SENSITIVE NO     "
      End
     OTHERWISE  DO
          Alter_type    = "SYSTEM_TIME SENSITIVE YES    "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If BUSTIMESENSITIVE_val  <>     PGBUSTIMESENSITIVE ,
 & BUSTIMESENSITIVE_val  <>     "BUSTIMESENSITIVE_VAL" Then Do
   select
     WHEN Substr(BUSTIMESENSITIVE_val , 1, 1) =  "Y" Then Do
          Alter_type    = "BUSINESS_TIME SENSITIVE YES  "
      End
     WHEN Substr(BUSTIMESENSITIVE_val , 1, 1) =  "N" Then Do
          Alter_type    = "BUSINESS_TIME SENSITIVE NO   "
      End
     OTHERWISE  DO
          Alter_type    = "BUSINESS_TIME SENSITIVE YES  "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If ARCHIVESENSITIVE_val  <>  PGARCHIVESENSITIVE ,
 & ARCHIVESENSITIVE_val  <>  "ARCHIVESENSITIVE_VAL" Then Do
   select
     WHEN Substr(ARCHIVESENSITIVE_val , 1, 1) =  "Y" Then Do
          Alter_type    = "ARCHIVE SENSITIVE       YES  "
      End
     WHEN Substr(ARCHIVESENSITIVE_val , 1, 1) =  "N" Then Do
          Alter_type    = "ARCHIVE SENSITIVE       NO   "
      End
     OTHERWISE  DO
          Alter_type    = "ARCHIVE SENSITIVE       YES  "
      End
    End
   OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME  , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If DATE_FORMAT_Val       <>  DATE_FORMAT ,
 & DATE_FORMAT_Val       <>  "DATE_FORMAT_VAL"      Then Do
   select
     WHEN Substr(DATE_FORMAT_Val      , 1, 1) =  "I" Then Do
          Alter_type    = "DATE FORMAT  ISO             "
      End
     WHEN Substr(DATE_FORMAT_Val      , 1, 1) =  "E" Then Do
          Alter_type    = "DATE FORMAT  EUR             "
      End
     WHEN Substr(DATE_FORMAT_Val      , 1, 1) =  "U" Then Do
          Alter_type    = "DATE FORMAT  USA             "
      End
     WHEN Substr(DATE_FORMAT_Val      , 1, 1) =  "J" Then Do
          Alter_type    = "DATE FORMAT  JIS             "
      End
     WHEN Substr(DATE_FORMAT_Val      , 1, 1) =  "L" Then Do
          Alter_type    = "DATE FORMAT  LOCAL           "
      End
     OTHERWISE  DO
          Alter_type    = ""
      End
    End
   If Alter_type <> "" Then Do
      OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME , 0) , al. )
      OK = Nexttab( "     "ALTER_TYPE                           , al.)
      OK = Nexttab( " ;                        ", al.)
    End
 END

If TIME_FORMAT_Val       <>  TIME_FORMAT ,
 & TIME_FORMAT_Val       <>  "TIME_FORMAT_VAL"      Then Do
   select
     WHEN Substr(TIME_FORMAT_Val      , 1, 1) =  "I" Then Do
          Alter_type    = "TIME FORMAT  ISO             "
      End
     WHEN Substr(TIME_FORMAT_Val      , 1, 1) =  "E" Then Do
          Alter_type    = "TIME FORMAT  EUR             "
      End
     WHEN Substr(TIME_FORMAT_Val      , 1, 1) =  "U" Then Do
          Alter_type    = "TIME FORMAT  USA             "
      End
     WHEN Substr(TIME_FORMAT_Val      , 1, 1) =  "J" Then Do
          Alter_type    = "TIME FORMAT  JIS             "
      End
     WHEN Substr(TIME_FORMAT_Val      , 1, 1) =  "L" Then Do
          Alter_type    = "TIME FORMAT  LOCAL           "
      End
     OTHERWISE  DO
          Alter_type    = ""
      End
    End
   If Alter_type <> "" Then Do
      OK = Nexttab( "Alter Procedure "Space(Schema '.' NAME , 0) , al. )
      OK = Nexttab( "     "ALTER_TYPE                           , al.)
      OK = Nexttab( " ;                        ", al.)
    End
 END

Return


Alter_Function_EXTERNAL:

WLMENV            = Left(WLM_ENVIRONMENT           , 50, ' ')
extname           = LEFT(EXTERNAL_NAME             , 50, ' ')
LANGUAGE          = LEFT(LANGUAGE                  , 10, ' ')
PARMSTYLE         = LEFT(PARAMETER_STYLE           ,  1, ' ')
DETERMINISTIC     = LEFT(DETERMINISTIC             ,  1, ' ')
COMMITRETURN      = LEFT(COMMIT_ON_RETURN          ,  1, ' ')
EXTACTION         = LEFT(EXTERNAL_ACTION           ,  1, ' ')
SCRATCHPAD        = LEFT(SCRATCHPAD                ,  1, ' ')
SCRATCHPAD_LEN    = LEFT(SCRATCHPAD_LENGTH         ,  8, ' ')
SQL_DATA_ACCESS   = LEFT(SQL_DATA_ACCESS           ,  1, ' ')
FINALCALL         = LEFT(FINAL_CALL                ,  1, ' ')
PARALLEL          = LEFT(PARALLEL                  ,  1, ' ')
DBINFO            = LEFT(DBINFO                    ,  1, ' ')
COLLID            = LEFT(COLLID                    , 50, ' ')
ASUTIME           = LEFT(ASUTIME                   ,  6, ' ')
STAYRESIDENT      = LEFT(STAYRESIDENT              ,  1, ' ')
PROGRAM_TYPE      = LEFT(PROGRAM_TYPE              ,  1, ' ')
EXT_SECURITY      = LEFT(EXTERNAL_SECURITY         ,  7, ' ')
SECURE            = LEFT(SECURE                    ,  1, ' ')
MAX_FAILURE       = LEFT(MAX_FAILURE               ,  5, ' ')
CARDINALITY       = LEFT(CARDINALITY               , 10, ' ')
SQLDATA           = LEFT(1                         ,  1, ' ')
SPECIAL_REGS      = LEFT(SPECIAL_REGS              ,  1, ' ')

Select
 WHEN SQL_DATA_ACCESS   = "R" THEN SQLDATA  = "1"
 WHEN SQL_DATA_ACCESS   = "M" THEN SQLDATA  = "2"
 WHEN SQL_DATA_ACCESS   = "C" THEN SQLDATA  = "3"
 WHEN SQL_DATA_ACCESS   = "N" THEN SQLDATA  = "4"
 OTHERWISE                         SQLDATA  = ""
 End

area.0  = 33
area.1  = white"Alter "Alter_Type"  " Space(Schema '.' NAME, 0)
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"   "keyw"WLM_ENVIRONMENT "in1 || WLMENV        || endin
area.6  = white"   "keyw"EXTERNAL_NAME   "in1 || extname       || endin,
               "  path/module/function that Db2 should load "
area.7  = white"        LANGUAGE : ASSEMBLE,C,COBOL,JAVA,PLI,REXX   "
area.8  = white"   "keyw"LANGUAGE        "in1 || LANGUAGE     || endin
area.9  = white"   "keyw"DETERMINISTIC   "in1 || DETERMINISTIC ||endin,
               "       Y/N "           || endin
area.10 = white"   "keyw"EXTERNAL_ACTION "in1 || EXTACTION     || endin,
               "  N=NO, E=HAS EXTERNAL ACTION   "               endin
area.11 = white"   "keyw"PARAMETER_STYLE "in1 || PARMSTYLE     || endin,
               "  D=DB2SQL, G=GENERAL, J=JAVA, N=GENERAL WITH NULLS"
area.12 = white"   "keyw"COMMIT_ON_RETURN"in1 || COMMITRETURN  || endin,
               "  Y/N "                                       || endin
area.13 = white"   "keyw"SQLDATA         "in1 || SQLDATA       || endin
area.14 = white"           1 READS SQL DATA    "               || endin
area.15 = white"           2 MODIFIES SQL DATA "               || endin
area.16 = white"           3 CONTAINS SQL "                    || endin
area.17 = white"           4 NOSQL        "                    || endin
area.18 = white"   "keyw"SCRATCHPAD      "in1 || SCRATCHPAD    || endin,
               "  Y/N          "
area.19 = white"   "keyw"SCRATCHPAD_LEN  "in1 || SCRATCHPAD_LEN|| endin,
               "               "
area.20 = white"   "keyw"FINAL_CALL      "in1 || FINALCALL     || endin,
               "  Y/N          "
area.21 = white"   "keyw"PARALLEL        "in1 || PARALLEL      || endin,
               "  A=PARALLEL, D=NOT PARALLEL "
area.22 = white"   "keyw"DBINFO          "in1 || DBINFO        || endin,
               "  Y/N          "
area.23 = white"   "keyw"COLLID          "in1 || COLLID        || endin,
               "  PACKAGE COLLECTION "
area.24 = white"   "keyw"ASUTIME         "in1 || ASUTIME       || endin,
               "  0=NO LIMIT > 0 LIMIT "                       || endin
area.25 = white"   "keyw"STAYRESIDENT    "in1 || STAYRESIDENT  || endin,
               "  Y/N "                                       || endin
area.26 = white"   "keyw"PROGRAM_TYPE    "in1 || PROGRAM_TYPE  || endin,
               "  M=MAIN, S=SUB"                              || endin
area.27 = white"   "keyw"EXT_SECURITY    "in1 || EXT_SECURITY  || endin,
               "  USER, DB2, DEFINER  "
area.28 = white"   "keyw"SECURE          "in1 || SECURE        || endin,
               "  Y/N "                                       || endin
area.29 = white"   "keyw"MAX_FAILURE     "in1 || MAX_FAILURE   || endin,
               "  -1 - 32757 "
area.30 = white"   "keyw"CARDINALITY     "in1 || CARDINALITY   || endin,
               "ANZAHL 0 - 2147483647 "
area.31 = white"   "keyw"SPECIAL_REGS    "in1 || SPECIAL_REGS || endin,
               "       I=INHERIT, D=DEFAULT "             || endin
area.32 = white"   "
area.33 = white"   "



Call Anzeige_Dyn_Panel

OK = Nexttab( "--     ", al.)
If WLM_ENVIRONMENT_Val <> WLMENV   Then do
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "      WLM ENVIRONMENT " WLM_ENVIRONMENT_Val, al.)
   OK = Nexttab( " ;                        ", al.)
 End


If EXTERNAL_NAME_val  <>        EXTNAME        Then Do
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "      EXTERNAM NAME   " EXTERNAL_NAME_val  , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If LANGUAGE_val  <>             LANGUAGE      Then Do
   Select
     When Substr(LANGUAGE_val, 1, 1) = "A"    THEN  do
       LANGUAGE_val = "ASSEMBLE"
      End
     When Substr(LANGUAGE_val, 1, 3) = "COB"  THEN  do
       LANGUAGE_val = COBOL
      End
     When Substr(LANGUAGE_val, 1, 3) = "COM"  THEN  do
       LANGUAGE_val = COMPJAVA
      End
     When Substr(LANGUAGE_val, 1, 1) = "C"    THEN  do
       LANGUAGE_val = "C"
      End
     When Substr(LANGUAGE_val, 1, 1) = "J"    THEN  do
       LANGUAGE_val = "JAVA"
      End
     When Substr(LANGUAGE_val, 1, 1) = "P"    THEN  do
       LANGUAGE_val = "PLI"
      End
     When Substr(LANGUAGE_val, 1, 1) = "R"    THEN  do
       LANGUAGE_val = "REXX"
      End
     When Substr(LANGUAGE_val, 1, 1) = "S"    THEN  do
       LANGUAGE_val = "SQL"
      End
     Otherwise Do
       LANGUAGE_val = "SQL"
      End
    End
   ALTER_TYPE  = "LANGUAGE "Strip(LANGUAGE_val)
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "      "ALTER_TYPE              , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If DETERMINISTIC_val  <>        DETERMINISTIC  Then Do
   Select
     WHEN DETERMINISTIC_Val  = "N" Then Do
          Alter_type  =   "NOT DETERMINISTIC "
      END
     WHEN DETERMINISTIC_Val  = "Y" Then Do
          Alter_type  =   "DETERMINISTIC "
      END
     OTHERWISE Do
          Alter_type  =   "DETERMINISTIC "
      END
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If EXTERNAL_ACTION_val  <>      EXTACTION      Then Do
   Select
     When EXTERNAL_ACTION_Val = "N" THEN DO
          ALTER_TYPE = "NO EXTERNAL ACTION"
      End
     When EXTERNAL_ACTION_Val = "E" THEN DO
          ALTER_TYPE = "EXTERNAL ACTION"
      End
     OTHERWISE  Do
          ALTER_TYPE = "NO EXTERNAL ACTION"
      End
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PARAMETER_STYLE_val  <>      PARMSTYLE      Then Do
   Select
     When Substr(PARAMETER_STYLE_val, 1, 1) = "G" THEN do
       PARAMETER_STYLE_val = "GENERAL"
      End
     When Substr(PARAMETER_STYLE_val, 1, 1) = "N" THEN do
       PARAMETER_STYLE_val = "GENERAL WITH NULLS"
      End
     When Substr(PARAMETER_STYLE_val, 1, 1) = "J" THEN do
       PARAMETER_STYLE_val = "JAVA"
      End
     When Substr(PARAMETER_STYLE_val, 1, 1) = "S" THEN do
       PARAMETER_STYLE_val = "SQL"
      End
     Otherwise Do
       PARAMETER_STYLE_val = "SQL"
      End
    End
   ALTER_TYPE  = "PARAMETER STYLE " PARAMETER_STYLE_val
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "      "ALTER_TYPE              , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If COMMIT_ON_RETURN_val  <>     COMMITRETURN   Then Do
   Select
     WHEN COMMIT_ON_RETURN_val = "N" Then Do
          Alter_type  =   "COMMIT ON RETURN NO  "
      END
     WHEN COMMIT_ON_RETURN_val = "Y" Then Do
          Alter_type  =   "COMMIT ON RETURN YES "
      END
     OTHERWISE Do
          Alter_type  =   "COMMIT ON RETURN YES "
      END
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END


If SQLDATA_val  <>              SQLDATA        Then Do
   Select
     WHEN SQLDATA_val        = "1" Then Do
          Alter_type  =   "READS SQL DATA    "
      END
     WHEN SQLDATA_val        = "2" Then Do
          Alter_type  =   "MODIFIES SQL DATA "
      END
     WHEN SQLDATA_val        = "3" Then Do
          Alter_type  =   "CONTAINS SQL      "
      END
     WHEN SQLDATA_val        = "4" Then Do
          Alter_type  =   "NOSQL             "
      END
     OTHERWISE Do
          Alter_type  =   "CONTAINS SQL      "
      END
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If EXTERNAL_ACTION_val  <>      EXTACTION      Then Do
   Select
     When EXTERNAL_ACTION_Val = "N" THEN DO
          ALTER_TYPE = "NO EXTERNAL ACTION"
      End
     When EXTERNAL_ACTION_Val = "E" THEN DO
          ALTER_TYPE = "EXTERNAL ACTION"
      End
     OTHERWISE  Do
          ALTER_TYPE = "NO EXTERNAL ACTION"
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If SCRATCHPAD_val  <>           SCRATCHPAD     Then Do
   select
     WHEN SCRATCHPAD_val     = "N" Then Do
          Alter_type    = "NO SCRATCHPAD    "
      End
     OTHERWISE  DO
          Alter_type    = "SCRATCHPAD "
          select
            WHEN Datatype(SCRATCHPAD_LEN_val)  <> "NUM" Then Do
                 Alter_type    = Alter_type "0     "
             End
            WHEN Datatype(SCRATCHPAD_LEN_val)   = "NUM" Then Do
                 Alter_type    = Alter_type " "SCRATCHPAD_LEN_val
             End
            OTHERWISE  DO
                 Alter_type    = Alter_type "0     "
             End
           End
      End
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If FINAL_CALL_val  <>           FINALCALL      Then Do
   select
     WHEN FINAL_CALL_val     = "N" Then Do
          Alter_type    = "NO FINAL CALL    "
      End
     OTHERWISE  DO
          Alter_type    = "FINAL CALL    "
      End
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PARALLEL_val  <>             PARALLEL       Then Do
   select
     WHEN PARALLEL_val       = "D" Then Do
          Alter_type    = "DISALLOW PARALLEL"
      End
     OTHERWISE  DO
          Alter_type    = "   ALLOW PARALLEL"
      End
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If DBINFO_val  <>               DBINFO         Then Do
   select
     WHEN DBINFO_val         = "N" Then Do
          Alter_type    = "NO DBINFO        "
      End
     OTHERWISE  DO
          Alter_type    = "DBINFO           "
      End
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If COLLID_val  <>               COLLID         Then Do
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "      COLLIDCOLLID "COLLID_val             , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If ASUTIME_val  <>              ASUTIME        Then Do
   select
     WHEN Datatype(ASUTIME_val    )     <> "NUM" Then Do
          Alter_type    = "ASUTIME NO LIMIT "
      End
     WHEN ASUTIME_val                    < "1"  THEN Do
          Alter_type    = "ASUTIME NO LIMIT "
      End
     OTHERWISE  DO
          Alter_type    = "ASUTIME LIMIT " ASUTIME_val
      End
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If STAYRESIDENT_val  <>         STAYRESIDENT   Then Do
   Select
     WHEN STAYRESIDENT_val   = "Y" Then Do
          Alter_type  =   "STAY RESIDENT YES "
      END
     WHEN STAYRESIDENT_val   = "N" Then Do
          Alter_type  =   "STAY RESIDENT NO  "
      END
     OTHERWISE Do
          Alter_type  =   "STAY RESIDENT YES "
      END
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PROGRAM_TYPE_val  <>         PROGRAM_TYPE   Then Do
   Select
     WHEN PROGRAM_TYPE_val   = "M" Then Do
          Alter_type  =   "PROGRAM TYPE MAIN "
      END
     WHEN PROGRAM_TYPE_val   = "S" Then Do
          Alter_type  =   "PROGRAM TYPE SUB  "
      END
     OTHERWISE Do
          Alter_type  =   "PROGRAM TYPE MAIN "
      END
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If EXT_SECURITY_val  <>         EXT_SECURITY   Then Do
   select
     WHEN SUBSTR(EXT_SECURITY_val, 1, 2) = "DB"  THEN Do
          Alter_type    = "SECURITY DB2"
      End
     WHEN SUBSTR(EXT_SECURITY_Val, 1, 1) = "U"  THEN Do
          Alter_type    = "SECURITY USER"
      End
     WHEN SUBSTR(EXT_SECURITY_Val, 1, 2) = "DE"  THEN Do
          Alter_type    = "SECURITY DEFINER"
      End
     OTHERWISE  DO
          Alter_type    = "SECURITY DB2"
      End
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If SECURE_val  <>               SECURE         Then Do
   Select
     When SECURE_val   = "Y" THEN ALTER_TYPE = "SECURED      "
     When SECURE_val   = "N" THEN ALTER_TYPE = "NOT SECURED  "
     OTHERWISE                    ALTER_TYPE = "SECURED      "
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If MAX_FAILURE_val  <>          MAX_FAILURE    Then Do
   select
     WHEN Datatype(MAX_FAILURE_val)     <> "NUM" Then Do
          Alter_type    = "STOP AFTER SYSTEM DEFAULT FAILURES "
      End
     WHEN MAX_FAILURE_val                < 0     THEN Do
          Alter_type    = "STOP AFTER SYSTEM DEFAULT FAILURES "
      End
     WHEN MAX_FAILURE_val                = "0"  THEN Do
          Alter_type    = "STOP AFTER SYSTEM DEFAULT FAILURES "
      End
     WHEN MAX_FAILURE_val                > "32000" THEN Do
          Alter_type    = "FAILURESSTOP AFTER     30 "
      End
     OTHERWISE  DO
          Alter_type  = "FAILURESSTOP AFTER "MAX_FAILURE_val "FAILURES"
      End
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If CARDINALITY_val  <>          CARDINALITY    Then Do
   Select
     When Datatype(CARDINALITY_Val) <> "NUM" Then Do
          ALTER_TYPE = CARDINALITY
      End
     When CARDINALITY_Val   > 2147483647 Then Do
          ALTER_TYPE = 2147483647
      End
     When CARDINALITY_Val   < 0     Then Do
          ALTER_TYPE = -1
      End
     OTHERWISE Do
          ALTER_TYPE = CARDINALITY_VAL
      END
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "     CARDINALITY "ALTER_TYPE            , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If SPECIAL_REGS_val  <>         SPECIAL_REGS  Then Do
   select
     WHEN SPECIAL_REGS_Val               = "D"  THEN Do
          Alter_type    = "DEFAULT SPECIAL REGISTERS "
      End
     WHEN SPECIAL_REGS_Val               = "I"  THEN Do
          Alter_type    = "INHERIT SPECIAL REGISTERS "
      End
     OTHERWISE  DO
          Alter_type    = "DEFAULT SPECIAL REGISTERS "
      End
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

Return

Alter_Function_SQL_Table:

WLMENV            = Left(WLM_ENVIRONMENT           , 50, ' ')
extname           = LEFT(EXTERNAL_NAME             , 50, ' ')
LANGUAGE          = LEFT(LANGUAGE                  , 10, ' ')
PARMSTYLE         = LEFT(PARAMETER_STYLE           ,  1, ' ')
DETERMINISTIC     = LEFT(DETERMINISTIC             ,  1, ' ')
COMMITRETURN      = LEFT(COMMIT_ON_RETURN          ,  1, ' ')
EXTACTION         = LEFT(EXTERNAL_ACTION           ,  1, ' ')
SCRATCHPAD        = LEFT(SCRATCHPAD                ,  1, ' ')
SQL_DATA_ACCESS   = LEFT(SQL_DATA_ACCESS           ,  1, ' ')
FINALCALL         = LEFT(FINAL_CALL                ,  1, ' ')
PARALLEL          = LEFT(PARALLEL                  ,  1, ' ')
DBINFO            = LEFT(DBINFO                    ,  1, ' ')
COLLID            = LEFT(COLLID                    , 50, ' ')
ASUTIME           = LEFT(ASUTIME                   ,  6, ' ')
STAYRESIDENT      = LEFT(STAYRESIDENT              ,  1, ' ')
PROGRAM_TYPE      = LEFT(PROGRAM_TYPE              ,  1, ' ')
EXT_SECURITY      = LEFT(EXTERNAL_SECURITY         ,  7, ' ')
SECURE            = LEFT(SECURE                    ,  1, ' ')
MAX_FAILURE       = LEFT(MAX_FAILURE               ,  5, ' ')
SQLDATA           = LEFT(1                         ,  1, ' ')
SPECIAL_REGS      = LEFT(SPECIAL_REGS              ,  1, ' ')
CARDINALITY       = LEFT(CARDINALITY               , 10, ' ')

Select
 WHEN SQL_DATA_ACCESS   = "R" THEN SQLDATA  = "1"
 WHEN SQL_DATA_ACCESS   = "M" THEN SQLDATA  = "2"
 WHEN SQL_DATA_ACCESS   = "C" THEN SQLDATA  = "3"
 WHEN SQL_DATA_ACCESS   = "N" THEN SQLDATA  = "4"
 OTHERWISE                         SQLDATA  = "4"
 End


area.0  = 14
area.1  = white"Alter "Alter_Type"  " Space(Schema '.' NAME, 0)
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"   "keyw"SQLDATA         "in1 || SQLDATA       || endin
area.6  = white"           1 READS SQL DATA    "               || endin
area.7  = white"           2 CONTAINS SQL "                    || endin
area.8  = white"   "keyw"DETERMINISTIC   "in1 || DETERMINISTIC || endin,
               "N/Y     "
area.9  = white"   "keyw"EXTERNAL_ACTION "in1 || EXTACTION     || endin,
               "  N=NO, E=HAS EXTERNAL ACTION   "               endin
area.10 = white"   "keyw"SECURE          "in1 || SECURE        || endin,
               "N/Y     "
area.11 = white"   "keyw"SPECIAL_REGS    "in1 || SPECIAL_REGS  || endin,
               "       I=INHERIT, D=DEFAULT "             || endin
area.12 = white"   "keyw"CARDINALITY     "in1 || CARDINALITY   || endin,
               "ANZAHL -1 = Default - 2147483647 "
area.13 = white"   "
area.14 = white"   "


Call Anzeige_Dyn_Panel

OK = Nexttab( "--     ", al.)

If SQLDATA_val          <>   SQLDATA          Then Do
   Select
     When SQLDATA_val = "1"   THEN   ALTER_TYPE = "READS SQL DATA"
     When SQLDATA_val = "2"   THEN   ALTER_TYPE = "CONTAINS SQL "
     OTHERWISE                       ALTER_TYPE = "CONTAINS SQL "
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If DETERMINISTIC_val    <>   DETERMINISTIC    Then Do
   Select
     When DETERMINISTIC_val = "Y" THEN ALTER_TYPE = "DETERMINISTIC"
     When DETERMINISTIC_val = "N" THEN ALTER_TYPE = "NOT DETERMINISTIC"
     OTHERWISE                         ALTER_TYPE = "NOT DETERMINISTIC"
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If EXTERNAL_ACTION_Val    <>   EXTERNAL_ACTION  Then Do
   Select
     When EXTERNAL_ACTION_Val = "N" THEN DO
          ALTER_TYPE = "NO EXTERNAL ACTION"
      End
     When EXTERNAL_ACTION_Val = "E" THEN DO
          ALTER_TYPE = "EXTERNAL ACTION"
      End
     OTHERWISE  Do
          ALTER_TYPE = "NO EXTERNAL ACTION"
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If SECURE_val           <>   SECURE           Then Do
   Select
     When SECURE_val   = "Y" THEN ALTER_TYPE = "SECURED      "
     When SECURE_val   = "N" THEN ALTER_TYPE = "NOT SECURED  "
     OTHERWISE                    ALTER_TYPE = "SECURED      "
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If SPECIAL_REGS_Val     <>   SPECIAL_REGS     ,
 & SPECIAL_REGS_Val     <>   "N"              Then Do
   select
     WHEN SPECIAL_REGS_Val               = "D"  THEN Do
          Alter_type    = "DEFAULT SPECIAL REGISTERS "
      End
     WHEN SPECIAL_REGS_Val               = "I"  THEN Do
          Alter_type    = "INHERIT SPECIAL REGISTERS "
      End
     OTHERWISE  DO
          Alter_type    = "DEFAULT SPECIAL REGISTERS "
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If CARDINALITY_val  <>          CARDINALITY    Then Do
   Select
     When Datatype(CARDINALITY_Val) <> "NUM" Then Do
          ALTER_TYPE = CARDINALITY
      End
     When CARDINALITY_Val   > 2147483647 Then Do
          ALTER_TYPE = 2147483647
      End
     When CARDINALITY_Val   < 0     Then Do
          ALTER_TYPE = -1
      End
     OTHERWISE Do
          ALTER_TYPE = CARDINALITY_VAL
      END
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "     CARDINALITY "ALTER_TYPE            , al.)
   OK = Nexttab( " ;                        ", al.)
 END

Return

Alter_Function_Compiled_SQL_Scalar:


WLMENV            = Left(WLM_ENVIRONMENT           , 50, ' ')
extname           = LEFT(EXTERNAL_NAME             , 50, ' ')
LANGUAGE          = LEFT(LANGUAGE                  , 10, ' ')
PARMSTYLE         = LEFT(PARAMETER_STYLE           ,  1, ' ')
DETERMINISTIC     = LEFT(DETERMINISTIC             ,  1, ' ')
COMMITRETURN      = LEFT(COMMIT_ON_RETURN          ,  1, ' ')
EXTACTION         = LEFT(EXTERNAL_ACTION           ,  1, ' ')
SCRATCHPAD        = LEFT(SCRATCHPAD                ,  1, ' ')
SCRATCHPAD_LEN    = LEFT(SCRATCHPAD_LENGTH         ,  8, ' ')
SQL_DATA_ACCESS   = LEFT(SQL_DATA_ACCESS           ,  1, ' ')
FINALCALL         = LEFT(FINAL_CALL                ,  1, ' ')
PARALLEL          = LEFT(PARALLEL                  ,  1, ' ')
DBINFO            = LEFT(DBINFO                    ,  1, ' ')
COLLID            = LEFT(COLLID                    , 50, ' ')
ASUTIME           = LEFT(ASUTIME                   ,  4, ' ')
STAYRESIDENT      = LEFT(STAYRESIDENT              ,  1, ' ')
PROGRAM_TYPE      = LEFT(PROGRAM_TYPE              ,  1, ' ')
EXT_SECURITY      = LEFT(EXTERNAL_SECURITY         ,  7, ' ')
SECURE            = LEFT(SECURE                    ,  1, ' ')
MAX_FAILURE       = LEFT(MAX_FAILURE               ,  5, ' ')
SQLDATA           = LEFT(1                         ,  1, ' ')
PARAMETER_CCSID   = LEFT(PARAMETER_CCSID           ,  8, ' ')
RESULT_SETS       = LEFT(RESULT_SETS               ,  4, ' ')
Anzeige   = Space(Schema '.' NAME, 0)

/*
AUSWKZ    = "PG"
tabnr     = tabnr     + 1
LUWTABLE  = "LUWTB"tabnr
COLTAB    = "COLTB"tabnr
TBCOL     = "TBCOL"tabnr
object    = Space(COLLID '.' SPECIFICNAME, 0)
Object2   = ""
Object3   = ""
Object4   = ""
Object5   = ""
Tablespace= ""
DATABASE  = ""
STGROUP   = ""
ListObject= ""
CZEILE  = ""
call Lesen_daten

address ispexec 'TBOPEN  'COLTAB
address ispexec 'TBTOP   'COLTAB
address ispexec 'TBSKIP  'COLTAB
address ispexec 'TBGET   'COLTAB

DROP Auto_Parse_Cols.
Call Auto_Parse

tabnr     = tabnr     - 1
LUWTABLE  = "LUWTB"tabnr
COLTAB    = "COLTB"tabnr
TBCOL     = "TBCOL"tabnr

say isolation
*/

Select
 WHEN SQL_DATA_ACCESS   = "R" THEN SQLDATA  = "1"
 WHEN SQL_DATA_ACCESS   = "M" THEN SQLDATA  = "2"
 WHEN SQL_DATA_ACCESS   = "C" THEN SQLDATA  = "3"
 WHEN SQL_DATA_ACCESS   = "N" THEN SQLDATA  = "4"
 OTHERWISE                         SQLDATA  = ""
 End

area.0  = 29
area.1  = white"Alter "Alter_Type"  "Anzeige
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"   "keyw"WLM_ENVIRONMENT "in1 || WLMENV        || endin
area.6  = white"   "keyw"SQLDATA         "in1 || SQLDATA       || endin
area.7  = white"           1 READS SQL DATA    "               || endin
area.8  = white"           2 MODIFIES SQL DATA "               || endin
area.9  = white"           3 CONTAINS SQL "                    || endin
area.10 = white"           4 NOSQL        "                    || endin
area.11 = white"   "keyw"EXTERNAL_NAME   "in1 || extname       || endin,
               "  path/module/function that Db2 should load "
area.12 = white"        LANGUAGE : ASSEMBLE,C,COBOL,JAVA,PLI,REXX   "
area.13 = white"   "keyw"LANGUAGE        "in1 || LANGUAGE     || endin
area.14 = white"   "keyw"PARAMETER_STYLE "in1 || PARMSTYLE     || endin,
               "D=DB2, J=JAVA "
area.15 = white"   "keyw"DETERMINISTIC   "in1 || DETERMINISTIC || endin,
               "  Y/N          "
area.16 = white"   "keyw"SCRATCHPAD      "in1 || SCRATCHPAD    || endin,
               "  Y/N          "
area.17 = white"   "keyw"SCRATCHPAD_LEN  "in1 || SCRATCHPAD_LEN|| endin,
               "               "
area.18 = white"   "keyw"FINAL_CALL      "in1 || FINALCALL     || endin,
               "  Y/N          "
area.19 = white"   "keyw"COMMIT_ON_RETURN"in1 || COMMITRETURN  || endin,
               "  Y/N          "
area.20 = white"   "keyw"PARALLEL        "in1 || PARALLEL      || endin,
               "  A=PARALLEL, D=NOT PARALLEL "
area.21 = white"   "keyw"DBINFO          "in1 || DBINFO        || endin,
               "  Y/N          "
area.22 = white"   "keyw"COLLID          "in1 || COLLID        || endin,
               "  PACKAGE COLLECTION "
area.23 = white"   "keyw"ASUTIME         "in1 || ASUTIME       || endin,
               "  0=NO LIMIT > 0 LIMIT "                      || endin
area.24 = white"   "keyw"STAYRESIDENT    "in1 || STAYRESIDENT  || endin,
               "  Y/N "                                       || endin
area.25 = white"   "keyw"PROGRAM_TYPE    "in1 || PROGRAM_TYPE  || endin,
               "M=MAIN, S=SUB "
area.26 = white"   "keyw"EXT_SECURITY    "in1 || EXT_SECURITY  || endin,
               "  DB2,USER,DEFINER " ||                          endin
area.27 = white"   "keyw"SECURE          "in1 || SECURE        || endin,
               "Y/N           "
area.28 = white"   "
area.29 = white"   "



Call Anzeige_Dyn_Panel

OK = Nexttab( "--     ", al.)
If WLM_ENVIRONMENT_Val <> WLMENV   Then do
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      WLM ENVIRONMENT " WLM_ENVIRONMENT_Val, al.)
   OK = Nexttab( " ;                        ", al.)
 End

If SQLDATA_val  <>              SQLDATA        Then Do
   Select
     WHEN SQLDATA_val        = "1" Then Do
          Alter_type  =   "READS SQL DATA    "
      END
     WHEN SQLDATA_val        = "2" Then Do
          Alter_type  =   "MODIFIES SQL DATA "
      END
     WHEN SQLDATA_val        = "3" Then Do
          Alter_type  =   "CONTAINS SQL      "
      END
     WHEN SQLDATA_val        = "4" Then Do
          Alter_type  =   "NOSQL             "
      END
     OTHERWISE Do
          Alter_type  =   "CONTAINS SQL      "
      END
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If EXTERNAL_NAME_val  <>        EXTNAME        Then Do
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      EXTERNAM NAME   " EXTERNAL_NAME_val  , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If LANGUAGE_val  <>             LANGUAGE      Then Do
   Select
     When Substr(LANGUAGE_val, 1, 1) = "A"    THEN  do
       LANGUAGE_val = "ASSEMBLE"
      End
     When Substr(LANGUAGE_val, 1, 3) = "COB"  THEN  do
       LANGUAGE_val = COBOL
      End
     When Substr(LANGUAGE_val, 1, 3) = "COM"  THEN  do
       LANGUAGE_val = COMPJAVA
      End
     When Substr(LANGUAGE_val, 1, 1) = "C"    THEN  do
       LANGUAGE_val = "C"
      End
     When Substr(LANGUAGE_val, 1, 1) = "J"    THEN  do
       LANGUAGE_val = "JAVA"
      End
     When Substr(LANGUAGE_val, 1, 1) = "P"    THEN  do
       LANGUAGE_val = "PLI"
      End
     When Substr(LANGUAGE_val, 1, 1) = "R"    THEN  do
       LANGUAGE_val = "REXX"
      End
     When Substr(LANGUAGE_val, 1, 1) = "S"    THEN  do
       LANGUAGE_val = "SQL"
      End
     Otherwise Do
       LANGUAGE_val = "SQL"
      End
    End
   ALTER_TYPE  = "LANGUAGE "Strip(LANGUAGE_val)
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE              , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PARAMETER_STYLE_val  <>      PARMSTYLE      Then Do
   Select
     When Substr(PARAMETER_STYLE_val, 1, 1) = "G" THEN do
       PARAMETER_STYLE_val = "GENERAL"
      End
     When Substr(PARAMETER_STYLE_val, 1, 1) = "N" THEN do
       PARAMETER_STYLE_val = "GENERAL WITH NULLS"
      End
     When Substr(PARAMETER_STYLE_val, 1, 1) = "J" THEN do
       PARAMETER_STYLE_val = "JAVA"
      End
     When Substr(PARAMETER_STYLE_val, 1, 1) = "S" THEN do
       PARAMETER_STYLE_val = "SQL"
      End
     Otherwise Do
       PARAMETER_STYLE_val = "SQL"
      End
    End
   ALTER_TYPE  = "PARAMETER STYLE " PARAMETER_STYLE_val
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE              , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If DETERMINISTIC_val  <>        DETERMINISTIC  Then Do
   Select
     When DETERMINISTIC_val = "Y" THEN ALTER_TYPE = "DETERMINISTIC"
     When DETERMINISTIC_val = "N" THEN ALTER_TYPE = "NOT DETERMINISTIC"
     OTHERWISE                         ALTER_TYPE = "NOT DETERMINISTIC"
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If SCRATCHPAD_val  <>           SCRATCHPAD     Then Do
   select
     WHEN SCRATCHPAD_val     = "N" Then Do
          Alter_type    = "NO SCRATCHPAD    "
      End
     OTHERWISE  DO
          Alter_type    = "SCRATCHPAD "
          select
            WHEN Datatype(SCRATCHPAD_LEN_val)  <> "NUM" Then Do
                 Alter_type    = Alter_type "0     "
             End
            WHEN Datatype(SCRATCHPAD_LEN_val)   = "NUM" Then Do
                 Alter_type    = Alter_type " "SCRATCHPAD_LEN_val
             End
            OTHERWISE  DO
                 Alter_type    = Alter_type "0     "
             End
           End
      End
    End
   OK = Nexttab( "Alter Specific Function ",
                 Space(Schema '.' SPECIFICNAME,0), al.)
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END


If FINAL_CALL_val  <>           FINALCALL      Then Do
   select
     WHEN FINAL_CALL_val     = "N" Then Do
          Alter_type    = "NO FINAL CALL    "
      End
     OTHERWISE  DO
          Alter_type    = "FINAL CALL    "
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If COMMIT_ON_RETURN_val  <>     COMMITRETURN   Then Do
   Select
     WHEN COMMIT_ON_RETURN_val = "N" Then Do
          Alter_type  =   "COMMIT ON RETURN NO  "
      END
     WHEN COMMIT_ON_RETURN_val = "Y" Then Do
          Alter_type  =   "COMMIT ON RETURN YES "
      END
     OTHERWISE Do
          Alter_type  =   "COMMIT ON RETURN YES "
      END
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PARALLEL_val  <>             PARALLEL       Then Do
   select
     WHEN PARALLEL_val       = "D" Then Do
          Alter_type    = "DISALLOW PARALLEL"
      End
     OTHERWISE  DO
          Alter_type    = "   ALLOW PARALLEL"
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If DBINFO_val  <>               DBINFO         Then Do
   select
     WHEN DBINFO_val         = "N" Then Do
          Alter_type    = "NO DBINFO        "
      End
     OTHERWISE  DO
          Alter_type    = "DBINFO           "
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If COLLID_val  <>               COLLID         Then Do
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      COLLIDCOLLID "COLLID_val             , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If ASUTIME_val  <>              ASUTIME        Then Do
   select
     WHEN Datatype(ASUTIME_val    )     <> "NUM" Then Do
          Alter_type    = "ASUTIME NO LIMIT "
      End
     WHEN ASUTIME_val                    < "1"  THEN Do
          Alter_type    = "ASUTIME NO LIMIT "
      End
     OTHERWISE  DO
          Alter_type    = "ASUTIME LIMIT " ASUTIME_val
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If STAYRESIDENT_val  <>         STAYRESIDENT   Then Do
   Select
     WHEN STAYRESIDENT_val   = "Y" Then Do
          Alter_type  =   "STAY RESIDENT YES "
      END
     WHEN STAYRESIDENT_val   = "N" Then Do
          Alter_type  =   "STAY RESIDENT NO  "
      END
     OTHERWISE Do
          Alter_type  =   "STAY RESIDENT YES "
      END
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PROGRAM_TYPE_val  <>         PROGRAM_TYPE   Then Do
   Select
     WHEN PROGRAM_TYPE_val   = "M" Then Do
          Alter_type  =   "PROGRAM TYPE MAIN "
      END
     WHEN PROGRAM_TYPE_val   = "S" Then Do
          Alter_type  =   "PROGRAM TYPE SUB  "
      END
     OTHERWISE Do
          Alter_type  =   "PROGRAM TYPE MAIN "
      END
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If EXT_SECURITY_val  <>         EXT_SECURITY   Then Do
   select
     WHEN SUBSTR(EXT_SECURITY_val, 1, 2) = "DB"  THEN Do
          Alter_type    = "SECURITY DB2"
      End
     WHEN SUBSTR(EXT_SECURITY_Val, 1, 1) = "U"  THEN Do
          Alter_type    = "SECURITY USER"
      End
     WHEN SUBSTR(EXT_SECURITY_Val, 1, 2) = "DE"  THEN Do
          Alter_type    = "SECURITY DEFINER"
      End
     OTHERWISE  DO
          Alter_type    = "SECURITY DB2"
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If SECURE_val  <>               SECURE         Then Do
   Select
     When SECURE_val   = "Y" THEN ALTER_TYPE = "SECURED      "
     When SECURE_val   = "N" THEN ALTER_TYPE = "NOT SECURED  "
     OTHERWISE                    ALTER_TYPE = "SECURED      "
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 END


Return

Alter_Function_Inlined_SQL_Scalar:

WLMENV            = Left(WLM_ENVIRONMENT           , 50, ' ')
extname           = LEFT(EXTERNAL_NAME             , 50, ' ')
LANGUAGE          = LEFT(LANGUAGE                  , 10, ' ')
PARMSTYLE         = LEFT(PARAMETER_STYLE           ,  1, ' ')
DETERMINISTIC     = LEFT(DETERMINISTIC             ,  1, ' ')
COMMITRETURN      = LEFT(COMMIT_ON_RETURN          ,  1, ' ')
EXTACTION         = LEFT(EXTERNAL_ACTION           ,  1, ' ')
SCRATCHPAD        = LEFT(SCRATCHPAD                ,  1, ' ')
SQL_DATA_ACCESS   = LEFT(SQL_DATA_ACCESS           ,  1, ' ')
FINALCALL         = LEFT(FINAL_CALL                ,  1, ' ')
PARALLEL          = LEFT(PARALLEL                  ,  1, ' ')
DBINFO            = LEFT(DBINFO                    ,  1, ' ')
COLLID            = LEFT(COLLID                    , 50, ' ')
ASUTIME           = LEFT(ASUTIME                   ,  6, ' ')
STAYRESIDENT      = LEFT(STAYRESIDENT              ,  1, ' ')
PROGRAM_TYPE      = LEFT(PROGRAM_TYPE              ,  1, ' ')
EXT_SECURITY      = LEFT(EXTERNAL_SECURITY         ,  7, ' ')
SECURE            = LEFT(SECURE                    ,  1, ' ')
MAX_FAILURE       = LEFT(MAX_FAILURE               ,  5, ' ')
SQLDATA           = LEFT(1                         ,  1, ' ')
CARDINALITY       = LEFT(CARDINALITY               , 10, ' ')

Select
 WHEN SQL_DATA_ACCESS   = "R" THEN SQLDATA  = "1"
 WHEN SQL_DATA_ACCESS   = "M" THEN SQLDATA  = "2"
 WHEN SQL_DATA_ACCESS   = "C" THEN SQLDATA  = "3"
 WHEN SQL_DATA_ACCESS   = "N" THEN SQLDATA  = "4"
 OTHERWISE                         SQLDATA  = ""
 End

area.0  = 13
area.1  = white"Alter "Alter_Type"  " Space(Schema '.' NAME, 0)
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"   "keyw"SQLDATA         "in1 || SQLDATA       || endin
area.6  = white"                     1 READS SQL DATA    "  || endin
area.7  = white"                     2 CONTAINS SQL "       || endin
area.8  = white"   "
area.9  = white"   "keyw"DETERMINISTIC   "in1 || DETERMINISTIC || endin,
               "         N/Y     "
area.10 = white"   "keyw"EXTERNAL_ACTION "in1 || EXTACTION     || endin,
               "         N=NO, E=HAS EXTERNAL ACTION   "    endin
area.11 = white"   "keyw"SECURE          "in1 || SECURE        || endin,
               "         N/Y     "
area.12 = white"   "keyw"CARDINALITY     "in1 || CARDINALITY   || endin,
               "ANZAHL -1=Default or 0-2147483647 "
area.13 = white"   "


Call Anzeige_Dyn_Panel

OK = Nexttab( "--     ", al.)

If SQLDATA_val          <>   SQLDATA          Then Do
   Select
     When SQLDATA_val = "1"   THEN   ALTER_TYPE = "READS SQL DATA"
     When SQLDATA_val = "2"   THEN   ALTER_TYPE = "CONTAINS SQL "
     OTHERWISE                       ALTER_TYPE = "CONTAINS SQL "
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If DETERMINISTIC_val    <>   DETERMINISTIC    Then Do
   Select
     When DETERMINISTIC_val = "Y" THEN ALTER_TYPE = "DETERMINISTIC"
     When DETERMINISTIC_val = "N" THEN ALTER_TYPE = "NOT DETERMINISTIC"
     OTHERWISE                         ALTER_TYPE = "NOT DETERMINISTIC"
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If EXTERNAL_ACTION_Val    <>   EXTERNAL_ACTION  Then Do
   Select
     When EXTERNAL_ACTION_Val = "N" THEN DO
          ALTER_TYPE = "NO EXTERNAL ACTION"
      End
     When EXTERNAL_ACTION_Val = "E" THEN DO
          ALTER_TYPE = "EXTERNAL ACTION"
      End
     OTHERWISE  Do
          ALTER_TYPE = "NO EXTERNAL ACTION"
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If SECURE_val           <>   SECURE           Then Do
   Select
     When SECURE_val   = "Y" THEN ALTER_TYPE = "SECURED      "
     When SECURE_val   = "N" THEN ALTER_TYPE = "NOT SECURED  "
     OTHERWISE                    ALTER_TYPE = "SECURED      "
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 end

If CARDINALITY_val      <>   CARDINALITY      Then Do
   Select
     When Datatype(CARDINALITY_Val) <> "NUM" Then Do
          ALTER_TYPE = CARDINALITY
      End
     When CARDINALITY_Val   > 2147483647 Then Do
          ALTER_TYPE = 2147483647
      End
     When CARDINALITY_Val   < 0     Then Do
          ALTER_TYPE = -1
      End
     OTHERWISE Do
          ALTER_TYPE = CARDINALITY_VAL
      END
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      CARDINALITY " ALTER_TYPE , al.)
   OK = Nexttab( " ;                        ", al.)
 end


Return


Alter_Function_System_Generated:


WLMENV            = Left(WLM_ENVIRONMENT           , 50, ' ')
extname           = LEFT(EXTERNAL_NAME             , 50, ' ')
LANGUAGE          = LEFT(LANGUAGE                  , 10, ' ')
PARMSTYLE         = LEFT(PARAMETER_STYLE           ,  1, ' ')
PARALLEL          = LEFT(PARALLEL                  ,  1, ' ')
DETERMINISTIC     = LEFT(DETERMINISTIC             ,  1, ' ')
COMMITRETURN      = LEFT(COMMIT_ON_RETURN          ,  1, ' ')
EXTACTION         = LEFT(EXTERNAL_ACTION           ,  1, ' ')
SCRATCHPAD        = LEFT(SCRATCHPAD                ,  1, ' ')
SQL_DATA_ACCESS   = LEFT(SQL_DATA_ACCESS           ,  1, ' ')
FINALCALL         = LEFT(FINAL_CALL                ,  1, ' ')
DBINFO            = LEFT(DBINFO                    ,  1, ' ')
COLLID            = LEFT(COLLID                    , 50, ' ')
STAYRESIDENT      = LEFT(STAYRESIDENT              ,  1, ' ')
PROGRAM_TYPE      = LEFT(PROGRAM_TYPE              ,  1, ' ')
EXT_SECURITY      = LEFT(EXTERNAL_SECURITY         ,  7, ' ')
SECURE            = LEFT(SECURE                    ,  1, ' ')
MAX_FAILURE       = LEFT(MAX_FAILURE               ,  5, ' ')
ASUTIME           = LEFT(ASUTIME                   ,  6, ' ')
DEBUG_MODE        = LEFT(DEBUG_MODE                ,  1, ' ')
RESULT_SETS       = LEFT(RESULT_SETS               ,  5, ' ')
RUNOPTS           = LEFT(RUNOPTS                   , 50, ' ')
SQLDATA           = 1
SPECIAL_REGS      = LEFT(SPECIAL_REGS              ,  1, ' ')

Select
 WHEN SQL_DATA_ACCESS   = "R" THEN SQLDATA  = "1"
 WHEN SQL_DATA_ACCESS   = "M" THEN SQLDATA  = "2"
 WHEN SQL_DATA_ACCESS   = "C" THEN SQLDATA  = "3"
 WHEN SQL_DATA_ACCESS   = "N" THEN SQLDATA  = "4"
 OTHERWISE                         SQLDATA  = ""
 End

Select
 WHEN EXT_SECURITY      = "D" THEN EXT_SECURITY  = "DB2    "
 WHEN EXT_SECURITY      = "U" THEN EXT_SECURITY  = "USER   "
 WHEN EXT_SECURITY      = "C" THEN EXT_SECURITY  = "DEFINER"
 OTHERWISE                         EXT_SECURITY  = ""
 End

area.0  = 31
area.1  = white"Alter "Alter_Type"  " Space(Schema '.' NAME, 0)
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"   "keyw"WLM_ENVIRONMENT "in1 || WLMENV        || endin
area.6  = white"   "keyw"EXTERNAL_NAME   "in1 || extname       || endin,
               "  path/module/function that Db2 should load "
area.7  = white"   "keyw"LANGUAGE        "in1 || LANGUAGE      || endin,
               " ASSEMBLE,C,COBOL,JAVA,PLI,REXX "
area.8  = white"   "keyw"PARAMETER_STYLE "in1 || PARMSTYLE     || endin,
               "  D=DB2SQL, G=GENERAL, J=JAVA, N=GENERAL WITH NULLS"
area.9  = white"   "keyw"COMMIT_ON_RETURN"in1 || COMMITRETURN  || endin,
               "  Y/N          "
area.10 = white"   "keyw"DETERMINISTIC   "in1 || DETERMINISTIC || endin,
               "  Y/N          "
area.11 = white"   "keyw"SQLDATA         "in1 || SQLDATA       || endin
area.12 = white"           1 READS SQL DATA    "               || endin
area.13 = white"           2 MODIFIES SQL DATA "               || endin
area.14 = white"           3 CONTAINS SQL "                    || endin
area.15 = white"           4 NOSQL        "                    || endin
area.16 = white"   "keyw"EXTERNAL_ACTION "in1 || EXTACTION     || endin,
               "  N=NO, E=HAS EXTERNAL ACTION   "               endin
area.17 = white"   "keyw"SCRATCHPAD      "in1 || SCRATCHPAD    || endin,
               "  Y/N          "
area.18 = white"   "keyw"FINAL_CALL      "in1 || FINALCALL     || endin,
               "  Y/N          "
area.19 = white"   "keyw"PARALLEL        "in1 || PARALLEL      || endin,
               "  A=PARALLEL, D=NOT PARALLEL "
area.20 = white"   "keyw"DBINFO          "in1 || DBINFO        || endin,
               "  Y/N          "
area.21 = white"   "keyw"COLLID          "in1 || COLLID        || endin,
               "  PACKAGE COLLECTION "
area.22 = white"   "keyw"ASUTIME         "in1 || ASUTIME       || endin,
               "  0=NO LIMIT > 0 LIMIT "                      || endin
area.23 = white"   "keyw"STAYRESIDENT    "in1 || STAYRESIDENT  || endin,
               "  Y/N "                                       || endin
area.24 = white"   "keyw"PROGRAM_TYPE    "in1 || PROGRAM_TYPE  || endin,
               "  M=MAIN, S=SUB"                              || endin
area.25 = white"   "keyw"EXT_SECURITY    "in1 || EXT_SECURITY  || endin,
               "  DB2,USER,DEFINER " ||                          endin
area.26 = white"   "keyw"SECURE          "in1 || SECURE        || endin
area.27 = white"   "keyw"MAX_FAILURE     "in1 || MAX_FAILURE   || endin
area.28 = white"   "
area.29 = white"   "
area.30 = white"   "
area.31 = white"   "


Call Anzeige_Dyn_Panel

OK = Nexttab( "--     ", al.)
If WLM_ENVIRONMENT_Val <> WLMENV   Then do
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      WLM ENVIRONMENT " WLM_ENVIRONMENT_Val, al.)
   OK = Nexttab( " ;                        ", al.)
 End

If EXTERNAL_NAME_val  <>        EXTNAME        Then Do
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      EXTERNAM NAME   " EXTERNAL_NAME_val  , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If LANGUAGE_val  <>             LANGUAGE       Then Do
   Select
     When Substr(LANGUAGE_val, 1, 1) = "A"    THEN  do
       LANGUAGE_val = "ASSEMBLE"
      End
     When Substr(LANGUAGE_val, 1, 3) = "COB"  THEN  do
       LANGUAGE_val = COBOL
      End
     When Substr(LANGUAGE_val, 1, 3) = "COM"  THEN  do
       LANGUAGE_val = COMPJAVA
      End
     When Substr(LANGUAGE_val, 1, 1) = "C"    THEN  do
       LANGUAGE_val = "C"
      End
     When Substr(LANGUAGE_val, 1, 1) = "J"    THEN  do
       LANGUAGE_val = "JAVA"
      End
     When Substr(LANGUAGE_val, 1, 1) = "P"    THEN  do
       LANGUAGE_val = "PLI"
      End
     When Substr(LANGUAGE_val, 1, 1) = "R"    THEN  do
       LANGUAGE_val = "REXX"
      End
     When Substr(LANGUAGE_val, 1, 1) = "S"    THEN  do
       LANGUAGE_val = "SQL"
      End
     Otherwise Do
       LANGUAGE_val = "SQL"
      End
    End
   ALTER_TYPE  = "LANGUAGE "Strip(LANGUAGE_val)
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE              , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PARAMETER_STYLE_val  <>      PARMSTYLE      Then Do
   Select
     When Substr(PARAMETER_STYLE_val, 1, 1) = "G" THEN do
       PARAMETER_STYLE_val = "GENERAL"
      End
     When Substr(PARAMETER_STYLE_val, 1, 1) = "N" THEN do
       PARAMETER_STYLE_val = "GENERAL WITH NULLS"
      End
     When Substr(PARAMETER_STYLE_val, 1, 1) = "J" THEN do
       PARAMETER_STYLE_val = "JAVA"
      End
     When Substr(PARAMETER_STYLE_val, 1, 1) = "S" THEN do
       PARAMETER_STYLE_val = "SQL"
      End
     Otherwise Do
       PARAMETER_STYLE_val = "SQL"
      End
    End
   ALTER_TYPE  = "PARAMETER STYLE " PARAMETER_STYLE_val
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE              , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If COMMIT_ON_RETURN_val  <>     COMMITRETURN   Then Do
   Select
     WHEN COMMIT_ON_RETURN_val = "N" Then Do
          Alter_type  =   "COMMIT ON RETURN NO  "
      END
     WHEN COMMIT_ON_RETURN_val = "Y" Then Do
          Alter_type  =   "COMMIT ON RETURN YES "
      END
     OTHERWISE Do
          Alter_type  =   "COMMIT ON RETURN YES "
      END
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If DETERMINISTIC_val  <>        DETERMINISTIC  Then Do
   Select
     When DETERMINISTIC_val = "Y" THEN ALTER_TYPE = "DETERMINISTIC"
     When DETERMINISTIC_val = "N" THEN ALTER_TYPE = "NOT DETERMINISTIC"
     OTHERWISE                         ALTER_TYPE = "NOT DETERMINISTIC"
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If SQLDATA_val  <>              SQLDATA        Then Do
   Select
     WHEN SQLDATA_val        = "1" Then Do
          Alter_type  =   "READS SQL DATA    "
      END
     WHEN SQLDATA_val        = "2" Then Do
          Alter_type  =   "MODIFIES SQL DATA "
      END
     WHEN SQLDATA_val        = "3" Then Do
          Alter_type  =   "CONTAINS SQL      "
      END
     WHEN SQLDATA_val        = "4" Then Do
          Alter_type  =   "NOSQL             "
      END
     OTHERWISE Do
          Alter_type  =   "CONTAINS SQL      "
      END
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If EXTERNAL_ACTION_val  <>      EXTACTION      Then Do
   select
     WHEN EXTERNAL_ACTION_val = "N" Then Do
          Alter_type    = "NO EXTERNAL ACTION "
      End
     WHEN EXTERNAL_ACTION_val = "E" Then Do
          Alter_type    = "   EXTERNAL ACTION "
      End
     OTHERWISE  DO
          Alter_type    = "NO EXTERNAL ACTION "
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If SCRATCHPAD_val  <>           SCRATCHPAD     Then Do
   select
     WHEN SCRATCHPAD_val     = "N" Then Do
          Alter_type    = "NO SCRATCHPAD    "
      End
     OTHERWISE  DO
          Alter_type    = "SCRATCHPAD "
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If FINAL_CALL_val  <>           FINALCALL      Then Do
   select
     WHEN FINAL_CALL_val     = "N" Then Do
          Alter_type    = "NO FINAL CALL    "
      End
     OTHERWISE  DO
          Alter_type    = "FINAL CALL    "
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PARALLEL_val  <>             PARALLEL       Then Do
   select
     WHEN PARALLEL_val       = "D" Then Do
          Alter_type    = "DISALLOW PARALLEL"
      End
     OTHERWISE  DO
          Alter_type    = "   ALLOW PARALLEL"
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If DBINFO_val  <>               DBINFO         Then Do
   select
     WHEN DBINFO_val         = "N" Then Do
          Alter_type    = "NO DBINFO        "
      End
     OTHERWISE  DO
          Alter_type    = "DBINFO           "
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If COLLID_val  <>               COLLID         Then Do
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      COLLIDCOLLID "COLLID_val             , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If ASUTIME_val  <>              ASUTIME        Then Do
   select
     WHEN Datatype(ASUTIME_val    )     <> "NUM" Then Do
          Alter_type    = "ASUTIME NO LIMIT "
      End
     WHEN ASUTIME_val                    < "1"  THEN Do
          Alter_type    = "ASUTIME NO LIMIT "
      End
     OTHERWISE  DO
          Alter_type    = "ASUTIME LIMIT " ASUTIME_val
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If STAYRESIDENT_val  <>         STAYRESIDENT   Then Do
   Select
     WHEN STAYRESIDENT_val   = "Y" Then Do
          Alter_type  =   "STAY RESIDENT YES "
      END
     WHEN STAYRESIDENT_val   = "N" Then Do
          Alter_type  =   "STAY RESIDENT NO  "
      END
     OTHERWISE Do
          Alter_type  =   "STAY RESIDENT YES "
      END
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If PROGRAM_TYPE_val  <>         PROGRAM_TYPE   Then Do
   Select
     WHEN PROGRAM_TYPE_val   = "M" Then Do
          Alter_type  =   "PROGRAM TYPE MAIN "
      END
     WHEN PROGRAM_TYPE_val   = "S" Then Do
          Alter_type  =   "PROGRAM TYPE SUB  "
      END
     OTHERWISE Do
          Alter_type  =   "PROGRAM TYPE MAIN "
      END
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If EXT_SECURITY_val  <>         EXT_SECURITY   Then Do
   select
     WHEN SUBSTR(EXT_SECURITY_val, 1, 2) = "DB"  THEN Do
          Alter_type    = "SECURITY DB2"
      End
     WHEN SUBSTR(EXT_SECURITY_Val, 1, 1) = "U"  THEN Do
          Alter_type    = "SECURITY USER"
      End
     WHEN SUBSTR(EXT_SECURITY_Val, 1, 2) = "DE"  THEN Do
          Alter_type    = "SECURITY DEFINER"
      End
     OTHERWISE  DO
          Alter_type    = "SECURITY DB2"
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If SECURE_val  <>               SECURE         Then Do
   Select
     When SECURE_val   = "Y" THEN ALTER_TYPE = "SECURED      "
     When SECURE_val   = "N" THEN ALTER_TYPE = "NOT SECURED  "
     OTHERWISE                    ALTER_TYPE = "SECURED      "
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "      "ALTER_TYPE    , al.)
   OK = Nexttab( " ;                        ", al.)
 END

If MAX_FAILURE_val  <>          MAX_FAILURE    Then Do
   select
     WHEN Datatype(MAX_FAILURE_val)     <> "NUM" Then Do
          Alter_type    = "STOP AFTER SYSTEM DEFAULT FAILURES "
      End
     WHEN MAX_FAILURE_val                < 0     THEN Do
          Alter_type    = "STOP AFTER SYSTEM DEFAULT FAILURES "
      End
     WHEN MAX_FAILURE_val                = "0"  THEN Do
          Alter_type    = "STOP AFTER SYSTEM DEFAULT FAILURES "
      End
     WHEN MAX_FAILURE_val                > "32000" THEN Do
          Alter_type    = "FAILURESSTOP AFTER     30 "
      End
     OTHERWISE  DO
          Alter_type  = "FAILURESSTOP AFTER "MAX_FAILURE_val "FAILURES"
      End
    End
   OK = Nexttab( "Alter Function "Space(Schema '.' NAME   , 0) , al. )
   OK = Nexttab( "     "ALTER_TYPE                           , al.)
   OK = Nexttab( " ;                        ", al.)
 END

Return

Alter_Column:

DROP Auto_Parse_Cols.
Call Auto_Parse


GENERATED         = " "
GENERATED_Val     = " "
DROPDEF           = Left(' '         ,  1, ' ')
SETDEF            = Left(' '         ,  1, ' ')
SETDEFVAL         = Left(' '         , 40, ' ')
DROPColumn        = "N"
NewName           = Left(' '         , 50, ' ')
Coltype           = Left(Coltype     , 15, ' ')
Colstr            = Alter_coltypes(COLTYPE)
LOBILEN           = -1

select
    When  HIDDEN   = "P"    Then    HIDDEN   =  "Y"
    Otherwise                       HIDDEN    = "N"
 End

select
    When  COLTYPE  = "CLOB"    Then Do
          ColLength = LENGTH2
          LOBILEN     = 0
          IF LENGTH   > 4 Then Do
             LOBILEN  = LENGTH  - 4
           end
     End
    When  COLTYPE  = "BLOB"    Then Do
          ColLength = LENGTH2
          LOBILEN     = 0
          IF LENGTH   > 4 Then Do
             LOBILEN  = LENGTH  - 4
           end
     End
    When  COLTYPE  = "DBCLOB"  Then Do
          ColLength = LENGTH2
          LOBILEN     = 0
          IF LENGTH   > 4 Then Do
             LOBILEN  = (LENGTH  - 4) / 2
           end
     End
    When  COLTYPE  = "DECIMAL" Then ColLength = LENGTH","Scale
    When  COLTYPE  = "CHAR"    Then ColLength = LENGTH
    When  COLTYPE  = "VARCHAR" Then ColLength = LENGTH
    Otherwise                       ColLength = ""
 End

if length(ColLength) > 0 then ColLength = left(ColLength, 11, ' ')


area.0  = 16
area.1  = white"Alter "Alter_Type"  " Space(TBCreator '.' TBNAME, 0) ,
               "Column : " Strip(Name)
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"                                             "
area.6  = white"    GENERATED         A=ALWAYS D=DEFAULT"
area.7  = white"   "keyw"RenameColumn  "in1 || NewName  || endin
area.8  = white"   "keyw"ColType       "in1 ||ColType|| endin || Colstr
area.9  = white"   "keyw"ColLength     "in1 ||ColLength|| endin
If LOBILEN > -1 Then do
   If LOBILEN = 0 THEN LOBILEN = "     "
   LOBILEN = Left(LOBILEN, 5, ' ')
   area.10 = white"   "keyw"INLINELEN     "in1 ||LOBILEN|| endin
 End
 Else Do
   area.10 = white"   "keyw"INLENELEN     "IN1 || "" || endin
 End
area.11 = white"   "keyw"Drop_Default  "in1 ||DROPDEF  || endin || ,
               " Y=DROP DEFAULT DEFAULT VALUE = "DEFAULT
area.12 = white"   "keyw"SET_Default   "in1 ||SETDEF   || endin || ,
               " Y=SET "keyw"Value" in1||SETDEFVAL|| endin
area.13 = white"   "
area.14 = white"   "
area.15 = white"   "keyw"Drop          "in1 ||DROPColumn|| endin || ,
               " Y=DROP Column  "
area.16 = white"   "

If GENERATED_ATTR = "A" ,
 | GENERATED_ATTR = "D" Then Do
   area.6  = white"   "keyw"GENERATED     "In1 ||GENERATED_ATTR || ,
             endin"  A=ALWAYS D=DEFAULT "
 End

Call Anzeige_Dyn_Panel

OK = Nexttab( "--     ", al.)
If GENERATED_Val <> GENERATED_ATTR ,
 & GENERATED_Val <> " "            Then Do
   OK = Nexttab( "Alter Table "Space(TBCreator '.' TBNAME, 0) , al. )
   Select
     When GENERATED_Val = "D"               Then do
          OK = Nexttab( "      ALTER COLUMN "NAME || ,
                        " SET GENERATED BY DEFAULT ", al.)
          OK = Nexttab( " ;                        ", al.)
      end
     When GENERATED_Val = "A"               Then do
          OK = Nexttab( "      ALTER COLUMN "NAME || ,
                        " SET GENERATED ALWAYS     ", al.)
          OK = Nexttab( " ;                        ", al.)
      end
     Otherwise Do
          OK = Nexttab( " --   ALTER COLUMN "NAME || ,
                        " SET GENERATED BY DEFAULT ", al.)
          OK = Nexttab( " --   ALTER COLUMN "NAME || ,
                        " SET GENERATED ALWAYS     ", al.)
          OK = Nexttab( " ;                        ", al.)
      end
     End
 End

If Strip(RenameColumn_val)<> Name     ,
 & Strip(RenameColumn_val)<> ""       Then Do
   OK = Nexttab( "Alter TABLE   " Space(TBCreator "." TBname, 0), al.)
   OK = Nexttab( "      RENAME COLUMN "Strip(Name)          , al.)
   OK = Nexttab( "       TO      " Strip(RenameColumn_val)    , al.)
   OK = Nexttab( "; "                               , al. )
 End

If Strip(Drop_val) = "Y" Then do
   OK = Nexttab( "Alter TABLE   " Space(TBCreator "." TBname, 0), al.)
   OK = Nexttab( "      DROP COLUMN "Strip(Name)" RESTRICT",  al.)
   OK = Nexttab( "; "                               , al. )
 End

ColType_val = Strip(ColType_val)
If ColLength_val = "COLLENGTH_VAL" Then ColLength_val = ColLength
If (Strip(ColType_val)<> Coltype & Pos(ColType_val, Colstr ) > 0 ) ,
 | ColLength_val <> ColLength Then Do
   Select
    when ColType_val = "VARCHAR" Then Len = "(" || ColLength_val || ")"
    when ColType_val = "CHAR"    Then Len = "(" || ColLength_Val || ")"
    when ColType_val = "DECIMAL" Then Len = "(" || ColLength_Val || ")"
    when ColType_val = "BLOB"    Then Len = "(" || ColLength_Val || ")"
    when ColType_val = "CLOB"    Then Len = "(" || ColLength_Val || ")"
    otherwise                         Len = ""
   End
   OK = Nexttab( "Alter TABLE   " Space(TBCreator "." TBname, 0), al.)
   OK = Nexttab( "      Alter  COLUMN "Strip(Name)       , al.)
   OK = Nexttab( "      SET DATA TYPE " ColType_val || len , al.)
   OK = Nexttab( "; "                               , al. )
 End

If Drop_Default_Val = "Y" Then do
   OK = Nexttab( "Alter TABLE   " Space(TBCreator "." TBname, 0), al.)
   OK = Nexttab( "      Alter  COLUMN "Strip(Name)       , al.)
   OK = Nexttab( "         DROP DEFAULT "                , al.)
   OK = Nexttab( "; "                               , al. )
 End

If SET_Default_Val = "Y"       Then Do
    If Value_val <> SETDEFVAL Then DEFVAL = Strip(Value_val, 'T')
     ELSE DEFVAL = ""
   OK = Nexttab( "Alter TABLE   " Space(TBCreator "." TBname, 0), al.)
   OK = Nexttab( "      Alter  COLUMN "Strip(Name)       , al.)
   OK = Nexttab( "         SET  DEFAULT "DEFVAL          , al.)
   OK = Nexttab( "; "                               , al. )
 End

IF Datatype(INLINELEN_VAL) = "NUM" ,
 & INLINELEN <> LOBILEN Then Do
   OK = Nexttab( "Alter TABLE   " Space(TBCreator "." TBname, 0), al.)
   OK = Nexttab( "      Alter  COLUMN "Strip(Name)       , al.)
   OK = Nexttab( "         SET INLINE LENGTH "INLINELEN_VAL ,  al.)
   OK = Nexttab( "; "                               , al. )
 End


Return

Alter_DROP_Column:

DROP Auto_Parse_Cols.
Call Auto_Parse

OK = Nexttab( "Alter TABLE   " Space(TBCreator "." TBname, 0), al.)
OK = Nexttab( "      DROP COLUMN "Strip(Name)" RESTRICT",  al.)
OK = Nexttab( "; "                               , al. )

Return

Alter_coltypes:
AT.0    = 15
AT.1    = "SMALLINT"
AT.1.1  = "INTEGER BIGINT DECIMAL REAL DOUBLE DECFLOAT"
AT.2    = "INTEGER"
AT.2.1  = "BIGINT DECIMAL DOUBLE DECFLOAT"
AT.3    = "BIGINT"
AT.3.1  = "DECFLOAT"
AT.4    = "DECIMAL"
AT.4.1  = "SMALLINT INTEGER BIGINT REAL DOUBLE DECFLOAT"
AT.5    = "DECFLOAT"
AT.5.1  = "DECFLOAT"
AT.6    = "FLOAT"
AT.6.1  = "REAL DOUBLE DECFLOAT"
AT.7    = "CHAR"
AT.7.1  = "VARCHAR"
AT.8    = "VARCHAR"
AT.8.1  = "CHAR"
AT.9    = "LONG VARCHAR BINARY VARBINARY"
AT.9.1  = "VARCHAR"
AT.10   = "LONG VARCHAR BINARY VARBINARY"
AT.10.1 = "VARCHAR"
AT.11   = "GRAPHIC"
AT.11.1 = "VARGRAPHIC"
AT.12   = "VARGRAPHIC"
AT.12.1 = "GRAPHIC"
AT.13   = "LONG VARGRAPHIC"
AT.13.1 = "VARGRAPHIC"
AT.14   = "BINARY"
AT.14.1 = "VARBINARY"
AT.15   = "VARBINARY"
AT.15.1 = "BINARY"

do ati = 1 to at.0
 If at.ati = Arg(1) Then return AT.ati.1
 End
return ""

Alter_Sequence:

DROP Auto_Parse_Cols.
Call Auto_Parse


REMARKS             = Left(REMARKS              ,300, ' ')
RESTARTWITH         = Left(RESTARTWITH          , 19, ' ')
INCREMENT           = Left(INCREMENT            , 19, ' ')
START               = Left(START                , 19, ' ')
MAXVALUE            = Left(MAXVALUE             , 19, ' ')
MINVALUE            = Left(MINVALUE             , 19, ' ')
MAXASSIGNEDVAL      = Left(MAXASSIGNEDVAL       , 19, ' ')
CYCLE               = Left(CYCLE                , 19, ' ')
CACHE               = Left(CACHE                , 19, ' ')
ORDER               = Left(ORDER                , 19, ' ')

area.0 = 20
area.1  = white"Alter Sequence "Space(Schema '.' Name, 0) ,
               " ID="SEQUENCEID "Type="SEQTYPE
area.2  = white"                                               "
area.3  = white"                                               "
area.4  = white"                                               "
area.5  = white"                                               "
area.6  = white"     "keyw"RESTARTWITH   "in1 || RESTARTWITH   || endin
area.7  = white"     "keyw"INCREMENT     "in1 || INCREMENT     || endin
area.8  = white"     "keyw"START         "in1 || START         || endin
area.9  = white"     "keyw"MAXVALUE      "in1 || MAXVALUE      || endin
area.10 = white"     "keyw"MINVALUE      "in1 || MINVALUE      || endin
area.11 = white"     "keyw"CYCLE         "in1 || CYCLE         || endin
area.12 = white"     "keyw"CACHE         "in1 || CACHE         || endin
area.13 = white"     "keyw"ORDER         "in1 || ORDER         || endin
area.14 = white"      MAXASSIGNEDVAL"white||MAXASSIGNEDVAL
area.15 = white" "
area.16 = white"     "keyw"Remarks       "in1 || Remarks
area.17 = " "
area.18 = " "
area.19 = " "endin
area.20 = white" "

Call Anzeige_Dyn_Panel

If SEQTYPE = "S" Then Call Build_Alter_Sequence
Else                  Call Build_Alter_Identity

Return

Build_Alter_Sequence:

If Restartwith_Val <> RESTARTWITH Then Do
   OK = Nexttab( "Alter Sequence " Space(Schema '.' Name, 0) , al. )
   If RESTARTWITH_Val = "" Then Do
      OK = Nexttab( "      Restart    ; "                 , al.)
    End
   Else do
      OK = Nexttab( "      Restart WITH " RESTARTWITH_Val " ;" , al.)
    End
 End

If INCREMENT_Val <> INCREMENT   Then Do
   OK = Nexttab( "Alter Sequence " Space(Schema '.' Name, 0) , al. )
   OK = Nexttab( "      INCREMENT BY " INCREMENT_Val " ;"    , al. )
 End

If MINVALUE_Val <> MINVALUE    Then Do
   OK = Nexttab( "Alter Sequence " Space(Schema '.' Name, 0) , al. )
   If MINVALUE_Val = "" Then Do
      OK = Nexttab( "   NO MINVALUE  "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      MINVALUE  " MINVALUE_Val " ;"    , al. )
    End
 End

If MAXVALUE_Val <> MAXVALUE    Then Do
   OK = Nexttab( "Alter Sequence " Space(Schema '.' Name, 0) , al. )
   If MAXVALUE_Val = "" Then Do
      OK = Nexttab( "      MAXVALUE  "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      MAXVALUE  " MAXVALUE_Val " ;"    , al. )
    End
 End

If CACHE_Val <> CACHE       Then Do
   OK = Nexttab( "Alter Sequence " Space(Schema '.' Name, 0) , al. )
   If CACHE_Val    = "" ,
    | CACHE_Val    = 0  ,
    | SUBSTR(STRIP(CACHE_Val), 1, 1)    = "N" Then Do
      OK = Nexttab( "   NO CACHE     "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      CACHE     " CACHE_Val " ;"    , al. )
    End
 End

If CYCLE_Val <> CYCLE    Then Do
   OK = Nexttab( "Alter Sequence " Space(Schema '.' Name, 0) , al. )
   If SUBSTR(STRIP(CYCLE_Val), 1, 1)    = "N" Then Do
      OK = Nexttab( "   NO CYCLE   "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      CYCLE   "              " ;"    , al. )
    End
 End


If ORDER_Val <> ORDER    Then Do
   OK = Nexttab( "Alter Sequence " Space(Schema '.' Name, 0) , al. )
   If SUBSTR(STRIP(ORDER_Val), 1, 1)    = "N" Then Do
      OK = Nexttab( "   NO ORDER   "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      ORDER   "              " ;"    , al. )
    End
 End

If Remarks_VAL <> Remarks  Then Do
   SEQName = Space(Schema '.' Name, 0)
   OK = Nexttab( "COMMENT ON Sequence "SEQName" IS ", al. )
   OK = Nexttab( "'" || Strip(Remarks_VAL, 'T') || "'"    , al. )
   OK = Nexttab( ";"                  , al. )
 End


Return

Build_Alter_Identity:

If Restartwith_Val <> RESTARTWITH Then Do
   RESTARTWITH_Val = Strip(RESTARTWITH_Val)
   OK = Nexttab( "Alter Table " Space(DCreator'.' DName, 0) , al. )
   OK = Nexttab( "      Alter Column "Space(DCOLNAME, 0)    , al. )
   OK = Nexttab( "      Restart WITH " RESTARTWITH_Val " ;" , al.)
 End

If INCREMENT_Val <> INCREMENT   Then Do
   OK = Nexttab( "Alter Table " Space(DCreator'.' DName, 0) , al. )
   OK = Nexttab( "      Alter Column "Space(DCOLNAME, 0)    , al. )
   OK = Nexttab( "      INCREMENT BY " INCREMENT_Val " ;"    , al. )
 End

If MINVALUE_Val <> MINVALUE    Then Do
   OK = Nexttab( "Alter Table " Space(DCreator'.' DName, 0) , al. )
   OK = Nexttab( "      Alter Column "Space(DCOLNAME, 0)    , al. )
   If MINVALUE_Val = "" Then Do
      OK = Nexttab( "   NO MINVALUE  "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      MINVALUE  " MINVALUE_Val " ;"    , al. )
    End
 End

If MAXVALUE_Val <> MAXVALUE    Then Do
   OK = Nexttab( "Alter Table " Space(DCreator'.' DName, 0) , al. )
   OK = Nexttab( "      Alter Column "Space(DCOLNAME, 0)    , al. )
   If MAXVALUE_Val = "" Then Do
      OK = Nexttab( "      MAXVALUE  "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      MAXVALUE  " MAXVALUE_Val " ;"    , al. )
    End
 End

If CACHE_Val <> CACHE       Then Do
   OK = Nexttab( "Alter Table " Space(DCreator'.' DName, 0) , al. )
   OK = Nexttab( "      Alter Column "Space(DCOLNAME, 0)    , al. )
   If CACHE_Val    = "" ,
    | CACHE_Val    = 0  ,
    | SUBSTR(STRIP(CACHE_Val), 1, 1)    = "N" Then Do
      OK = Nexttab( "   NO CACHE     "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      CACHE     " CACHE_Val " ;"    , al. )
    End
 End

If CYCLE_Val <> CYCLE    Then Do
   OK = Nexttab( "Alter Table " Space(DCreator'.' DName, 0) , al. )
   OK = Nexttab( "      Alter Column "Space(DCOLNAME, 0)    , al. )
   If SUBSTR(STRIP(CYCLE_Val), 1, 1)    = "N" Then Do
      OK = Nexttab( "   NO CYCLE   "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      CYCLE   "              " ;"    , al. )
    End
 End


If ORDER_Val <> ORDER    Then Do
   OK = Nexttab( "Alter Table " Space(DCreator'.' DName, 0) , al. )
   OK = Nexttab( "      Alter Column "Space(DCOLNAME, 0)    , al. )
   If SUBSTR(STRIP(ORDER_Val), 1, 1)    = "N" Then Do
      OK = Nexttab( "   NO ORDER   "              " ;"    , al. )
    End
   Else Do
      OK = Nexttab( "      ORDER   "              " ;"    , al. )
    End
 End



Return

Alter_Trigger:

Call Auto_Parse


SECURE            = Left(SECURE ,          1, ' ')
TRIGTIME          = Left(TRIGTIME,         1, ' ')
TRIGEVENT         = Left(TRIGEVENT,        1, ' ')
GRANULARITY       = Left(GRANULARITY,      1, ' ')
DEBUG_MODE        = Left(DEBUG_MODE,       1, ' ')
WLM_ENVIRONMENT   = Left(WLM_ENVIRONMENT, 34, ' ')
VERSION           = Left(VERSION        , 34, ' ')
REGENERATE        = Left('N'            ,  1, ' ')

Select
   WHEN DEBUG_MODE = "0"  THEN DEBUG_MODE = "N"
   WHEN DEBUG_MODE = "1"  THEN DEBUG_MODE = "Y"
   WHEN DEBUG_MODE = "N"  THEN DEBUG_MODE = ""
   OTHERWISE                   DEBUG_MODE = ""
 End

area.0  = 16
area.1  = white"Alter Trigger  "Space(Schema "." name, 0)
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"                                             "
area.6  = white"    "keyw"SECURED         "in1||SECURE          ||endin,
          white"  Y/N  "
area.7  = white"    "keyw"TRIGTIME        "in1||TRIGTIME        ||endin,
          white"  A=AFTER B=BEFORE I=INSTAND "
area.8  = white"    "keyw"TRIGEVENT       "in1||TRIGEVENT       ||endin,
          white"  I=INSERT U=UPDATE D=DELETE "
area.9  = white"    "keyw"GRANULARITY     "in1||GRANULARITY     ||endin,
          white"  FOR EACH S=STATEMENT R=ROW "
area.10 = white"    "keyw"DEBUG_MODE      "in1||DEBUG_MODE      ||endin,
               "     (JAVA) 1=ALLOW, 0=DISALLOW, N=DISABLE "  || endin
area.11 = white"    "keyw"WLM_ENVIRONMENT "in1||WLM_ENVIRONMENT ||endin,
          white"  WLM FOR DEBUG MODE"
area.12 = white"    "keyw"VERSION         "in1||VERSION         ||endin,
          white"  TRIGGER VERSION   "
area.13 = white" "
area.14 = white" "
area.15 = white"    "keyw"REGENERATE      "in1||REGENERATE      ||endin,
          white"  REGENERATE VERSION"
area.16 = white" "

Call Anzeige_Dyn_Panel

If Strip(SECURED_Val) <> Strip(SECURE) Then Do
   If SECURED = "N" Then NOT = "NOT "
   Else                  NOT = "    "
   OK = Nexttab( "Alter Trigger  " Space(Schema "." name, 0), al.)
   OK = Nexttab( "      "NOT"SECURED       "  , al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(DEBUG_MODE_Val) <> Strip(DEBUG_MODE) Then Do
   If DEBUG_MODE_Val = "N" Then NOT = "DISALLOW"
   Else                  NOT = "ALLOW"
   OK = Nexttab( "Alter Trigger  " Space(Schema "." name, 0), al.)
   OK = Nexttab( "      "NOT "DEBUG MODE        "  , al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(VERSION_Val   ) <> Strip(Version)    Then Do
   OK = Nexttab( "Alter Trigger  " Space(Schema "." name, 0), al.)
   OK = Nexttab( "      ACTIVATE VERSION " Strip(VERSION_Val), al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(REGENERATE_val) = "Y"                Then Do
   OK = Nexttab( "Alter Trigger  " Space(Schema "." name, 0), al.)
   OK = Nexttab( "      REGENERATE ACTIVE VERSION "          , al. )
   OK = Nexttab( "; "                               , al. )
 End


Return

Alter_View:

Call Auto_Parse

REGENERATE        = " "
REGENERATE        = Left(REGENERATE, 1, ' ')


area.0  = 7
area.1  = white"Alter View  "Space(dcreator "." dname, 0)
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"                                             "
area.6  = white"       "keyw"REGENERATE "in1 || REGENERATE || endin ,
          white"  R    "
area.7  = white" "

Call Anzeige_Dyn_Panel

Select
   When Strip(REGENERATE_Val) = 'R'            Then Do
        OK = Nexttab( "Alter View     " Space(DCreator"."Dname,0), al.)
        OK = Nexttab( "      REGENERATE "  , al. )
        OK = Nexttab( "; "                               , al. )
    End
   OTHERWISE OK = Nexttab( " " )

 End

Return


Alter_BUFFERPOOL:

Call Auto_Parse


BP                = Left(BPNAME        ,  7, ' ')
VPSIZE            = Left(VPSIZE        , 10, ' ')
VPSEQT            = Left(VPSEQT        ,  3, ' ')
VPPSEQT           = Left(VPPSEQT       ,  3, ' ')
VPXPSEQT          = Left(VPXPSEQT      ,  7, ' ')
DWQT              = Left(DWQT          ,  3, ' ')
PCT_VDWQT         = Left(PCT_VDWQT     ,  5, ' ')
ABS_VDWQT         = Left(ABS_VDWQT     ,  5, ' ')
PGSTEAL           = Left(PGSTEAL       ,  7, ' ')
PGFIX             = Left(PGFIX         ,  3, ' ')
AUTOSIZE          = Left(AUTOSIZE      ,  3, ' ')
FRAMESIZE         = Left(FRAMESIZE     ,  7, ' ')
ALLOC_FRAME4K     = Left(ALLOC_FRAME4K ,  7, ' ')
ALLOC_FRAME1M     = Left(ALLOC_FRAME1M ,  7, ' ')
VPSIZEMIN         = Left(VPSIZEMIN     ,  9, ' ')
VPSIZEMAX         = Left(VPSIZEMAX     ,  9, ' ')


area.0  = 20
area.1  = white"Alter Bufferpool  "Space(BP, 0)
area.2  = white" "
area.3  = white" "
area.4  = white" "
area.5  = white" "
area.6  = white" "keyw"VPSIZE    "in1 || VPSIZE     || endin
area.7  = white" "keyw"VPSEQT    "in1 || VPSEQT     || endin
area.8  = white" "keyw"VPPSEQT   "in1 || VPPSEQT    || endin
area.9  = white" "keyw"VPXPSEQT  "in1 || VPXPSEQT   || endin
area.10 = white" "keyw"DWQT      "in1 || DWQT       || endin
area.11 = white" "keyw"PCT_VDWQT "in1 || PCT_VDWQT  || endin
area.12 = white" "keyw"ABS_VDWQT "in1 || ABS_VDWQT  || endin
area.13 = white" "keyw"PGSTEAL   "in1 || PGSTEAL    || endin ,
          white"LRU/FIFO/NONE  "
area.14 = white" "keyw"PGFIX     "in1 || PGFIX      || endin ,
          white"    YES/NO "
area.15 = white" "keyw"FRAMESIZE "in1 || FRAMESIZE  || endin ,
          white"4K/1M/2G       "
area.16 = white" "keyw"AUTOSIZE  "in1 || AUTOSIZE   || endin ,
          white"    YES/NO "  ||     ,
          keyw"VPSIZEMIN  "in1 || VPSIZEMIN  || endin " " || ,
          keyw"VPSIZEMAX  "in1 || VPSIZEMAX  || endin ,
          white" "
area.17 = white" "
area.18 = white" "
area.19 = white" "
area.20 = white" "

Call Anzeige_Dyn_Panel

If Strip(VPSIZE_VAL    ) <> VPSIZE        Then Do
   OK = Nexttab( "-Alter Bufferpool ("Space(BP, 0) ")" ,
                 "  VPSIZE("VPSIZE_Val")" , al. )
 End

If Strip(VPSEQT_Val) <> VPSEQT       Then Do
   OK = Nexttab( "-Alter Bufferpool ("Space(BP, 0) ")" ,
                 "  VPSEQT("VPSEQT_Val")" , al. )
 End

 If Strip(VPPSEQT_Val) <> VPPSEQT       Then Do
   OK = Nexttab( "-Alter Bufferpool ("Space(BP, 0) ")" ,
                 "  VPPSEQT("VPPSEQT_Val")" , al. )
 End

If Strip(VPXPSEQT_Val) <> VPXPSEQT       Then Do
   OK = Nexttab( "-Alter Bufferpool ("Space(BP, 0) ")" ,
                 "  VPXPSEQT("VPXPSEQT_Val")" , al. )
 End

If Strip(VPXPSEQT_Val) <> VPXPSEQT       Then Do
   OK = Nexttab( "-Alter Bufferpool ("Space(BP, 0) ")" ,
                 "  VPXPSEQT("VPXPSEQT_Val")" , al. )
 End

If Strip(DWQT_Val) <> DWQT       Then Do
   OK = Nexttab( "-Alter Bufferpool ("Space(BP, 0) ")" ,
                 "  DWQT("DWQT_Val")" , al. )
 End

If Strip(PCT_VDWQT_Val) <> PCT_VDWQT  ,
 | Strip(ABS_VDWQT_Val) <> ABS_VDWQT       Then Do
   OK = Nexttab( "-Alter Bufferpool ("Space(BP, 0) ")" ,
                 "  VDWQT ("PCT_VDWQT_Val","ABS_VDWQT_Val")" , al. )
 End


If Strip(PGSTEAL_Val) <> PGSTEAL       Then Do
   select
     When Substr(PGSTEAL_Val, 1, 1) = "L"   Then PGSTEAL_Val = "LRU"
     When Substr(PGSTEAL_Val, 1, 1) = "F"   Then PGSTEAL_Val = "FIFO"
     Otherwise                                   PGSTEAL_Val = "NONE"
    End
   OK = Nexttab( "-Alter Bufferpool ("Space(BP, 0) ")" ,
                 "  PGSTEAL("PGSTEAL_Val")" , al. )
 End

If Strip(PGFIX_Val) <> PGFIX       Then Do
   If Substr(PGFIX_Val, 1, 1) = "N" Then  PGFIX_Val = "NO"
    Else                                 PGFIX_Val = "YES"
   OK = Nexttab( "-Alter Bufferpool ("Space(BP, 0) ")" ,
                 "  PGFIX("PGFIX_Val")" , al. )
 End

If Strip(AUTOSIZE_Val) <> AUTOSIZE       Then Do
   If Substr(AUTOSIZE_Val, 1, 1) = "N" Then AUTOSIZE_Val = "NO"
   Else                                    AUTOSIZE_Val = "YES"
   OK = Nexttab( "-Alter Bufferpool ("Space(BP, 0) ")" ,
                 "  AUTOSIZE("AUTOSIZE_Val")" , al. )
 End

If Strip(FRAMESIZE_Val) <> FRAMESIZE       Then Do
   select
     When FRAMESIZE_Val             = "2G"  Then PGSTEAL_Val = "2G"
     When FRAMESIZE_Val             = "1M"  Then PGSTEAL_Val = "1M"
     Otherwise                                   PGSTEAL_Val = "4K"
    End
   OK = Nexttab( "-Alter Bufferpool ("Space(BP, 0) ")" ,
                 "  FRAMESIZE ("FRAMESIZE_Val")" , al. )
 End


If Strip(VPSIZEMIN_Val) <> VPSIZEMIN       Then Do
   OK = Nexttab( "-Alter Bufferpool ("Space(BP, 0) ")" ,
                 "  VPSIZEMIN("VPSIZEMIN_Val ")", al. )
 End

If Strip(VPSIZEMAX_Val) <> VPSIZEMAX       Then Do
   OK = Nexttab( "-Alter Bufferpool ("Space(BP, 0) ")" ,
                 "  VPSIZEMAX("VPSIZEMAX_Val ")", al. )
 End

Return

Alter_Index:
/* Wird noch auf Partition und Columns erweitert */
   Call Alter_Index_Base
return

Alter_Index_Base:

Call Auto_Parse

AUSWKZ    = "IP"
tabnr     = tabnr     + 1
object    = Space(CREATOR '.' NAME, 0)
call Lesen_daten
CZEILE  = ""
COLTAB = "COLTB"tabnr
TBCOL  = "TBCOL"tabnr

address ispexec 'TBOPEN  'COLTAB
address ispexec 'TBTOP   'COLTAB
address ispexec 'TBSKIP  'COLTAB
address ispexec 'TBGET   'COLTAB

DROP Auto_Parse_Cols.
Call Auto_Parse

tabnr     = tabnr     - 1
AUSWKZ   = "IX"
COLTAB = "COLTB"tabnr
TBCOL  = "TBCOL"tabnr

ixdbname          = LEFT(dbname      ,  8, ' ')
BPOOL             = Left(BPOOL       ,  8, ' ')
CLOSE             = Left(CLOSERULE   ,  1, ' ')
COPY              = Left(COPY        ,  1, ' ')
HASH              = Left(HASH        ,  1, ' ')
PIECESIZE         = Left(PIECESIZE   , 10, ' ')
CLUSTER           = Left(CLUSTERING , 1, ' ')
PADDED            = Left(PADDED      ,  1, ' ')
COMPRESS          = Left(COMPRESS    ,  1, ' ')
ERASERULE         = Right(ERASERULE  ,  1, ' ')
ADDCOL            = Left(' '         ,  1, ' ')
INCCOL            = Left(' '         ,  1, ' ')
NewName           = Left(' '         , 50, ' ')
PQTY              = Right(PQTY       , 10, ' ')
SQTY              = Right(SQTY       , 10, ' ')
REGENERATE        = " "
DSSIZE            = Left(DSSIZE     , 20, ' ')


Index_Name = Space(Creator "." name, 0)
area.0  = 25
area.1  = white"Alter Index "Index_Name
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"   "keyw"REGENERATE "in1 || REGENERATE || endin ,
          white"       R   "
area.5  = white"                                             "
area.6  = white"   "keyw"BUFFERPOOL "in1 || BPOOL      || endin
area.7  = white"   "keyw"CLOSE      "in1 || CLOSE      || endin ,
          white"       Y/N "
area.8  = white"   "keyw"COPY       "in1 || COPY       || endin ,
          white"       Y/N "
area.9  = white"   "keyw"CLUSTER    "in1 || CLUSTER    || endin ,
          white"       Y/N "
area.10 = white"   "keyw"PADDED     "in1 || PADDED     || endin ,
          white"       Y/N "
area.11 = white"   "keyw"COMPRESS   "in1 || COMPRESS   || endin ,
          white"       Y/N "
area.12 = white"   "keyw"ERASE      "in1 || ERASERULE  || endin ,
          white"       Y/N "
area.13 = white"   "keyw"PIECESIZE  "in1 || PIECESIZE  || endin
area.14 = white"   "keyw"PQTY       "in1 || PQTY       || endin
area.15 = white"   "keyw"SQTY       "in1 || SQTY       || endin
area.16 = white"   "keyw"FREEPAGE   "in1 || FREEPAGE   || endin
area.17 = white"   "keyw"PCTFREE    "in1 || PCTFREE    || endin
area.18 = white"   "keyw"DSSIZE     "in1 || DSSIZE     || endin ,
          white"    G      "
area.19 = white" "
area.20 = white"   "keyw"ADD Column "in1 || ADDCOL     || endin
area.21 = white"   "keyw"Include    "in1 || INCCOL     || endin
area.22 = white" "
area.23 = white"   "keyw"RenameIndex :"in1 || NewName  || endin
area.24 = white" "
area.25 = white" "

Call Anzeige_Dyn_Panel

If Strip(BUFFERPOOL_Val) <> Strip(BPOOL)     Then Do
   OK = Nexttab( "Alter Index    " Index_Name, al.)
   OK = Nexttab( "      BUFFERPOOL  "BUFFERPOOL_Val, al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(COPY_Val) <> COPY           Then Do
   If Substr(COPY_VAL  , 1, 1) = "N" Then copy = 'NO'
   Else                                   copy = 'YES'
   OK = Nexttab( "Alter Index    " Index_Name, al.)
   OK = Nexttab( "      COPY        "COPY     , al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(CLOSE_Val) <> CLOSE       Then Do
   If Substr(CLOSE_Val,1, 1) = "N" Then CLOSE    = 'NO'
   Else                                 CLOSE    = 'YES'
   OK = Nexttab( "Alter Index    " Index_Name, al.)
   OK = Nexttab( "      CLOSE       "CLOSE  , al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(CLUSTER_Val) <> CLUSTER Then Do
   If Substr(CLUSTER_Val,1, 1) = "N" Then CLUSTER = 'NOT'
   Else                                   CLUSTER = ''
   OK = Nexttab( "Alter Index    " Index_Name, al.)
   OK = Nexttab( "     "CLUSTER || " CLUSTER " , al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(PADDED_Val) <> PADDED      Then Do
   If Substr(PADDED_Val,1, 1) = "N"  Then PADDED   = 'NOT'
   Else                                   PADDED   = '   '
   OK = Nexttab( "Alter Index    " Index_Name, al.)
   OK = Nexttab( "     "PADDED" PADDED      " , al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(COMPRESS_Val) <> COMPRESS    Then Do
   If Substr(COMPRESS_Val,1, 1) = "N" Then COMPRESS = 'NO'
   Else                                    COMPRESS = 'YES'
   OK = Nexttab( "Alter Index    " Index_Name, al.)
   OK = Nexttab( "      COMPRESS    "COMPRESS , al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(ERASE_Val) <> ERASERULE   Then Do
   If Substr(ERASE_Val,1, 1) = "N" Then ERASE = 'NO'
   Else                                 ERASE = 'YES'
   OK = Nexttab( "Alter Index    " Index_Name, al.)
   OK = Nexttab( "      ERASE       "ERASE , al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(PIECESIZE_Val)<> PIECESIZE   Then Do
   If Datatype(PIECESIZE_Val) /= "NUM" Then PIECESIZE_Val = 0
   OK = Nexttab( "Alter Index    " Index_Name, al.)
   OK = Nexttab( "      PIECESIZE   "PIECESIZE_VAL, al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(PQTY_Val)     <> PQTY        Then Do
   OK = Nexttab( "Alter Index    " Index_Name, al.)
   OK = Nexttab( "      PRIQTY      "PQTY_Val, al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(SQTY_Val)     <> SQTY        Then Do
   OK = Nexttab( "Alter Index    " Index_Name, al.)
   OK = Nexttab( "      SECQTY      "SQTY_Val, al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(FREEPAGE_Val) <> FREEPAGE    Then Do
   OK = Nexttab( "Alter Index    " Index_Name, al.)
   OK = Nexttab( "      FREEPAGE    "FREEPAGE_Val, al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(PCTFREE_Val)  <> PCTFREE     Then Do
   OK = Nexttab( "Alter Index    " Index_Name, al.)
   OK = Nexttab( "      PCTFREE     "PCTFREE_Val, al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(ADD_Val)<> ADDCOL      Then Do
   ix_Function = "Add Column"
   tabnr     = tabnr     + 1
   AUSWKZ   = "CO"
   Call Alter_Index_Add_Column
   tabnr     = tabnr     - 1
   AUSWKZ   = "IX"
 End

If Strip(Include_Val)<> INCCOL      Then Do
   ix_Function = "ADD Include Column"
   AUSWKZ   = "CO"
   tabnr     = tabnr     + 1
   Call Alter_Index_Add_Column
   tabnr     = tabnr     - 1
   AUSWKZ   = "IX"
 End

If Strip(RenameIndex_val)<> NewName     Then Do
   OK = Nexttab( "RENAME INDEX   " Space(Creator "." name, 0), al.)
   OK = Nexttab( "       TO      " Strip(RenameIndex_val)    , al.)
   OK = Nexttab( "; "                               , al. )
 End

If Strip(REGENERATE_Val) = 'R'            Then Do
   OK = Nexttab( "Alter Index    " Space(Creator "." name, 0), al.)
   OK = Nexttab( "      REGENERATE         "  , al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(DSSIZE_Val) <> DSSIZE        Then Do
   OK = Nexttab( "Alter Index    " Space(Creator "." name, 0), al.)
   OK = Nexttab( "      DSSIZE  "DSSIZE_Val" G"   , al. )
   OK = Nexttab( "; "                               , al. )
 End

Return

Call_Sored_Procedure:

Parse Value Object1 With PROC_CREATOR '.' PROC_NAME .

SQLSTMT = "SELECT    DISTINCT                            ",
          "        P.SCHEMA       AS ROUTINENAME         ",
          "     ,  P.NAME         AS ROUTINESCHEMA       ",
          "     ,  P.SPECIFICNAME AS SPECIFICNAME        ",
          "     ,  P.ROWTYPE      AS ROWTYPE             ",
          "     ,  P.PARMNAME     AS PARMNAME            ",
          "     ,  P.LOCATOR      AS LOCATOR             ",
          "     ,  P.ORDINAL      AS ORDINAL             ",
          "     ,  P.TYPENAME     AS TYPENAME            ",
          "     ,  P.LENGTH       AS LENGTH              ",
          "     ,  P.SCALE        AS SCALE               ",
          "     ,  P.ROUTINETYPE  AS ROUTINETYPE         ",
          "     ,  R.RESULT_SETS                         ",
          "FROM "SYSIBMS".SYSPARMS P                     ",
          "INNER JOIN "SYSIBMS".SYSROUTINES R            ",
          "  ON  P.SCHEMA       = R.SCHEMA               ",
          "  AND P.NAME         = R.NAME                 ",
          "  AND P.SPECIFICNAME = R.SPECIFICNAME         ",
          "WHERE P.SCHEMA        = '"PROC_CREATOR"'      ",
          "AND   P.NAME          = '"PROC_NAME"'         ",
          "ORDER BY ORDINAL                              ",
          ""

AUSWKZ = "SQLEX"
object  = sqlstmt
call Lesen_daten

ADDRESS ISPEXEC  'TBOPEN  'SELTAB
ADDRESS ISPEXEC  'TBTOP   'SELTAB
ADDRESS ISPEXEC  'TBSKIP  'SELTAB

OK = Nexttab( "Call    " Object1 "(" , al.)
komma = "   "
NUMWERTE = "INTEGER SMALLINT BIGINT DECIMAL FLOAT DECFLOAD "

do while rc = 0
   ROUTINENAME    = COL1
   ROUTINESCHEMA  = COL2
   SPECIFICNAME   = COL3
   ROWTYPE        = COL4
   PARMNAME       = COL5
   LOCATOR        = COL6
   ORDINAL        = COL7
   TYPENAME       = COL8
   LENGTH         = COL9
   SCALE          = COL10
   ROUTINETYPE    = COL11
   select
     When POS(TYPENAME, NUMWERTE,  1) > 0 Then do
        INFO = ""
        INFO = "-- ",
               ROWTYPE SUBSTR(PARMNAME, 1, 20) TYPENAME LENGTH SCALE
        OK = Nexttab(komma " 0       "Info  , al.)
      End
     OTHERWISE Do
        INFO = ""
        INFO = "-- " ,
               ROWTYPE SUBSTR(PARMNAME, 1, 20) TYPENAME LENGTH
        OK = Nexttab(komma "''       "Info  , al.)
      End
   End
   komma = ",  "
   ADDRESS ISPEXEC  'TBSKIP  'SELTAB
 End
ADDRESS ISPEXEC  'TBCLOSE 'SELTAB
ADDRESS ISPEXEC  'TBERASE 'SELTAB

ADDRESS ISPEXEC  'TBCLOSE 'SELTAB
ADDRESS ISPEXEC  'TBERASE 'SELTAB
OK = Nexttab( " ) "                              , al. )
OK = Nexttab( "; "                               , al. )

Return

Alter_Index_Add_Column:

objecto      = object
object       = ""
object2      = Space(TBCREATOR '.' TBNAME, 0)
call Lesen_daten
object       = objecto

CZEILE  = ""
COLTAB = "COLTB"tabnr
TBCOL  = "TBCOL"tabnr

address ispexec 'TBOPEN  'COLTAB
address ispexec 'TBTOP   'COLTAB
address ispexec 'TBSKIP  'COLTAB
area.0  = 4
area.1  = white"Alter Index "Space(Creator "." name, 0) ix_Function
area.2  = white"                                             "
area.3  = white"    COLNO  " ,
                    Left("NAME", 45) ,
                    Left("COLTYPE", 8) ,
               "N D H G"
DROP Auto_Parse_Cols.
area.4  = white"                                             "
Do while RC = 0

   SEL = " "

   Call Auto_Parse

   area.0 = area.0 + 1
   ai     = area.0
   COLNO   = Right(COLNO, 3, '0')
   area.ai = white"   "keyw"S" || COLNO""in1 || SEL || endin ,
             Left(NAME, 45)   ,
             Left(COLTYPE, 8) ,
             NULLS            ,
             DEFAULT          ,
             HIDDEN           ,
             GENERATED_ATTR   ,
             ""
   maxcolno = colno
   address ispexec 'TBSKIP  'COLTAB
 End

Call Anzeige_Dyn_Panel


Do awnr = 1 to maxcolno
   Ausw = "S" || Right(awnr, 3, '0') || "_Val"
   If "S" = Value(Ausw) Then do
      address ispexec 'TBTOP   'COLTAB
      address ispexec 'TBSKIP  'COLTAB' NUMBER('awnr')'
      parse value CZEILE with TBCREATOR             '0a0d'x ,
                              TBNAME                '0a0d'x ,
                              COLNO                 '0a0d'x ,
                              NAME                  '0a0d'x ,
                              COLTYPE               '0a0d'x ,
                              .

      OK = Nexttab( "Alter Index    " Index_Name , al.)
      OK = Nexttab( "      "ix_Function "(" NAME ")", al. )
      OK = Nexttab( "; "                               , al. )
    End

 End

address ispexec 'TBCLOSE 'COLTAB
Return

Alter_Table:

Call Auto_Parse


VS_TAB = Space(VERSIONING_SCHEMA "." VERSIONING_TABLE, 0)
AR_TAB = Space(ARCHIVING_SCHEMA  "." ARCHIVING_TABLE , 0)
IF VS_TAB = "." Then VS_TAB = ""
IF AR_TAB = "." Then AR_TAB = ""
If SPLIT_ROWS     = " " Then SPLIT_ROWS  = "N"
If DATACAPTURE    = " " Then DATACAPTURE = "N"
If AUDITING       = " " Then AUDITING    = "N"
If CLUSTERTYPE    = " " Then CLUSTERTYPE = "N"
DATACAPTURE       = Left(DATACAPTURE ,  1, ' ')
VOLATILE          = Left(SPLIT_ROWS  ,  1, ' ')
APPEND            = Left(APPEND      ,  1, ' ')
AUDIT             = Left(AUDITING    ,  1, ' ')
RACCONTROL        = " "
VALPROC           = Left(VALPROC     ,  8, ' ')
CloneYN           = Left(' '         ,  1, ' ')
CloneTab          = Left(' '         , 60, ' ')
VersioningYN      = Left(' '         ,  1, ' ')
Versioning_tab    = Left(VS_TAB      , 60, ' ')
ArchivingYN       = Left(' '         ,  1, ' ')
Archiving_Tab     = Left(AR_TAB      , 60, ' ')
mehr              = Left(' '         ,  1, ' ')
NewName           = Left(' '         , 50, ' ')
Partname          = Left(' '         , 40, ' ')

area.0  = 25
area.1  = white"Alter Table "Space(Creator "." name, 0)
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"   "keyw"DATACAPTURE       "in1 || DATACAPTURE|| endin ,
          white"       N=NONE / C=CHANGES "
area.5  = white"   "keyw"VOLATILE          "in1 || VOLATILE   || endin ,
          white"       Y/N "
area.6  = white"   "keyw"APPEND            "in1 || APPEND     || endin ,
          white"       Y/N "
area.7  = white"   "keyw"AUDIT             "in1 || AUDIT      || endin ,
          white"       N=NONE / C=CHANGES / A=ALL "
area.8  = white"   "keyw"VALPROC           "in1 || VALPROC    || endin ,
          white"ValProg / Null "
area.9  = white" "
area.10 = white"   "keyw"ROW_ACCESS_CONTROL" || ,
            In1 || RACCONTROL || endin ,
          white"       A=ACTIVATE / D=DACTIVATE "
area.11 = white"   "keyw"RESTRICT ON DROP " ,
            In1 || CLUSTERTYPE || endin ,
          white"       N=Drop / Y=ADD "
area.12 = white" "
area.13 = white" "
area.14 = white"   "keyw"Versioning "in1 || VersioningYN || endin ,
          white" D=Drop/A=Add            "
area.15 = white"   "keyw"Vers_Table "in1 || Versioning_Tab || endin
area.16 = white"   "keyw"Archiving  "in1 || ArchivingYN || endin ,
          white" D=Drop/A=Add            "
area.17 = white"   "keyw"Arch_Table "in1 || Archiving_Tab || endin
area.18 = white"   "keyw"Clone "in1 || CloneYN  || endin ,
          white" D=Drop/A=Add/E=Exchange "
area.19 = white"   "keyw"Table "in1 || CloneTab || endin
area.20 = white" "
area.21 = white" "
area.22 = white"   "keyw"RenameTable :"in1 || NewName  || endin
area.23 = white"   "keyw"AddPartition "in1 || Partname || endin,
          white" MAX-,MIN-, VALUE    "
area.24 = white" "
area.25 = white" "

Call Anzeige_Dyn_Panel


If Strip(DATACAPTURE_Val) <> DATACAPTURE    Then Do
   If Substr(DATACAPTURE_VAL  , 1, 1) = "N" Then TXTVal = 'NONE'
   Else                                          TXTVal = 'CHANGES'
   OK = Nexttab( "Alter Table    " Space(Creator "." name, 0), al.)
   OK = Nexttab( "      DATA CAPTURE "TXTVal  , al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(VOLATILE_Val) <> VOLATILE    Then Do
   If Substr(VOLATILE_Val,1, 1) = "N" Then TXTVal   = 'NOT'
   Else                                    TXTVal   = '   '
   OK = Nexttab( "Alter Table    " Space(Creator "." name, 0), al.)
   OK = Nexttab( "      "TXTVal" VOLATILE " , al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(APPEND_Val) <> APPEND      Then Do
   If Substr(APPEND_Val,1, 1) = "N" Then TXTVal = 'NO'
   Else                                  TXTVal = 'YES'
   OK = Nexttab( "Alter Table    " Space(Creator "." name, 0), al.)
   OK = Nexttab( "      APPEND      "TXTVal   , al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(AUDIT_Val) <> AUDIT       Then Do
   Select
     When  Substr(AUDIT_Val,1, 1) = "N" Then TXTVal = 'NONE'
     When  Substr(AUDIT_Val,1, 1) = "C" Then TXTVal = 'CHANGES'
     When  Substr(AUDIT_Val,1, 1) = "A" Then TXTVal = 'ALL'
     Otherwise                               TXTVal = 'NONE'
   End
   OK = Nexttab( "Alter Table    " Space(Creator "." name, 0), al.)
   OK = Nexttab( "      AUDIT   "TXTVal   , al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(RESTRICT_Val) <> CLUSTERTYPE Then Do
   Select
     When  Substr(RESTRICT_Val, 1, 1) = "Y" Then TXTVal = 'ADD'
     Otherwise                               TXTVal = 'DROP'
   End
   OK = Nexttab( "Alter Table    " Space(Creator "." name, 0), al.)
   OK = Nexttab( "      "TXTVal" RESTRICT ON DROP ", al.)
   OK = Nexttab( "; "                               , al. )
 End

If Strip(VALPROC_Val) <> VALPROC     Then Do
   VALPROC_Val  = Strip(VALPROC_Val)
   Select
     When  Strip(VALPROC_Val)      = "NULL" Then TXTVal = 'NULL'
     When  Length(VALPROC_Val)     = 0      Then TXTVal = 'NULL'
     Otherwise                                   TXTVal = VALPROC_Val
   End
   OK = Nexttab( "Alter Table    " Space(Creator "." name, 0), al.)
   OK = Nexttab( "      VALIDPROC "TXTVal   , al. )
   OK = Nexttab( "; "                               , al. )
 End

If Strip(ROW_ACCESS_CONTROL_VAL) <>  RACCONTROL Then do
   Select
     When  Strip(ROW_ACCESS_CONTROL_VAL) = "D"  THEN ACT= "DEACTIVATE"
     Otherwise                                       ACT= "ACTIVATE"
   End
   OK = Nexttab( "Alter Table    " Space(Creator "." name, 0), al.)
   OK = Nexttab( "      "ACT" ROW ACCESS CONTROL", al.)
   OK = Nexttab( "; "                               , al. )
 End

If Strip(Clone_Val) <> CloneYN     Then Do
   Select
     When  Strip(Clone_Val)      = "A" Then Do
           OK = Nexttab( "Alter Table    " ,
                          Space(Creator "." name, 0), al.)
           OK = Nexttab( "      ADD  CLONE "Table_Val, al. )
      End
     When  Strip(Clone_Val)      = "D" Then Do
           OK = Nexttab( "Alter Table    " ,
                          Space(Creator "." name, 0), al.)
           OK = Nexttab( "      DROP CLONE"         , al. )
      End
     When  Strip(Clone_Val)      = "E" Then Do
           OK = Nexttab( "EXCHANGE DATA BETWEEN TABLE " , al. )
           OK = Nexttab( "         "Space(Creator "." name, 0), al.)
           OK = Nexttab( "     AND "Table_Val           , al. )
      End
     Otherwise Do
           OK = Nexttab( "EXCHANGE DATA BETWEEN TABLE " , al. )
           OK = Nexttab( "         "Space(Creator "." name, 0), al.)
           OK = Nexttab( "     AND "Table_Val           , al. )
      End
   End
   OK = Nexttab( "; "                               , al. )
 End

If Strip(   Versioning_Val) <> VersioningYN Then Do
   Select
     When  Strip(Versioning_Val) = "A" Then Do
           OK = Nexttab( "Alter Table    " ,
                          Space(Creator "." name, 0), al.)
           OK = Nexttab( "      ADD VERSIONING "              , al. )
           OK = Nexttab( "      USE HISTORY TABLE "Vers_Table_Val, al. )
           OK = Nexttab( "; "                               , al. )
      End
     When  Strip(Versioning_Val) = "D" Then Do
           OK = Nexttab( "Alter Table    " ,
                          Space(Creator "." name, 0), al.)
           OK = Nexttab( "      DROP VERSIONING "   , al. )
           OK = Nexttab( "; "                               , al. )
      End
     Otherwise NOP
   End
 End

If Strip(   Archiving_Val)  <> ArchivingYN Then Do
   Select
     When  Strip(Archiving_Val) = "A" Then Do
           OK = Nexttab( "Alter Table    " ,
                          Space(Creator "." name, 0), al.)
           OK = Nexttab( "      ENABLE ARCHIVE USE "Arch_Table_Val, al.)
           OK = Nexttab( "; "                       , al. )
      End
     When  Strip(Archiving_Val) = "D" Then Do
           OK = Nexttab( "Alter Table    " ,
                          Space(Creator "." name, 0), al.)
           OK = Nexttab( "      DISABLE ARCHIVE "   , al. )
           OK = Nexttab( "; "                       , al. )
      End
     Otherwise NOP
   End
 End

If Strip(RenameTable_val)<> NewName     Then Do
   OK = Nexttab( "RENAME TABLE   " Space(Creator "." name, 0), al.)
   OK = Nexttab( "       TO      " Strip(RenameTable_val)    , al.)
   OK = Nexttab( "; "                               , al. )
 End

If Strip(AddPartition_val)<> Partname    Then Do
   OK = Nexttab( "ALTER TABLE " Space('"' Creator '"."'name'"',0) , al.)
   OK = Nexttab( "      ADD PARTITION ENDING AT (" || ,
                 Strip(AddPartition_val) || ")" , al.)
   OK = Nexttab( "; "                               , al. )
 End

Return


Alter_Table_MOVE:

Call Auto_Parse


TBC    = STRIP(Creator)
TBN    = STRIP(NAME)
DBN    = STRIP(DBNAME)
TSN    = STRIP(TSNAME)
If CLUSTERTYPE    = " " Then CLUSTERTYPE = "N"
TODB              = Left(DBN         ,  8, ' ')
TOTS              = Left(TSN         ,  8, ' ')

area.0  = 8
area.1  = white"Alter Tablespace MOVE TABLE "Space(TBC "." TBN, 0)
area.2  = white"      FROM TABLESPACE       "Space(DBN "." TSN, 0)
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"   "keyw"TO_DB             "in1 || TODB       || endin ,
          white"       TO Database     "
area.6  = white"   "keyw"TO_TS             "in1 || TOTS       || endin ,
          white"       TO Tablespace   "
area.7  = white" "
area.8  = white" "

Call Anzeige_Dyn_Panel


If Strip(TO_DB_Val) <> ""   ,
 & Strip(TO_TS_Val) <> ""             Then Do
   tots = Space(TO_DB_Val "." TO_TS_Val, 0)
   If DB_Mod < 508 Then Do
      OK = Nexttab( "-- MOVE TABLE FROM FL 508 allowed ",   al.)
      OK = Nexttab( "-- you are using FL "DB_Mod ,  al.)
      OK = Nexttab( "-- "                        ,  al.)
    End
   OK = Nexttab( "ALTER TABLESPACE    " Space(DBN "." TSN, 0), al.)
   OK = Nexttab( "      MOVE TABLE    " SPACE(TBC "." TBN, 0)  , al. )
   OK = Nexttab( "      TO TABLESPACE " TOTS , al. )
   OK = Nexttab( "; "                               , al. )
 End


Return


RENAME_OBJECT:

Creator = DB2_CREATOR1
Name    = DB2_NAME1
CONAME  = DB2_CREATOR2

NewName           = Left(' '         , 68, ' ')

Select
  When  auswkz = 'TB' Then RENOBJ = "TABLE"
  When  auswkz = 'IX' Then RENOBJ = "INDEX"
  When  auswkz = 'CO' Then RENOBJ = "COLUMN"
  Otherwise Do
      Say "Rename nur auf Table, Index, COLUMN erlaubt "
      Say "Auswahl Kennzeichen ist "auswkz
      return
   End
 End

area.0  = 9
area.1  = white"Rename "RENOBJ" "Space(Creator "." name, 0)
If auswkz = 'CO' Then Do
   area.2  = white"    COLUMN " Space(DB2_CREATOR2, 0)
 End
Else Do
   area.2  = white" "
 End
area.3  = white" "
area.4  = white" "
area.5  = white" "
area.6  = white""keyw"Rename :"in1 || NewName  || endin
area.7  = white" "
area.8  = white" "
area.9  = white" "

Call Anzeige_Dyn_Panel

select
  When auswkz = 'CO' Then do
   If Strip(Rename_val)<> Name           ,
    & Strip(Rename_val)<> ""             Then Do
      OK = Nexttab( "Alter TABLE   " Space(Creator "." name, 0), al.)
      OK = Nexttab( "      RENAME COLUMN "Strip(COName)        , al.)
      OK = Nexttab( "       TO      " Strip(Rename_val)        , al.)
      OK = Nexttab( "; "                               , al. )
    End
   End
  Otherwise Do
   If Strip(Rename_val)<> NewName          Then Do
      OK = Nexttab( "RENAME "RENOBJ Space(Creator "." name, 0), al.)
      OK = Nexttab( "       TO      " Strip(Rename_val)         , al.)
      OK = Nexttab( "; "                               , al. )
    End
   End
 End

Return


REFRESH_MQT:

Creator = DB2_CREATOR1
Name    = DB2_NAME1


 OK = Nexttab( " REFRESH TABLE    " , al.)
 OK = Nexttab( "         "Space(Creator "." name, 0) , al.)
 OK = Nexttab( "; "                               , al. )

Return


COMMENT_On_Object:

Remarks = ""

Select
   when auswkz = 'TB'   Then Do
        AOBJ = 'TABLE '
        Call Auto_Parse
    End
   when auswkz = 'VW'   Then Do
        AOBJ = 'TABLE '
        Call Auto_Parse
    End
   when auswkz = 'AL'   Then Do
        AOBJ = 'ALIAS '
        Call Auto_Parse
    End
   when auswkz = 'IX'   Then Do
        AOBJ = 'INDEX '
        Call Auto_Parse
    End
   when auswkz = 'CO'   Then Do
        AOBJ = 'COLUMN  '
        Call Auto_Parse
    End
   when auswkz = 'PG'   Then Do
        AOBJ = 'PACKAGE '
        Call Auto_Parse
    End
   when auswkz = 'PL'   Then Do
        AOBJ = 'PLAN  '
        Call Auto_Parse
        DB2_NAME1 = DB2_CREATOR1
        DB2_CREATOR1 = ""
    End
   when auswkz = 'RT'   Then Do
        AOBJ = 'PROCEDURE '
        Call Auto_Parse
        Select
         When ROUTINETYPE   = 'P' Then Do
              AOBJ       = "PROCEDURE  "
              Call Auto_Parse
          End
         When ROUTINETYPE   = 'F' Then Do
              AOBJ       = "FUNCTION "
              Call Auto_Parse
          End
         otherwise  NOP
         End
    End
   when auswkz = 'RO'   Then Do
        AOBJ = 'ROLE  '
        DB2_CREATOR1 = ""
        Call Auto_Parse
    End
   when auswkz = 'SE'   Then Do
        AOBJ = 'SEQUENCE '
        Call Auto_Parse
    End
   when auswkz = 'TG'   Then Do
        AOBJ = 'TRIGGER  '
        Call Auto_Parse
    End
   when auswkz = 'TCO'  Then Do
        AOBJ = 'TRUSTED CONTEXT '
        DB2_CREATOR1 = ""
        Call Auto_Parse
    End
   when auswkz = 'DT'   Then Do
        AOBJ = 'TYPE            '
        Call Auto_Parse
    End
   when auswkz = 'PERM' Then Do
        AOBJ = 'PERMISSION      '
        Call Auto_Parse

        Select
         When CONTROL_TYPE  = 'R' Then Do
              AOBJ       = "PERMISSION "
              Call Auto_Parse
          End
         When CONTROL_TYPE  = 'M' Then Do
              AOBJ       = "MASK "
              Call Auto_Parse
          End
         otherwise  NOP
         End
    End
   when auswkz = 'VAR'  Then Do
        AOBJ = 'VARIABLE        '
        Call Auto_Parse
    End
   Otherwise Return
  End


if eingabe = "CM"  THEN Do
   CM = Remarks
   cmlen   = 63
   cm1     = SUBSTR(cm, 1, cmlen)
   cm2     = SUBSTR(cm, 1+cmlen*1, cmlen)
   cm3     = SUBSTR(cm, 1+cmlen*2, cmlen)
   cm4     = SUBSTR(cm, 1+cmlen*3, cmlen)
   cm5     = SUBSTR(cm, 1+cmlen*4, cmlen)
   cm6     = SUBSTR(cm, 1+cmlen*5, cmlen)
   cm7     = SUBSTR(cm, 1+cmlen*6, cmlen)
   cm8     = SUBSTR(cm, 1+cmlen*7, cmlen)
   cm9     = SUBSTR(cm, 1+cmlen*8, cmlen)
   cm10    = SUBSTR(cm, 1+cmlen*9, cmlen)
   cm11    = SUBSTR(cm, 1+cmlen*10, cmlen)
   cm12    = SUBSTR(cm, 1+cmlen*11, cmlen)
   cm13    = SUBSTR(cm, 1+cmlen*12, 18        )  /* 762 = cmlen*12+18 */
 End
if eingabe = "LAB" THEN Do
   CM = LABEL
   cm1     = SUBSTR(cm, 1, 30)
   cm2     = ""
   cm3     = ""
   cm4     = ""
   cm5     = ""
   cm6     = ""
   cm7     = ""
   cm8     = ""
   cm9     = ""
   cm10    = ""
   cm11    = ""
   cm12    = ""
   cm13    = ""
 End


If Length(DB2_CREATOR1) < 1 then cmobj = space(DB2_NAME1, 0)
 Else cmobj = Space(DB2_CREATOR1 "." DB2_NAME1,0)
If auswkz = 'CO'  Then cmobj = Strip(cmobj) || "." || DB2_CREATOR2
If auswkz = 'PG'  Then cmobj = Strip(cmobj) || " "|| object2 " "

if eingabe = "CM"  THEN WAS = "COMMENT "
if eingabe = "LAB" THEN WAS = "LABEL "

area.0  = 18
area.1  = white""WAS" ON "AOBJ cmobj " IS "
area.2  = white"                                             "
area.3  = white"                                             "
area.4  = white"                                             "
area.5  = white"   "keyw" "in2 || cm1 || endin
area.6  = white"   "keyw" "in2 || cm2 || endin
area.7  = white"   "keyw" "in2 || cm3 || endin
area.8  = white"   "keyw" "in2 || cm4 || endin
area.9  = white"   "keyw" "in2 || cm5 || endin
area.10 = white"   "keyw" "in2 || cm6 || endin
area.11 = white"   "keyw" "in2 || cm7 || endin
area.12 = white"   "keyw" "in2 || cm8 || endin
area.13 = white"   "keyw" "in2 || cm9 || endin
area.14 = white"   "keyw" "in2 || cm10|| endin
area.15 = white"   "keyw" "in2 || cm11|| endin
area.16 = white"   "keyw" "in2 || cm12|| endin
area.17 = white"   "keyw" "in2 || cm13|| endin
area.18 = white"   "


Call Anzeige_Dyn_Panel


comment = col1_Val   || ,
          col2_Val   || ,
          col3_Val   || ,
          col4_Val   || ,
          col5_Val   || ,
          col6_Val   || ,
          col7_Val   || ,
          col8_Val   || ,
          col9_Val   || ,
          col10_Val  || ,
          col11_Val  || ,
          col12_Val  || ,
          col13_Val  || ,
          ""

Comment = Strip(Comment, 'T')
if WAS = "LABEL"  & Comment = "" Then Comment = " "

If Strip(1              )<> 2           Then Do
   OK = Nexttab( WAS" ON " AOBJ cmobj " IS "    , al.)
   OK = Nexttab( "'" || Comment || "'"              , al.)
   OK = Nexttab( "; "                               , al.)
 End

return


Transfer_OwnerShip:


Select
  when auswkz = 'SG' Then  OBJ_Type  = "STOGROUP"
  when auswkz = 'DB' Then  OBJ_Type  = "DATABASE"
  when auswkz = 'IX' Then  OBJ_Type  = "INDEX"
  when auswkz = 'TB' Then  OBJ_Type  = "TABLE"
  when auswkz = 'TS' Then  OBJ_Type  = "TABLESPACE"
  when auswkz = 'VW' Then  OBJ_Type  = "VIEW"
  Otherwise do
       Say "Object fuer "auswkz "ist noch nicht vorgesehen"
       Return
   End
 End


Statement    = "TRANSFER OWNERSHIP OF "OBJ_Type
TORole       = Left(" "   , 40, ' ')
TOUser       = Left(" "   , 40, ' ')
TOSUser      = Left("N"   ,  1, ' ')
Revoke_PrIV  = Left("Y"   ,  1, ' ')



area.0  = 14
area.1  = white"" Statement " " Object1
area.2  = white" "
area.3  = white" "
area.4  = white" "
area.5  = white" "
area.6  = white" "keyw"Role        "in1 || TORole     || endin
area.7  = white" "keyw"User        "in1 || TOUser     || endin
area.8  = white" "keyw"Sessin_User "in1 || TOSUser    || endin,
          white" Y/N "
area.9  = white" "
area.10 = white" "keyw"Revoke      "in1 || Revoke_PrIV || endin,
          white" Y/N "
area.11 = white" "
area.12 = white" "
area.13 = white" "
area.14 = white" "

Call Anzeige_Dyn_Panel

 doit = "N"
 Select
   When Role_Val  <> TORole Then do
        OK = Nexttab( " " Statement        ,        al. )
        OK = Nexttab( "    "Object1        ,        al. )
        OK = Nexttab( "           To Role "Role_Val  ,        al. )
        doit = "Y"
     End
   When User_Val  <> TOUser Then do
        OK = Nexttab( " " Statement        ,        al. )
        OK = Nexttab( "    "Object1        ,        al. )
        OK = Nexttab( "           To User "User_Val  ,        al. )
        doit = "Y"
     End
   When Sessin_User_Val  <> TOSUser Then do
        OK = Nexttab( " " Statement        ,        al. )
        OK = Nexttab( "    "Object1        ,        al. )
        OK = Nexttab( "           To Sessin_User "   ,        al. )
        doit = "Y"
     End

   Otherwise NOP
  End

 If Revoke_Val = "Y"            & doit = "Y" Then Do
    OK = Nexttab( "           REVOKE PRIVILEGES ",        al. )
 End

 If doit = "Y" Then Do
    OK = Nexttab( " ;                 ",        al. )
 End


Return



Edit_Stmt:


DSNAME = ZOSC1900("ZOSC1","DSNAME", "STMT", LNR)
LRECL   = RECLEN
LRECL   = STMTLEN

IF LISTDSI(DSNAME) = 0 THEN do
    ADDRESS "TSO" "ALLOC F(SELDD) DA("DSNAME") SHR"
 end
else do
    ADDRESS "TSO" "ALLOC F(SELDD) DA("DSNAME") NEW CATALOG ,
          SPACE("TRACKS","TRACKS") TRACKS REUSE,
          LRECL("LRECL") UNIT(SYSDA)"
 end


ADDRESS "TSO" "EXECIO * DISKW SELDD ( STEM SL. FINIS"
ADDRESS "TSO" "FREE FI(SELDD)"

ok   = ZOSC1911(SSID,      ,
                LOCATION,  ,
                EINGABE,   ,
                OBJ,       ,
                DSNAME,    ,
                LNR   )

return

Get_CFG_FILE:
PARSE SOURCE SRC.1  , /* ENVIRONMENT  (TSO)            */
             SRC.2  , /* AUFRUF ALS (COMMAND)          */
             SRC.3  , /* Program NAME (LUW97000)       */
             SRC.4  , /* SYS00186 (TEMP FILE)          */
             SRC.5  , /* AUFRUF AUS LIB (X.X.CLISTUDB) */
             SRC.6  , /* ?                             */
             SRC.7  , /* TSO                           */
             SRC.8  , /* ISPF                          */
             SRC.9  , /* ?                             */
/*  CFG FILE                            */
mem     = "#SSIDINF"
CFGFILE = Strip(sysdsname) || "(" || mem || ")"
CFGFILE = Strip(proclib) || "(" || mem || ")"
ADDRESS TSO "FREE FILE(CFGF) NOHOLD"
ADDRESS TSO "ALLOC F(CFGF) DATASET('"CFGFILE"') SHR"
ADDRESS TSO "EXECIO * DISKR CFGF (STEM CONFIG. FINIS"
ADDRESS TSO "EXECIO 0 DISKR CFGF ( FINIS"
ADDRESS TSO "FREE FILE(CFGF) NOHOLD"

Do I = 1 TO CONFIG.0
   If Translate(Word(Config.i, 1))     = 'AG' ,
    | TRANSLATE(Word(Config.i, 1))     = SSID Then do
       CMDLINE =  Subword(CONFIG.i, 2)
       INTERPRET  CMDLINE
    End
 End

return 0


Anzeige_Dyn_Panel_old:

If InitArea <> "N" Then do
   Zeile = 0
   DROP ausgabe.
   ausgabe.0 = 0
   MaxLines = area.0
   curline = 1                        /* set current line #     */
   dyndata  = ""
   ADDRESS ISPEXEC  "VGET (ZSCREENW,ZSCREEND)"
   Do ai = 1 to area.0
      dyndata = dyndata || Left(area.ai, ZSCREENW, ' ')
    end
   dyndata = dyndata || endin
   dynarea = substr(dyndata,1+(curline-1)*ZSCREENW) /*set dyn var  */
   dynarea = dyndata

   MaxScreenLines = ZSCREEND-5
   dyndata_len = Length(dyndata)
   trenner = in1
   START   = Pos(keyw, dyndata, 1)
   If START  < 1 Then START = 1
   DYNPOS  = START + 1
   Do ki = 1 to keytab.0
      Found    = Pos(keytab.ki, dyndata, START )
      If Found > 0  Then Do
         SELECT
           When  DYNPOS =  START + 1   Then dynpos = Found + 1
           When  Found  <  DYNPOS      Then dynpos = Found + 1
           Otherwise NOP
          END
       End
    End
   znr     = 1
 End


NNCount = 0
If EnterBack = "Y" Then PFTASTEN = "ENTER=GO PF03=RETURN PF04=Cancel"
else                    PFTASTEN = "      PF03=GO    PF04=Cancel "

Do Until disprc > 0

  start   = 1+(curline-1)*ZSCREENW
  dynarea = substr(dyndata, Start)
  size = length(dynarea)                   /* Set a scalar variable  */
  ADDRESS ISPEXEC "DISPLAY PANEL(PDYNPNL1)"

  MaxScreenLines = DYNDPTH
  DynArea_len = MaxScreenLines*ZSCREENW
  dyndata1= Substr(dyndata, 1,  1+(curline-1)*ZSCREENW-1)
  start   = Length(dyndata1) + Length(dynarea) + 1
  Dyndata = Dyndata1 || dynarea || Substr(Dyndata, start)
  Eingabe = dynarea
  Eingabe = dyndata

  disprc = rc                              /* save return code       */
  ADDRESS ISPEXEC "VGET (ZVERB,ZSCROLLA,ZSCROLLN, ZSCROLLD) "
  ADDRESS ISPEXEC "VGET (ZXSMAX, ZXSMIN) "
  dynrc = rc
  SELECT                                   /* Process scrolling      */
    When(zverb  = 'UP')   Then Do          /* Scroll up              */
     If zscrolla = 'MAX' Then Do           /*  if scroll was max     */
        curline = 1                       /*    scroll to top       */
      End
     Else Do                               /*  else a number is known*/
      curline = curline - MaxScreenLines        /* (max is bottom)   */
      if curline < 1 then Curline = 1
      End
     End
    When(zverb  = 'DOWN') Then Do          /* Scroll down            */
     If zscrolla = 'MAX' Then Do           /*  if scroll was max     */
      curline = maxlines                   /*    scroll to bottom    */
     end
     Else do                               /*  else a number is known*/
      curline = curline + MaxScreenLines        /* (max is bottom)   */
      If curline > maxlines Then Curline = maxlines
      if DynArea_len >= dyndata_len Then Do  /* NUR EINE SEITE */
         curline = 1
       End
      end
     end
    Otherwise;                      /* could use left & right too    */
  End
  if dynrc > 8 then Do
     say "Display RC="RC
     say "ZEDSMSG="ZEDSMSG
     say "ZERRLM="ZERRLM
     say "ZERRMSG="ZERRMSG
     say "ZERRSM="ZERRSM
     say rc object1
   End

  DO While Length(eingabe) > 0
     Zeile = zeile + 1
     trenner = in1

     FoundL = 0
     Do ki = 1 to keytab.0
        Found    = Pos(keytab.ki, eingabe, 1)
        If Found = 0 Then Iterate
        Select
          When FoundL = 0 Then Do
               Trenner = keytab.KI
               FoundL  = Found
           End
          When FoundL > 0 & Found < FoundL Then Do
               Trenner = keytab.KI
               FoundL  = Found
           End
          Otherwise NOP
         End
      End

     /*    Keyword Finden   */
     epos     = Pos(keyw, eingabe, 1)
     xpos     = Pos(Trenner, eingabe, epos+1)
     elen     = xpos - epos -1
     If    elen < 0 Then Leave
     Keyword  =  Substr(eingabe, epos+1, elen  )
     Keyword  =  Word(Keyword, 1)

     If Length(Keyword) < 1 Then Do
        NNCount = NNCount + 1
        KeyWord = "Col" || NNCount
      End

     /*    EINGABE Finden   */
     epos     = Pos(Trenner, eingabe, 1)
     if epos  < 1 then leave
     xpos     = Pos(endin, eingabe, epos+1)
     elen     = xpos - epos -1
     if elen < 1 then Do
        If Length(KeyWord) > 0 Then evalue = ""
      End
     Else evalue   = Substr(eingabe, epos+1, elen  )
     eingabe  = Substr(eingabe, xpos+ 1)

     Interpret Strip(Keyword) || "_VAL" "= evalue"
   End
   If PF = 'PF03'               THEN LEAVE
   If PF = 'PF04'               THEN EXIT 4
   If RESP = "ENTER" & EnterBack = "Y" Then return
End                                        /* End of display loop    */

Return


Anzeige_Dyn_Panel:

ADDRESS ISPEXEC  "VGET (ZSCREENW,ZSCREEND)"
dyndata = ""
Do ai = 1 to area.0
   dyndata = dyndata || Left(area.ai, ZSCREENW, ' ')
 end

If InitArea  <> "N" THEN InitArea  = "Y"
If EnterBack <> "Y" THEN EnterBack = "N"

Call ZOSC1906 DYNDATA ,,
              EnterBack ,,
              InitArea

Do QUEUED()
   Parse pull Text
   Interpret Text
 End

PF = RESULT
IF PF = "ENTER" THEN RESP = PF
IF PF = "PF04" Then exit 4

Return

Lesen_daten:

LOC  = LOCATION
FK   = AUSWKZ
OB   = object
OB2  = Object2
OB3  = Object3
OB4  = Object4
OB5  = Object5
TS   = Tablespace
DB   = DATABASE
SG   = STGROUP
LOBJ = ListObject
WL   = ""

DDLTEXT = ""
DDLTEXT = DDLTEXT ZOSC1AC3(SSID,   ,           /* SSID    */
                           EDIT_SQL,,          /* Edit SQL */
                           LOC,    ,           /* LOCATION */
                           LNR,    ,           /* TABLENR */
                           TABNR,  ,           /* TABLENR */
                           FK,     ,           /* FUKTION */
                           OB,     ,           /* OBJECT  */
                           OB2,    ,           /* TABLE   */
                           OB3,    ,           /* TABLE   */
                           OB4,    ,           /* TABLE   */
                           OB5,    ,           /* TABLE   */
                           TS,     ,           /* TABLESPACE */
                           DB,     ,           /* DATABASE   */
                           SG,     ,           /* STORAGEGROUP */
                           LOBJ,   ,           /* List Object*/
                           ISPFILE,,           /* ISPFILE    */
                           DB2vers,,           /* db2 version   */
                           DB2CatL,,           /* db2 Catalog Level */
                           WL      ,           /* Like Suchen oder = */
                           )

DDLTEXT = STRIP(DDLTEXT)
IF LENGTH(DDLTEXT) = 0 THEN DO
   X        = MSG('ON')
   ZEDSMSG = ""
   ZEDLMSG = " -KEIN TREFFER ZUR AUSWAHL- "
   ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
   X        = MSG('OFF')
   RETURN 0
 End

DO FOREVER
   PARSE VALUE DDLTEXT WITH LZEILE  '-NR' REST
   IF SUBSTR(LZEILE, 1, 4) = "*UZ*" THEN DO
      UZeile = substr(LZeile, 5)
    end
   IF REST = '' THEN LEAVE
   DDLTEXT = REST
 END


return


Auto_Parse:
/* Zuweisen der CZEILE zu den Column Names */

If Datatype(Auto_Parse_Cols.0) <> "NUM" Then Do
   address ispexec "TBOPEN " TBCOL
   Address ISPEXEC "TBTOP  " TBCOL
   Address ISPEXEC "TBSKIP" TBCOL
   Auto_Parse_Cols.0 = 0
   do while rc = 0
      Auto_Parse_Cols.0 = Auto_Parse_Cols.0 + 1
      If MAX_AUTO_PARSE    > 0 ,
       & Auto_Parse_Cols.0 > MAX_AUTO_PARSE Then Do
         Auto_Parse_Cols.0 = MAX_AUTO_PARSE
         Leave
        End
      APCOLI = Auto_Parse_Cols.0
      CLName = Translate(CLNAME, '_', '-')
      Auto_Parse_Cols.APCOLI.#CONAME = CLNAME
      Address ISPEXEC "TBSKIP" TBCOL
   end
   address ispexec "TBCLOSE" TBCOL
 End

PZeile = CZEILE
MAX_AUTO_PARSE_COUNTER = 0
do APCOLI = 1 To Auto_Parse_Cols.0
   parse value PZeile with PVal "0a0d"x  PZeile
   CLName = Auto_Parse_Cols.APCOLI.#CONAME
   PVAL   = Translate(PVAL, ' ', '"')
   interpret STRIP(CLNAME) " = Strip(PVAL)"
end


return 0

Auto_Parse_old:
/* Zuweisen der CZEILE zu den Column Names */

address ispexec "TBOPEN " TBCOL
Address ISPEXEC "TBTOP  " TBCOL
Address ISPEXEC "TBSKIP" TBCOL

PZeile = CZEILE
MAX_AUTO_PARSE_COUNTER = 0
do while rc = 0
   MAX_AUTO_PARSE_COUNTER = MAX_AUTO_PARSE_COUNTER + 1

   If MAX_AUTO_PARSE         > 0 ,
    & MAX_AUTO_PARSE_COUNTER > MAX_AUTO_PARSE Then do
      Leave
    End

   parse value PZeile with PVal "0a0d"x  PZeile
   CLName = Translate(CLNAME, '_', '-')
   PVAL   = Translate(PVAL, ' ', '"')
   interpret STRIP(CLNAME) " = Strip(PVAL)"
   Address ISPEXEC "TBSKIP" TBCOL
end

MAX_AUTO_PARSE = 0

address ispexec "TBCLOSE" TBCOL

return 0


NextTab:
text = arg(1)
tab  = arg(2)
If EDIT = "YES" then tab = sl.  /* WENN EDIT DANN SQL */

ind  = Value(tab || 0)
ind  = ind + 1
interpret tab || "0 = ind"
interpret tab || "ind = arg(1) "
return 0

error: failure: syntax: novalue:
return
